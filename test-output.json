[
	{
		"languageOptions": {
			"globals": {
				"AbortController": false,
				"AbortSignal": false,
				"AbsoluteOrientationSensor": false,
				"AbstractRange": false,
				"Accelerometer": false,
				"addEventListener": false,
				"alert": false,
				"AnalyserNode": false,
				"Animation": false,
				"AnimationEffect": false,
				"AnimationEvent": false,
				"AnimationPlaybackEvent": false,
				"AnimationTimeline": false,
				"atob": false,
				"Attr": false,
				"Audio": false,
				"AudioBuffer": false,
				"AudioBufferSourceNode": false,
				"AudioContext": false,
				"AudioData": false,
				"AudioDecoder": false,
				"AudioDestinationNode": false,
				"AudioEncoder": false,
				"AudioListener": false,
				"AudioNode": false,
				"AudioParam": false,
				"AudioParamMap": false,
				"AudioProcessingEvent": false,
				"AudioScheduledSourceNode": false,
				"AudioSinkInfo": false,
				"AudioWorklet": false,
				"AudioWorkletGlobalScope": false,
				"AudioWorkletNode": false,
				"AudioWorkletProcessor": false,
				"AuthenticatorAssertionResponse": false,
				"AuthenticatorAttestationResponse": false,
				"AuthenticatorResponse": false,
				"BackgroundFetchManager": false,
				"BackgroundFetchRecord": false,
				"BackgroundFetchRegistration": false,
				"BarProp": false,
				"BaseAudioContext": false,
				"BatteryManager": false,
				"BeforeUnloadEvent": false,
				"BiquadFilterNode": false,
				"Blob": false,
				"BlobEvent": false,
				"Bluetooth": false,
				"BluetoothCharacteristicProperties": false,
				"BluetoothDevice": false,
				"BluetoothRemoteGATTCharacteristic": false,
				"BluetoothRemoteGATTDescriptor": false,
				"BluetoothRemoteGATTServer": false,
				"BluetoothRemoteGATTService": false,
				"BluetoothUUID": false,
				"blur": false,
				"BroadcastChannel": false,
				"BrowserCaptureMediaStreamTrack": false,
				"btoa": false,
				"ByteLengthQueuingStrategy": false,
				"Cache": false,
				"caches": false,
				"CacheStorage": false,
				"cancelAnimationFrame": false,
				"cancelIdleCallback": false,
				"CanvasCaptureMediaStream": false,
				"CanvasCaptureMediaStreamTrack": false,
				"CanvasGradient": false,
				"CanvasPattern": false,
				"CanvasRenderingContext2D": false,
				"CaptureController": false,
				"CaretPosition": false,
				"CDATASection": false,
				"ChannelMergerNode": false,
				"ChannelSplitterNode": false,
				"CharacterBoundsUpdateEvent": false,
				"CharacterData": false,
				"clearInterval": false,
				"clearTimeout": false,
				"clientInformation": false,
				"Clipboard": false,
				"ClipboardEvent": false,
				"ClipboardItem": false,
				"close": false,
				"closed": false,
				"CloseEvent": false,
				"Comment": false,
				"CompositionEvent": false,
				"CompressionStream": false,
				"confirm": false,
				"console": false,
				"ConstantSourceNode": false,
				"ContentVisibilityAutoStateChangeEvent": false,
				"ConvolverNode": false,
				"CookieChangeEvent": false,
				"CookieDeprecationLabel": false,
				"cookieStore": false,
				"CookieStore": false,
				"CookieStoreManager": false,
				"CountQueuingStrategy": false,
				"createImageBitmap": false,
				"Credential": false,
				"credentialless": false,
				"CredentialsContainer": false,
				"CropTarget": false,
				"crossOriginIsolated": false,
				"crypto": false,
				"Crypto": false,
				"CryptoKey": false,
				"CSS": false,
				"CSSAnimation": false,
				"CSSConditionRule": false,
				"CSSContainerRule": false,
				"CSSCounterStyleRule": false,
				"CSSFontFaceRule": false,
				"CSSFontFeatureValuesRule": false,
				"CSSFontPaletteValuesRule": false,
				"CSSGroupingRule": false,
				"CSSImageValue": false,
				"CSSImportRule": false,
				"CSSKeyframeRule": false,
				"CSSKeyframesRule": false,
				"CSSKeywordValue": false,
				"CSSLayerBlockRule": false,
				"CSSLayerStatementRule": false,
				"CSSMathClamp": false,
				"CSSMathInvert": false,
				"CSSMathMax": false,
				"CSSMathMin": false,
				"CSSMathNegate": false,
				"CSSMathProduct": false,
				"CSSMathSum": false,
				"CSSMathValue": false,
				"CSSMatrixComponent": false,
				"CSSMediaRule": false,
				"CSSNamespaceRule": false,
				"CSSNumericArray": false,
				"CSSNumericValue": false,
				"CSSPageRule": false,
				"CSSPerspective": false,
				"CSSPositionTryDescriptors": false,
				"CSSPositionTryRule": false,
				"CSSPositionValue": false,
				"CSSPropertyRule": false,
				"CSSRotate": false,
				"CSSRule": false,
				"CSSRuleList": false,
				"CSSScale": false,
				"CSSScopeRule": false,
				"CSSSkew": false,
				"CSSSkewX": false,
				"CSSSkewY": false,
				"CSSStartingStyleRule": false,
				"CSSStyleDeclaration": false,
				"CSSStyleRule": false,
				"CSSStyleSheet": false,
				"CSSStyleValue": false,
				"CSSSupportsRule": false,
				"CSSTransformComponent": false,
				"CSSTransformValue": false,
				"CSSTransition": false,
				"CSSTranslate": false,
				"CSSUnitValue": false,
				"CSSUnparsedValue": false,
				"CSSVariableReferenceValue": false,
				"currentFrame": false,
				"currentTime": false,
				"CustomElementRegistry": false,
				"customElements": false,
				"CustomEvent": false,
				"CustomStateSet": false,
				"DataTransfer": false,
				"DataTransferItem": false,
				"DataTransferItemList": false,
				"DecompressionStream": false,
				"DelayNode": false,
				"DelegatedInkTrailPresenter": false,
				"DeviceMotionEvent": false,
				"DeviceMotionEventAcceleration": false,
				"DeviceMotionEventRotationRate": false,
				"DeviceOrientationEvent": false,
				"devicePixelRatio": false,
				"dispatchEvent": false,
				"document": false,
				"Document": false,
				"DocumentFragment": false,
				"documentPictureInPicture": false,
				"DocumentPictureInPicture": false,
				"DocumentPictureInPictureEvent": false,
				"DocumentTimeline": false,
				"DocumentType": false,
				"DOMError": false,
				"DOMException": false,
				"DOMImplementation": false,
				"DOMMatrix": false,
				"DOMMatrixReadOnly": false,
				"DOMParser": false,
				"DOMPoint": false,
				"DOMPointReadOnly": false,
				"DOMQuad": false,
				"DOMRect": false,
				"DOMRectList": false,
				"DOMRectReadOnly": false,
				"DOMStringList": false,
				"DOMStringMap": false,
				"DOMTokenList": false,
				"DragEvent": false,
				"DynamicsCompressorNode": false,
				"EditContext": false,
				"Element": false,
				"ElementInternals": false,
				"EncodedAudioChunk": false,
				"EncodedVideoChunk": false,
				"ErrorEvent": false,
				"event": false,
				"Event": false,
				"EventCounts": false,
				"EventSource": false,
				"EventTarget": false,
				"external": false,
				"External": false,
				"EyeDropper": false,
				"FeaturePolicy": false,
				"FederatedCredential": false,
				"fence": false,
				"Fence": false,
				"FencedFrameConfig": false,
				"fetch": false,
				"fetchLater": false,
				"FetchLaterResult": false,
				"File": false,
				"FileList": false,
				"FileReader": false,
				"FileSystem": false,
				"FileSystemDirectoryEntry": false,
				"FileSystemDirectoryHandle": false,
				"FileSystemDirectoryReader": false,
				"FileSystemEntry": false,
				"FileSystemFileEntry": false,
				"FileSystemFileHandle": false,
				"FileSystemHandle": false,
				"FileSystemWritableFileStream": false,
				"find": false,
				"focus": false,
				"FocusEvent": false,
				"FontData": false,
				"FontFace": false,
				"FontFaceSet": false,
				"FontFaceSetLoadEvent": false,
				"FormData": false,
				"FormDataEvent": false,
				"FragmentDirective": false,
				"frameElement": false,
				"frames": false,
				"GainNode": false,
				"Gamepad": false,
				"GamepadAxisMoveEvent": false,
				"GamepadButton": false,
				"GamepadButtonEvent": false,
				"GamepadEvent": false,
				"GamepadHapticActuator": false,
				"GamepadPose": false,
				"Geolocation": false,
				"GeolocationCoordinates": false,
				"GeolocationPosition": false,
				"GeolocationPositionError": false,
				"getComputedStyle": false,
				"getScreenDetails": false,
				"getSelection": false,
				"GPU": false,
				"GPUAdapter": false,
				"GPUAdapterInfo": false,
				"GPUBindGroup": false,
				"GPUBindGroupLayout": false,
				"GPUBuffer": false,
				"GPUBufferUsage": false,
				"GPUCanvasContext": false,
				"GPUColorWrite": false,
				"GPUCommandBuffer": false,
				"GPUCommandEncoder": false,
				"GPUCompilationInfo": false,
				"GPUCompilationMessage": false,
				"GPUComputePassEncoder": false,
				"GPUComputePipeline": false,
				"GPUDevice": false,
				"GPUDeviceLostInfo": false,
				"GPUError": false,
				"GPUExternalTexture": false,
				"GPUInternalError": false,
				"GPUMapMode": false,
				"GPUOutOfMemoryError": false,
				"GPUPipelineError": false,
				"GPUPipelineLayout": false,
				"GPUQuerySet": false,
				"GPUQueue": false,
				"GPURenderBundle": false,
				"GPURenderBundleEncoder": false,
				"GPURenderPassEncoder": false,
				"GPURenderPipeline": false,
				"GPUSampler": false,
				"GPUShaderModule": false,
				"GPUShaderStage": false,
				"GPUSupportedFeatures": false,
				"GPUSupportedLimits": false,
				"GPUTexture": false,
				"GPUTextureUsage": false,
				"GPUTextureView": false,
				"GPUUncapturedErrorEvent": false,
				"GPUValidationError": false,
				"GravitySensor": false,
				"Gyroscope": false,
				"HashChangeEvent": false,
				"Headers": false,
				"HID": false,
				"HIDConnectionEvent": false,
				"HIDDevice": false,
				"HIDInputReportEvent": false,
				"Highlight": false,
				"HighlightRegistry": false,
				"history": false,
				"History": false,
				"HTMLAllCollection": false,
				"HTMLAnchorElement": false,
				"HTMLAreaElement": false,
				"HTMLAudioElement": false,
				"HTMLBaseElement": false,
				"HTMLBodyElement": false,
				"HTMLBRElement": false,
				"HTMLButtonElement": false,
				"HTMLCanvasElement": false,
				"HTMLCollection": false,
				"HTMLDataElement": false,
				"HTMLDataListElement": false,
				"HTMLDetailsElement": false,
				"HTMLDialogElement": false,
				"HTMLDirectoryElement": false,
				"HTMLDivElement": false,
				"HTMLDListElement": false,
				"HTMLDocument": false,
				"HTMLElement": false,
				"HTMLEmbedElement": false,
				"HTMLFencedFrameElement": false,
				"HTMLFieldSetElement": false,
				"HTMLFontElement": false,
				"HTMLFormControlsCollection": false,
				"HTMLFormElement": false,
				"HTMLFrameElement": false,
				"HTMLFrameSetElement": false,
				"HTMLHeadElement": false,
				"HTMLHeadingElement": false,
				"HTMLHRElement": false,
				"HTMLHtmlElement": false,
				"HTMLIFrameElement": false,
				"HTMLImageElement": false,
				"HTMLInputElement": false,
				"HTMLLabelElement": false,
				"HTMLLegendElement": false,
				"HTMLLIElement": false,
				"HTMLLinkElement": false,
				"HTMLMapElement": false,
				"HTMLMarqueeElement": false,
				"HTMLMediaElement": false,
				"HTMLMenuElement": false,
				"HTMLMetaElement": false,
				"HTMLMeterElement": false,
				"HTMLModElement": false,
				"HTMLObjectElement": false,
				"HTMLOListElement": false,
				"HTMLOptGroupElement": false,
				"HTMLOptionElement": false,
				"HTMLOptionsCollection": false,
				"HTMLOutputElement": false,
				"HTMLParagraphElement": false,
				"HTMLParamElement": false,
				"HTMLPictureElement": false,
				"HTMLPreElement": false,
				"HTMLProgressElement": false,
				"HTMLQuoteElement": false,
				"HTMLScriptElement": false,
				"HTMLSelectElement": false,
				"HTMLSlotElement": false,
				"HTMLSourceElement": false,
				"HTMLSpanElement": false,
				"HTMLStyleElement": false,
				"HTMLTableCaptionElement": false,
				"HTMLTableCellElement": false,
				"HTMLTableColElement": false,
				"HTMLTableElement": false,
				"HTMLTableRowElement": false,
				"HTMLTableSectionElement": false,
				"HTMLTemplateElement": false,
				"HTMLTextAreaElement": false,
				"HTMLTimeElement": false,
				"HTMLTitleElement": false,
				"HTMLTrackElement": false,
				"HTMLUListElement": false,
				"HTMLUnknownElement": false,
				"HTMLVideoElement": false,
				"IDBCursor": false,
				"IDBCursorWithValue": false,
				"IDBDatabase": false,
				"IDBFactory": false,
				"IDBIndex": false,
				"IDBKeyRange": false,
				"IDBObjectStore": false,
				"IDBOpenDBRequest": false,
				"IDBRequest": false,
				"IDBTransaction": false,
				"IDBVersionChangeEvent": false,
				"IdentityCredential": false,
				"IdentityCredentialError": false,
				"IdentityProvider": false,
				"IdleDeadline": false,
				"IdleDetector": false,
				"IIRFilterNode": false,
				"Image": false,
				"ImageBitmap": false,
				"ImageBitmapRenderingContext": false,
				"ImageCapture": false,
				"ImageData": false,
				"ImageDecoder": false,
				"ImageTrack": false,
				"ImageTrackList": false,
				"indexedDB": false,
				"Ink": false,
				"innerHeight": false,
				"innerWidth": false,
				"InputDeviceCapabilities": false,
				"InputDeviceInfo": false,
				"InputEvent": false,
				"IntersectionObserver": false,
				"IntersectionObserverEntry": false,
				"isSecureContext": false,
				"Iterator": false,
				"Keyboard": false,
				"KeyboardEvent": false,
				"KeyboardLayoutMap": false,
				"KeyframeEffect": false,
				"LargestContentfulPaint": false,
				"LaunchParams": false,
				"launchQueue": false,
				"LaunchQueue": false,
				"LayoutShift": false,
				"LayoutShiftAttribution": false,
				"length": false,
				"LinearAccelerationSensor": false,
				"localStorage": false,
				"location": true,
				"Location": false,
				"locationbar": false,
				"Lock": false,
				"LockManager": false,
				"matchMedia": false,
				"MathMLElement": false,
				"MediaCapabilities": false,
				"MediaCapabilitiesInfo": false,
				"MediaDeviceInfo": false,
				"MediaDevices": false,
				"MediaElementAudioSourceNode": false,
				"MediaEncryptedEvent": false,
				"MediaError": false,
				"MediaKeyError": false,
				"MediaKeyMessageEvent": false,
				"MediaKeys": false,
				"MediaKeySession": false,
				"MediaKeyStatusMap": false,
				"MediaKeySystemAccess": false,
				"MediaList": false,
				"MediaMetadata": false,
				"MediaQueryList": false,
				"MediaQueryListEvent": false,
				"MediaRecorder": false,
				"MediaRecorderErrorEvent": false,
				"MediaSession": false,
				"MediaSource": false,
				"MediaSourceHandle": false,
				"MediaStream": false,
				"MediaStreamAudioDestinationNode": false,
				"MediaStreamAudioSourceNode": false,
				"MediaStreamEvent": false,
				"MediaStreamTrack": false,
				"MediaStreamTrackAudioSourceNode": false,
				"MediaStreamTrackAudioStats": false,
				"MediaStreamTrackEvent": false,
				"MediaStreamTrackGenerator": false,
				"MediaStreamTrackProcessor": false,
				"MediaStreamTrackVideoStats": false,
				"menubar": false,
				"MessageChannel": false,
				"MessageEvent": false,
				"MessagePort": false,
				"MIDIAccess": false,
				"MIDIConnectionEvent": false,
				"MIDIInput": false,
				"MIDIInputMap": false,
				"MIDIMessageEvent": false,
				"MIDIOutput": false,
				"MIDIOutputMap": false,
				"MIDIPort": false,
				"MimeType": false,
				"MimeTypeArray": false,
				"model": false,
				"ModelGenericSession": false,
				"ModelManager": false,
				"MouseEvent": false,
				"moveBy": false,
				"moveTo": false,
				"MutationEvent": false,
				"MutationObserver": false,
				"MutationRecord": false,
				"name": false,
				"NamedNodeMap": false,
				"NavigateEvent": false,
				"navigation": false,
				"Navigation": false,
				"NavigationActivation": false,
				"NavigationCurrentEntryChangeEvent": false,
				"NavigationDestination": false,
				"NavigationHistoryEntry": false,
				"NavigationPreloadManager": false,
				"NavigationTransition": false,
				"navigator": false,
				"Navigator": false,
				"NavigatorLogin": false,
				"NavigatorManagedData": false,
				"NavigatorUAData": false,
				"NetworkInformation": false,
				"Node": false,
				"NodeFilter": false,
				"NodeIterator": false,
				"NodeList": false,
				"Notification": false,
				"NotifyPaintEvent": false,
				"NotRestoredReasonDetails": false,
				"NotRestoredReasons": false,
				"OfflineAudioCompletionEvent": false,
				"OfflineAudioContext": false,
				"offscreenBuffering": false,
				"OffscreenCanvas": false,
				"OffscreenCanvasRenderingContext2D": false,
				"onabort": true,
				"onafterprint": true,
				"onanimationcancel": true,
				"onanimationend": true,
				"onanimationiteration": true,
				"onanimationstart": true,
				"onappinstalled": true,
				"onauxclick": true,
				"onbeforeinput": true,
				"onbeforeinstallprompt": true,
				"onbeforematch": true,
				"onbeforeprint": true,
				"onbeforetoggle": true,
				"onbeforeunload": true,
				"onbeforexrselect": true,
				"onblur": true,
				"oncancel": true,
				"oncanplay": true,
				"oncanplaythrough": true,
				"onchange": true,
				"onclick": true,
				"onclose": true,
				"oncontentvisibilityautostatechange": true,
				"oncontextlost": true,
				"oncontextmenu": true,
				"oncontextrestored": true,
				"oncopy": true,
				"oncuechange": true,
				"oncut": true,
				"ondblclick": true,
				"ondevicemotion": true,
				"ondeviceorientation": true,
				"ondeviceorientationabsolute": true,
				"ondrag": true,
				"ondragend": true,
				"ondragenter": true,
				"ondragleave": true,
				"ondragover": true,
				"ondragstart": true,
				"ondrop": true,
				"ondurationchange": true,
				"onemptied": true,
				"onended": true,
				"onerror": true,
				"onfocus": true,
				"onformdata": true,
				"ongamepadconnected": true,
				"ongamepaddisconnected": true,
				"ongotpointercapture": true,
				"onhashchange": true,
				"oninput": true,
				"oninvalid": true,
				"onkeydown": true,
				"onkeypress": true,
				"onkeyup": true,
				"onlanguagechange": true,
				"onload": true,
				"onloadeddata": true,
				"onloadedmetadata": true,
				"onloadstart": true,
				"onlostpointercapture": true,
				"onmessage": true,
				"onmessageerror": true,
				"onmousedown": true,
				"onmouseenter": true,
				"onmouseleave": true,
				"onmousemove": true,
				"onmouseout": true,
				"onmouseover": true,
				"onmouseup": true,
				"onmousewheel": true,
				"onoffline": true,
				"ononline": true,
				"onpagehide": true,
				"onpagereveal": true,
				"onpageshow": true,
				"onpageswap": true,
				"onpaste": true,
				"onpause": true,
				"onplay": true,
				"onplaying": true,
				"onpointercancel": true,
				"onpointerdown": true,
				"onpointerenter": true,
				"onpointerleave": true,
				"onpointermove": true,
				"onpointerout": true,
				"onpointerover": true,
				"onpointerrawupdate": true,
				"onpointerup": true,
				"onpopstate": true,
				"onprogress": true,
				"onratechange": true,
				"onrejectionhandled": true,
				"onreset": true,
				"onresize": true,
				"onscroll": true,
				"onscrollend": true,
				"onsearch": true,
				"onsecuritypolicyviolation": true,
				"onseeked": true,
				"onseeking": true,
				"onselect": true,
				"onselectionchange": true,
				"onselectstart": true,
				"onslotchange": true,
				"onstalled": true,
				"onstorage": true,
				"onsubmit": true,
				"onsuspend": true,
				"ontimeupdate": true,
				"ontoggle": true,
				"ontransitioncancel": true,
				"ontransitionend": true,
				"ontransitionrun": true,
				"ontransitionstart": true,
				"onunhandledrejection": true,
				"onunload": true,
				"onvolumechange": true,
				"onwaiting": true,
				"onwheel": true,
				"open": false,
				"opener": false,
				"Option": false,
				"OrientationSensor": false,
				"origin": false,
				"originAgentCluster": false,
				"OscillatorNode": false,
				"OTPCredential": false,
				"outerHeight": false,
				"outerWidth": false,
				"OverconstrainedError": false,
				"PageRevealEvent": false,
				"PageSwapEvent": false,
				"PageTransitionEvent": false,
				"pageXOffset": false,
				"pageYOffset": false,
				"PannerNode": false,
				"parent": false,
				"PasswordCredential": false,
				"Path2D": false,
				"PaymentAddress": false,
				"PaymentManager": false,
				"PaymentMethodChangeEvent": false,
				"PaymentRequest": false,
				"PaymentRequestUpdateEvent": false,
				"PaymentResponse": false,
				"performance": false,
				"Performance": false,
				"PerformanceElementTiming": false,
				"PerformanceEntry": false,
				"PerformanceEventTiming": false,
				"PerformanceLongAnimationFrameTiming": false,
				"PerformanceLongTaskTiming": false,
				"PerformanceMark": false,
				"PerformanceMeasure": false,
				"PerformanceNavigation": false,
				"PerformanceNavigationTiming": false,
				"PerformanceObserver": false,
				"PerformanceObserverEntryList": false,
				"PerformancePaintTiming": false,
				"PerformanceResourceTiming": false,
				"PerformanceScriptTiming": false,
				"PerformanceServerTiming": false,
				"PerformanceTiming": false,
				"PeriodicSyncManager": false,
				"PeriodicWave": false,
				"Permissions": false,
				"PermissionStatus": false,
				"PERSISTENT": false,
				"personalbar": false,
				"PictureInPictureEvent": false,
				"PictureInPictureWindow": false,
				"Plugin": false,
				"PluginArray": false,
				"PointerEvent": false,
				"PopStateEvent": false,
				"postMessage": false,
				"Presentation": false,
				"PresentationAvailability": false,
				"PresentationConnection": false,
				"PresentationConnectionAvailableEvent": false,
				"PresentationConnectionCloseEvent": false,
				"PresentationConnectionList": false,
				"PresentationReceiver": false,
				"PresentationRequest": false,
				"PressureObserver": false,
				"PressureRecord": false,
				"print": false,
				"ProcessingInstruction": false,
				"Profiler": false,
				"ProgressEvent": false,
				"PromiseRejectionEvent": false,
				"prompt": false,
				"ProtectedAudience": false,
				"PublicKeyCredential": false,
				"PushManager": false,
				"PushSubscription": false,
				"PushSubscriptionOptions": false,
				"queryLocalFonts": false,
				"queueMicrotask": false,
				"RadioNodeList": false,
				"Range": false,
				"ReadableByteStreamController": false,
				"ReadableStream": false,
				"ReadableStreamBYOBReader": false,
				"ReadableStreamBYOBRequest": false,
				"ReadableStreamDefaultController": false,
				"ReadableStreamDefaultReader": false,
				"registerProcessor": false,
				"RelativeOrientationSensor": false,
				"RemotePlayback": false,
				"removeEventListener": false,
				"reportError": false,
				"ReportingObserver": false,
				"Request": false,
				"requestAnimationFrame": false,
				"requestIdleCallback": false,
				"resizeBy": false,
				"ResizeObserver": false,
				"ResizeObserverEntry": false,
				"ResizeObserverSize": false,
				"resizeTo": false,
				"Response": false,
				"RTCCertificate": false,
				"RTCDataChannel": false,
				"RTCDataChannelEvent": false,
				"RTCDtlsTransport": false,
				"RTCDTMFSender": false,
				"RTCDTMFToneChangeEvent": false,
				"RTCEncodedAudioFrame": false,
				"RTCEncodedVideoFrame": false,
				"RTCError": false,
				"RTCErrorEvent": false,
				"RTCIceCandidate": false,
				"RTCIceTransport": false,
				"RTCPeerConnection": false,
				"RTCPeerConnectionIceErrorEvent": false,
				"RTCPeerConnectionIceEvent": false,
				"RTCRtpReceiver": false,
				"RTCRtpScriptTransform": false,
				"RTCRtpSender": false,
				"RTCRtpTransceiver": false,
				"RTCSctpTransport": false,
				"RTCSessionDescription": false,
				"RTCStatsReport": false,
				"RTCTrackEvent": false,
				"sampleRate": false,
				"scheduler": false,
				"Scheduler": false,
				"Scheduling": false,
				"screen": false,
				"Screen": false,
				"ScreenDetailed": false,
				"ScreenDetails": false,
				"screenLeft": false,
				"ScreenOrientation": false,
				"screenTop": false,
				"screenX": false,
				"screenY": false,
				"ScriptProcessorNode": false,
				"scroll": false,
				"scrollbars": false,
				"scrollBy": false,
				"ScrollTimeline": false,
				"scrollTo": false,
				"scrollX": false,
				"scrollY": false,
				"SecurityPolicyViolationEvent": false,
				"Selection": false,
				"self": false,
				"Sensor": false,
				"SensorErrorEvent": false,
				"Serial": false,
				"SerialPort": false,
				"ServiceWorker": false,
				"ServiceWorkerContainer": false,
				"ServiceWorkerRegistration": false,
				"sessionStorage": false,
				"setInterval": false,
				"setTimeout": false,
				"ShadowRoot": false,
				"sharedStorage": false,
				"SharedStorage": false,
				"SharedStorageWorklet": false,
				"SharedWorker": false,
				"showDirectoryPicker": false,
				"showOpenFilePicker": false,
				"showSaveFilePicker": false,
				"SourceBuffer": false,
				"SourceBufferList": false,
				"speechSynthesis": false,
				"SpeechSynthesis": false,
				"SpeechSynthesisErrorEvent": false,
				"SpeechSynthesisEvent": false,
				"SpeechSynthesisUtterance": false,
				"SpeechSynthesisVoice": false,
				"StaticRange": false,
				"status": false,
				"statusbar": false,
				"StereoPannerNode": false,
				"stop": false,
				"Storage": false,
				"StorageBucket": false,
				"StorageBucketManager": false,
				"StorageEvent": false,
				"StorageManager": false,
				"structuredClone": false,
				"styleMedia": false,
				"StylePropertyMap": false,
				"StylePropertyMapReadOnly": false,
				"StyleSheet": false,
				"StyleSheetList": false,
				"SubmitEvent": false,
				"SubtleCrypto": false,
				"SVGAElement": false,
				"SVGAngle": false,
				"SVGAnimatedAngle": false,
				"SVGAnimatedBoolean": false,
				"SVGAnimatedEnumeration": false,
				"SVGAnimatedInteger": false,
				"SVGAnimatedLength": false,
				"SVGAnimatedLengthList": false,
				"SVGAnimatedNumber": false,
				"SVGAnimatedNumberList": false,
				"SVGAnimatedPreserveAspectRatio": false,
				"SVGAnimatedRect": false,
				"SVGAnimatedString": false,
				"SVGAnimatedTransformList": false,
				"SVGAnimateElement": false,
				"SVGAnimateMotionElement": false,
				"SVGAnimateTransformElement": false,
				"SVGAnimationElement": false,
				"SVGCircleElement": false,
				"SVGClipPathElement": false,
				"SVGComponentTransferFunctionElement": false,
				"SVGDefsElement": false,
				"SVGDescElement": false,
				"SVGElement": false,
				"SVGEllipseElement": false,
				"SVGFEBlendElement": false,
				"SVGFEColorMatrixElement": false,
				"SVGFEComponentTransferElement": false,
				"SVGFECompositeElement": false,
				"SVGFEConvolveMatrixElement": false,
				"SVGFEDiffuseLightingElement": false,
				"SVGFEDisplacementMapElement": false,
				"SVGFEDistantLightElement": false,
				"SVGFEDropShadowElement": false,
				"SVGFEFloodElement": false,
				"SVGFEFuncAElement": false,
				"SVGFEFuncBElement": false,
				"SVGFEFuncGElement": false,
				"SVGFEFuncRElement": false,
				"SVGFEGaussianBlurElement": false,
				"SVGFEImageElement": false,
				"SVGFEMergeElement": false,
				"SVGFEMergeNodeElement": false,
				"SVGFEMorphologyElement": false,
				"SVGFEOffsetElement": false,
				"SVGFEPointLightElement": false,
				"SVGFESpecularLightingElement": false,
				"SVGFESpotLightElement": false,
				"SVGFETileElement": false,
				"SVGFETurbulenceElement": false,
				"SVGFilterElement": false,
				"SVGForeignObjectElement": false,
				"SVGGElement": false,
				"SVGGeometryElement": false,
				"SVGGradientElement": false,
				"SVGGraphicsElement": false,
				"SVGImageElement": false,
				"SVGLength": false,
				"SVGLengthList": false,
				"SVGLinearGradientElement": false,
				"SVGLineElement": false,
				"SVGMarkerElement": false,
				"SVGMaskElement": false,
				"SVGMatrix": false,
				"SVGMetadataElement": false,
				"SVGMPathElement": false,
				"SVGNumber": false,
				"SVGNumberList": false,
				"SVGPathElement": false,
				"SVGPatternElement": false,
				"SVGPoint": false,
				"SVGPointList": false,
				"SVGPolygonElement": false,
				"SVGPolylineElement": false,
				"SVGPreserveAspectRatio": false,
				"SVGRadialGradientElement": false,
				"SVGRect": false,
				"SVGRectElement": false,
				"SVGScriptElement": false,
				"SVGSetElement": false,
				"SVGStopElement": false,
				"SVGStringList": false,
				"SVGStyleElement": false,
				"SVGSVGElement": false,
				"SVGSwitchElement": false,
				"SVGSymbolElement": false,
				"SVGTextContentElement": false,
				"SVGTextElement": false,
				"SVGTextPathElement": false,
				"SVGTextPositioningElement": false,
				"SVGTitleElement": false,
				"SVGTransform": false,
				"SVGTransformList": false,
				"SVGTSpanElement": false,
				"SVGUnitTypes": false,
				"SVGUseElement": false,
				"SVGViewElement": false,
				"SyncManager": false,
				"TaskAttributionTiming": false,
				"TaskController": false,
				"TaskPriorityChangeEvent": false,
				"TaskSignal": false,
				"TEMPORARY": false,
				"Text": false,
				"TextDecoder": false,
				"TextDecoderStream": false,
				"TextEncoder": false,
				"TextEncoderStream": false,
				"TextEvent": false,
				"TextFormat": false,
				"TextFormatUpdateEvent": false,
				"TextMetrics": false,
				"TextTrack": false,
				"TextTrackCue": false,
				"TextTrackCueList": false,
				"TextTrackList": false,
				"TextUpdateEvent": false,
				"TimeEvent": false,
				"TimeRanges": false,
				"ToggleEvent": false,
				"toolbar": false,
				"top": false,
				"Touch": false,
				"TouchEvent": false,
				"TouchList": false,
				"TrackEvent": false,
				"TransformStream": false,
				"TransformStreamDefaultController": false,
				"TransitionEvent": false,
				"TreeWalker": false,
				"TrustedHTML": false,
				"TrustedScript": false,
				"TrustedScriptURL": false,
				"TrustedTypePolicy": false,
				"TrustedTypePolicyFactory": false,
				"trustedTypes": false,
				"UIEvent": false,
				"URL": false,
				"URLPattern": false,
				"URLSearchParams": false,
				"USB": false,
				"USBAlternateInterface": false,
				"USBConfiguration": false,
				"USBConnectionEvent": false,
				"USBDevice": false,
				"USBEndpoint": false,
				"USBInterface": false,
				"USBInTransferResult": false,
				"USBIsochronousInTransferPacket": false,
				"USBIsochronousInTransferResult": false,
				"USBIsochronousOutTransferPacket": false,
				"USBIsochronousOutTransferResult": false,
				"USBOutTransferResult": false,
				"UserActivation": false,
				"ValidityState": false,
				"VideoColorSpace": false,
				"VideoDecoder": false,
				"VideoEncoder": false,
				"VideoFrame": false,
				"VideoPlaybackQuality": false,
				"ViewTimeline": false,
				"ViewTransition": false,
				"ViewTransitionTypeSet": false,
				"VirtualKeyboard": false,
				"VirtualKeyboardGeometryChangeEvent": false,
				"VisibilityStateEntry": false,
				"visualViewport": false,
				"VisualViewport": false,
				"VTTCue": false,
				"VTTRegion": false,
				"WakeLock": false,
				"WakeLockSentinel": false,
				"WaveShaperNode": false,
				"WebAssembly": false,
				"WebGL2RenderingContext": false,
				"WebGLActiveInfo": false,
				"WebGLBuffer": false,
				"WebGLContextEvent": false,
				"WebGLFramebuffer": false,
				"WebGLProgram": false,
				"WebGLQuery": false,
				"WebGLRenderbuffer": false,
				"WebGLRenderingContext": false,
				"WebGLSampler": false,
				"WebGLShader": false,
				"WebGLShaderPrecisionFormat": false,
				"WebGLSync": false,
				"WebGLTexture": false,
				"WebGLTransformFeedback": false,
				"WebGLUniformLocation": false,
				"WebGLVertexArrayObject": false,
				"WebSocket": false,
				"WebSocketError": false,
				"WebSocketStream": false,
				"WebTransport": false,
				"WebTransportBidirectionalStream": false,
				"WebTransportDatagramDuplexStream": false,
				"WebTransportError": false,
				"WebTransportReceiveStream": false,
				"WebTransportSendStream": false,
				"WGSLLanguageFeatures": false,
				"WheelEvent": false,
				"window": false,
				"Window": false,
				"WindowControlsOverlay": false,
				"WindowControlsOverlayGeometryChangeEvent": false,
				"Worker": false,
				"Worklet": false,
				"WorkletGlobalScope": false,
				"WritableStream": false,
				"WritableStreamDefaultController": false,
				"WritableStreamDefaultWriter": false,
				"XMLDocument": false,
				"XMLHttpRequest": false,
				"XMLHttpRequestEventTarget": false,
				"XMLHttpRequestUpload": false,
				"XMLSerializer": false,
				"XPathEvaluator": false,
				"XPathExpression": false,
				"XPathResult": false,
				"XRAnchor": false,
				"XRAnchorSet": false,
				"XRBoundedReferenceSpace": false,
				"XRCamera": false,
				"XRCPUDepthInformation": false,
				"XRDepthInformation": false,
				"XRDOMOverlayState": false,
				"XRFrame": false,
				"XRHitTestResult": false,
				"XRHitTestSource": false,
				"XRInputSource": false,
				"XRInputSourceArray": false,
				"XRInputSourceEvent": false,
				"XRInputSourcesChangeEvent": false,
				"XRLayer": false,
				"XRLightEstimate": false,
				"XRLightProbe": false,
				"XRPose": false,
				"XRRay": false,
				"XRReferenceSpace": false,
				"XRReferenceSpaceEvent": false,
				"XRRenderState": false,
				"XRRigidTransform": false,
				"XRSession": false,
				"XRSessionEvent": false,
				"XRSpace": false,
				"XRSystem": false,
				"XRTransientInputHitTestResult": false,
				"XRTransientInputHitTestSource": false,
				"XRView": false,
				"XRViewerPose": false,
				"XRViewport": false,
				"XRWebGLBinding": false,
				"XRWebGLDepthInformation": false,
				"XRWebGLLayer": false,
				"XSLTProcessor": false
			},
			"parser": {
				"version": "7.12.0",
				"meta": {
					"name": "typescript-eslint/parser",
					"version": "7.12.0"
				}
			},
			"parserOptions": {
				"ecmaFeatures": {
					"modules": true
				},
				"ecmaVersion": "latest"
			}
		}
	},
	{
		"rules": {
			"constructor-super": "error",
			"for-direction": "error",
			"getter-return": "error",
			"no-async-promise-executor": "error",
			"no-case-declarations": "error",
			"no-class-assign": "error",
			"no-compare-neg-zero": "error",
			"no-cond-assign": "error",
			"no-const-assign": "error",
			"no-constant-binary-expression": "error",
			"no-constant-condition": "error",
			"no-control-regex": "error",
			"no-debugger": "error",
			"no-delete-var": "error",
			"no-dupe-args": "error",
			"no-dupe-class-members": "error",
			"no-dupe-else-if": "error",
			"no-dupe-keys": "error",
			"no-duplicate-case": "error",
			"no-empty": "error",
			"no-empty-character-class": "error",
			"no-empty-pattern": "error",
			"no-empty-static-block": "error",
			"no-ex-assign": "error",
			"no-extra-boolean-cast": "error",
			"no-fallthrough": "error",
			"no-func-assign": "error",
			"no-global-assign": "error",
			"no-import-assign": "error",
			"no-invalid-regexp": "error",
			"no-irregular-whitespace": "error",
			"no-loss-of-precision": "error",
			"no-misleading-character-class": "error",
			"no-new-native-nonconstructor": "error",
			"no-nonoctal-decimal-escape": "error",
			"no-obj-calls": "error",
			"no-octal": "error",
			"no-prototype-builtins": "error",
			"no-redeclare": "error",
			"no-regex-spaces": "error",
			"no-self-assign": "error",
			"no-setter-return": "error",
			"no-shadow-restricted-names": "error",
			"no-sparse-arrays": "error",
			"no-this-before-super": "error",
			"no-undef": "error",
			"no-unexpected-multiline": "error",
			"no-unreachable": "error",
			"no-unsafe-finally": "error",
			"no-unsafe-negation": "error",
			"no-unsafe-optional-chaining": "error",
			"no-unused-labels": "error",
			"no-unused-private-class-members": "error",
			"no-unused-vars": "error",
			"no-useless-backreference": "error",
			"no-useless-catch": "error",
			"no-useless-escape": "error",
			"no-with": "error",
			"require-yield": "error",
			"use-isnan": "error",
			"valid-typeof": "error"
		},
		"ignores": [
			".webpack/",
			".vscode/",
			"bin/",
			"dist/",
			"mongodb-realm/",
			"**/*/_global.d.ts"
		],
		"files": [
			"src/**/*.ts",
			"src/**/*.tsx",
			"src/**/*.mjs"
		]
	},
	{
		"ignores": [
			".webpack/",
			".vscode/",
			"bin/",
			"dist/",
			"mongodb-realm/",
			"**/*/_global.d.ts"
		],
		"files": [
			"**/*.ts",
			"**/*.tsx",
			"**/*.mts",
			"**/*.cts"
		],
		"name": "typescript-eslint/recommended",
		"languageOptions": {
			"parser": {
				"meta": {
					"name": "typescript-eslint/parser",
					"version": "7.12.0"
				}
			},
			"sourceType": "module"
		},
		"plugins": {
			"@typescript-eslint": {
				"configs": {
					"all": {
						"extends": [
							"./configs/base",
							"./configs/eslint-recommended"
						],
						"rules": {
							"@typescript-eslint/adjacent-overload-signatures": "error",
							"@typescript-eslint/array-type": "error",
							"@typescript-eslint/await-thenable": "error",
							"@typescript-eslint/ban-ts-comment": "error",
							"@typescript-eslint/ban-tslint-comment": "error",
							"@typescript-eslint/ban-types": "error",
							"@typescript-eslint/class-literal-property-style": "error",
							"class-methods-use-this": "off",
							"@typescript-eslint/class-methods-use-this": "error",
							"@typescript-eslint/consistent-generic-constructors": "error",
							"@typescript-eslint/consistent-indexed-object-style": "error",
							"consistent-return": "off",
							"@typescript-eslint/consistent-return": "error",
							"@typescript-eslint/consistent-type-assertions": "error",
							"@typescript-eslint/consistent-type-definitions": "error",
							"@typescript-eslint/consistent-type-exports": "error",
							"@typescript-eslint/consistent-type-imports": "error",
							"default-param-last": "off",
							"@typescript-eslint/default-param-last": "error",
							"dot-notation": "off",
							"@typescript-eslint/dot-notation": "error",
							"@typescript-eslint/explicit-function-return-type": "error",
							"@typescript-eslint/explicit-member-accessibility": "error",
							"@typescript-eslint/explicit-module-boundary-types": "error",
							"init-declarations": "off",
							"@typescript-eslint/init-declarations": "error",
							"max-params": "off",
							"@typescript-eslint/max-params": "error",
							"@typescript-eslint/member-ordering": "error",
							"@typescript-eslint/method-signature-style": "error",
							"@typescript-eslint/naming-convention": "error",
							"no-array-constructor": "off",
							"@typescript-eslint/no-array-constructor": "error",
							"@typescript-eslint/no-array-delete": "error",
							"@typescript-eslint/no-base-to-string": "error",
							"@typescript-eslint/no-confusing-non-null-assertion": "error",
							"@typescript-eslint/no-confusing-void-expression": "error",
							"no-dupe-class-members": "off",
							"@typescript-eslint/no-dupe-class-members": "error",
							"@typescript-eslint/no-duplicate-enum-values": "error",
							"@typescript-eslint/no-duplicate-type-constituents": "error",
							"@typescript-eslint/no-dynamic-delete": "error",
							"no-empty-function": "off",
							"@typescript-eslint/no-empty-function": "error",
							"@typescript-eslint/no-empty-interface": "error",
							"@typescript-eslint/no-explicit-any": "error",
							"@typescript-eslint/no-extra-non-null-assertion": "error",
							"@typescript-eslint/no-extraneous-class": "error",
							"@typescript-eslint/no-floating-promises": "error",
							"@typescript-eslint/no-for-in-array": "error",
							"no-implied-eval": "off",
							"@typescript-eslint/no-implied-eval": "error",
							"@typescript-eslint/no-import-type-side-effects": "error",
							"@typescript-eslint/no-inferrable-types": "error",
							"no-invalid-this": "off",
							"@typescript-eslint/no-invalid-this": "error",
							"@typescript-eslint/no-invalid-void-type": "error",
							"no-loop-func": "off",
							"@typescript-eslint/no-loop-func": "error",
							"no-loss-of-precision": "off",
							"@typescript-eslint/no-loss-of-precision": "error",
							"no-magic-numbers": "off",
							"@typescript-eslint/no-magic-numbers": "error",
							"@typescript-eslint/no-meaningless-void-operator": "error",
							"@typescript-eslint/no-misused-new": "error",
							"@typescript-eslint/no-misused-promises": "error",
							"@typescript-eslint/no-mixed-enums": "error",
							"@typescript-eslint/no-namespace": "error",
							"@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
							"@typescript-eslint/no-non-null-asserted-optional-chain": "error",
							"@typescript-eslint/no-non-null-assertion": "error",
							"no-redeclare": "off",
							"@typescript-eslint/no-redeclare": "error",
							"@typescript-eslint/no-redundant-type-constituents": "error",
							"@typescript-eslint/no-require-imports": "error",
							"no-restricted-imports": "off",
							"@typescript-eslint/no-restricted-imports": "error",
							"no-shadow": "off",
							"@typescript-eslint/no-shadow": "error",
							"@typescript-eslint/no-this-alias": "error",
							"@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
							"@typescript-eslint/no-unnecessary-condition": "error",
							"@typescript-eslint/no-unnecessary-qualifier": "error",
							"@typescript-eslint/no-unnecessary-type-arguments": "error",
							"@typescript-eslint/no-unnecessary-type-assertion": "error",
							"@typescript-eslint/no-unnecessary-type-constraint": "error",
							"@typescript-eslint/no-unsafe-argument": "error",
							"@typescript-eslint/no-unsafe-assignment": "error",
							"@typescript-eslint/no-unsafe-call": "error",
							"@typescript-eslint/no-unsafe-declaration-merging": "error",
							"@typescript-eslint/no-unsafe-enum-comparison": "error",
							"@typescript-eslint/no-unsafe-member-access": "error",
							"@typescript-eslint/no-unsafe-return": "error",
							"@typescript-eslint/no-unsafe-unary-minus": "error",
							"no-unused-expressions": "off",
							"@typescript-eslint/no-unused-expressions": "error",
							"no-unused-vars": "off",
							"@typescript-eslint/no-unused-vars": "error",
							"no-use-before-define": "off",
							"@typescript-eslint/no-use-before-define": "error",
							"no-useless-constructor": "off",
							"@typescript-eslint/no-useless-constructor": "error",
							"@typescript-eslint/no-useless-empty-export": "error",
							"@typescript-eslint/no-unnecessary-template-expression": "error",
							"@typescript-eslint/no-var-requires": "error",
							"@typescript-eslint/non-nullable-type-assertion-style": "error",
							"no-throw-literal": "off",
							"@typescript-eslint/only-throw-error": "error",
							"@typescript-eslint/parameter-properties": "error",
							"@typescript-eslint/prefer-as-const": "error",
							"prefer-destructuring": "off",
							"@typescript-eslint/prefer-destructuring": "error",
							"@typescript-eslint/prefer-enum-initializers": "error",
							"@typescript-eslint/prefer-find": "error",
							"@typescript-eslint/prefer-for-of": "error",
							"@typescript-eslint/prefer-function-type": "error",
							"@typescript-eslint/prefer-includes": "error",
							"@typescript-eslint/prefer-literal-enum-member": "error",
							"@typescript-eslint/prefer-namespace-keyword": "error",
							"@typescript-eslint/prefer-nullish-coalescing": "error",
							"@typescript-eslint/prefer-optional-chain": "error",
							"prefer-promise-reject-errors": "off",
							"@typescript-eslint/prefer-promise-reject-errors": "error",
							"@typescript-eslint/prefer-readonly": "error",
							"@typescript-eslint/prefer-readonly-parameter-types": "error",
							"@typescript-eslint/prefer-reduce-type-parameter": "error",
							"@typescript-eslint/prefer-regexp-exec": "error",
							"@typescript-eslint/prefer-return-this-type": "error",
							"@typescript-eslint/prefer-string-starts-ends-with": "error",
							"@typescript-eslint/promise-function-async": "error",
							"@typescript-eslint/require-array-sort-compare": "error",
							"require-await": "off",
							"@typescript-eslint/require-await": "error",
							"@typescript-eslint/restrict-plus-operands": "error",
							"@typescript-eslint/restrict-template-expressions": "error",
							"no-return-await": "off",
							"@typescript-eslint/return-await": "error",
							"@typescript-eslint/sort-type-constituents": "error",
							"@typescript-eslint/strict-boolean-expressions": "error",
							"@typescript-eslint/switch-exhaustiveness-check": "error",
							"@typescript-eslint/triple-slash-reference": "error",
							"@typescript-eslint/typedef": "error",
							"@typescript-eslint/unbound-method": "error",
							"@typescript-eslint/unified-signatures": "error",
							"@typescript-eslint/use-unknown-in-catch-callback-variable": "error"
						}
					},
					"base": {
						"parser": "@typescript-eslint/parser",
						"parserOptions": {
							"sourceType": "module"
						},
						"plugins": [
							"@typescript-eslint"
						]
					},
					"disable-type-checked": {
						"parserOptions": {
							"project": false,
							"program": null
						},
						"rules": {
							"@typescript-eslint/await-thenable": "off",
							"@typescript-eslint/consistent-return": "off",
							"@typescript-eslint/consistent-type-exports": "off",
							"@typescript-eslint/dot-notation": "off",
							"@typescript-eslint/naming-convention": "off",
							"@typescript-eslint/no-array-delete": "off",
							"@typescript-eslint/no-base-to-string": "off",
							"@typescript-eslint/no-confusing-void-expression": "off",
							"@typescript-eslint/no-duplicate-type-constituents": "off",
							"@typescript-eslint/no-floating-promises": "off",
							"@typescript-eslint/no-for-in-array": "off",
							"@typescript-eslint/no-implied-eval": "off",
							"@typescript-eslint/no-meaningless-void-operator": "off",
							"@typescript-eslint/no-misused-promises": "off",
							"@typescript-eslint/no-mixed-enums": "off",
							"@typescript-eslint/no-redundant-type-constituents": "off",
							"@typescript-eslint/no-throw-literal": "off",
							"@typescript-eslint/no-unnecessary-boolean-literal-compare": "off",
							"@typescript-eslint/no-unnecessary-condition": "off",
							"@typescript-eslint/no-unnecessary-qualifier": "off",
							"@typescript-eslint/no-unnecessary-type-arguments": "off",
							"@typescript-eslint/no-unnecessary-type-assertion": "off",
							"@typescript-eslint/no-unsafe-argument": "off",
							"@typescript-eslint/no-unsafe-assignment": "off",
							"@typescript-eslint/no-unsafe-call": "off",
							"@typescript-eslint/no-unsafe-enum-comparison": "off",
							"@typescript-eslint/no-unsafe-member-access": "off",
							"@typescript-eslint/no-unsafe-return": "off",
							"@typescript-eslint/no-unsafe-unary-minus": "off",
							"@typescript-eslint/no-unnecessary-template-expression": "off",
							"@typescript-eslint/no-useless-template-literals": "off",
							"@typescript-eslint/non-nullable-type-assertion-style": "off",
							"@typescript-eslint/only-throw-error": "off",
							"@typescript-eslint/prefer-destructuring": "off",
							"@typescript-eslint/prefer-find": "off",
							"@typescript-eslint/prefer-includes": "off",
							"@typescript-eslint/prefer-nullish-coalescing": "off",
							"@typescript-eslint/prefer-optional-chain": "off",
							"@typescript-eslint/prefer-promise-reject-errors": "off",
							"@typescript-eslint/prefer-readonly": "off",
							"@typescript-eslint/prefer-readonly-parameter-types": "off",
							"@typescript-eslint/prefer-reduce-type-parameter": "off",
							"@typescript-eslint/prefer-regexp-exec": "off",
							"@typescript-eslint/prefer-return-this-type": "off",
							"@typescript-eslint/prefer-string-starts-ends-with": "off",
							"@typescript-eslint/promise-function-async": "off",
							"@typescript-eslint/require-array-sort-compare": "off",
							"@typescript-eslint/require-await": "off",
							"@typescript-eslint/restrict-plus-operands": "off",
							"@typescript-eslint/restrict-template-expressions": "off",
							"@typescript-eslint/return-await": "off",
							"@typescript-eslint/strict-boolean-expressions": "off",
							"@typescript-eslint/switch-exhaustiveness-check": "off",
							"@typescript-eslint/unbound-method": "off",
							"@typescript-eslint/use-unknown-in-catch-callback-variable": "off"
						}
					},
					"eslint-recommended": {
						"overrides": [
							{
								"files": [
									"*.ts",
									"*.tsx",
									"*.mts",
									"*.cts"
								],
								"rules": {
									"constructor-super": "off",
									"getter-return": "off",
									"no-const-assign": "off",
									"no-dupe-args": "off",
									"no-dupe-class-members": "off",
									"no-dupe-keys": "off",
									"no-func-assign": "off",
									"no-import-assign": "off",
									"no-new-symbol": "off",
									"no-new-native-nonconstructor": "off",
									"no-obj-calls": "off",
									"no-redeclare": "off",
									"no-setter-return": "off",
									"no-this-before-super": "off",
									"no-undef": "off",
									"no-unreachable": "off",
									"no-unsafe-negation": "off",
									"no-var": "error",
									"prefer-const": "error",
									"prefer-rest-params": "error",
									"prefer-spread": "error"
								}
							}
						]
					},
					"recommended": {
						"extends": [
							"./configs/base",
							"./configs/eslint-recommended"
						],
						"rules": {
							"@typescript-eslint/ban-ts-comment": "error",
							"@typescript-eslint/ban-types": "error",
							"no-array-constructor": "off",
							"@typescript-eslint/no-array-constructor": "error",
							"@typescript-eslint/no-duplicate-enum-values": "error",
							"@typescript-eslint/no-explicit-any": "error",
							"@typescript-eslint/no-extra-non-null-assertion": "error",
							"no-loss-of-precision": "off",
							"@typescript-eslint/no-loss-of-precision": "error",
							"@typescript-eslint/no-misused-new": "error",
							"@typescript-eslint/no-namespace": "error",
							"@typescript-eslint/no-non-null-asserted-optional-chain": "error",
							"@typescript-eslint/no-this-alias": "error",
							"@typescript-eslint/no-unnecessary-type-constraint": "error",
							"@typescript-eslint/no-unsafe-declaration-merging": "error",
							"no-unused-vars": "off",
							"@typescript-eslint/no-unused-vars": "error",
							"@typescript-eslint/no-var-requires": "error",
							"@typescript-eslint/prefer-as-const": "error",
							"@typescript-eslint/triple-slash-reference": "error"
						}
					},
					"recommended-requiring-type-checking": {
						"extends": [
							"./configs/base",
							"./configs/eslint-recommended"
						],
						"rules": {
							"@typescript-eslint/await-thenable": "error",
							"@typescript-eslint/ban-ts-comment": "error",
							"@typescript-eslint/ban-types": "error",
							"no-array-constructor": "off",
							"@typescript-eslint/no-array-constructor": "error",
							"@typescript-eslint/no-base-to-string": "error",
							"@typescript-eslint/no-duplicate-enum-values": "error",
							"@typescript-eslint/no-duplicate-type-constituents": "error",
							"@typescript-eslint/no-explicit-any": "error",
							"@typescript-eslint/no-extra-non-null-assertion": "error",
							"@typescript-eslint/no-floating-promises": "error",
							"@typescript-eslint/no-for-in-array": "error",
							"no-implied-eval": "off",
							"@typescript-eslint/no-implied-eval": "error",
							"no-loss-of-precision": "off",
							"@typescript-eslint/no-loss-of-precision": "error",
							"@typescript-eslint/no-misused-new": "error",
							"@typescript-eslint/no-misused-promises": "error",
							"@typescript-eslint/no-namespace": "error",
							"@typescript-eslint/no-non-null-asserted-optional-chain": "error",
							"@typescript-eslint/no-redundant-type-constituents": "error",
							"@typescript-eslint/no-this-alias": "error",
							"@typescript-eslint/no-unnecessary-type-assertion": "error",
							"@typescript-eslint/no-unnecessary-type-constraint": "error",
							"@typescript-eslint/no-unsafe-argument": "error",
							"@typescript-eslint/no-unsafe-assignment": "error",
							"@typescript-eslint/no-unsafe-call": "error",
							"@typescript-eslint/no-unsafe-declaration-merging": "error",
							"@typescript-eslint/no-unsafe-enum-comparison": "error",
							"@typescript-eslint/no-unsafe-member-access": "error",
							"@typescript-eslint/no-unsafe-return": "error",
							"no-unused-vars": "off",
							"@typescript-eslint/no-unused-vars": "error",
							"@typescript-eslint/no-var-requires": "error",
							"@typescript-eslint/prefer-as-const": "error",
							"require-await": "off",
							"@typescript-eslint/require-await": "error",
							"@typescript-eslint/restrict-plus-operands": "error",
							"@typescript-eslint/restrict-template-expressions": "error",
							"@typescript-eslint/triple-slash-reference": "error",
							"@typescript-eslint/unbound-method": "error"
						}
					},
					"recommended-type-checked": {
						"extends": [
							"./configs/base",
							"./configs/eslint-recommended"
						],
						"rules": {
							"@typescript-eslint/await-thenable": "error",
							"@typescript-eslint/ban-ts-comment": "error",
							"@typescript-eslint/ban-types": "error",
							"no-array-constructor": "off",
							"@typescript-eslint/no-array-constructor": "error",
							"@typescript-eslint/no-base-to-string": "error",
							"@typescript-eslint/no-duplicate-enum-values": "error",
							"@typescript-eslint/no-duplicate-type-constituents": "error",
							"@typescript-eslint/no-explicit-any": "error",
							"@typescript-eslint/no-extra-non-null-assertion": "error",
							"@typescript-eslint/no-floating-promises": "error",
							"@typescript-eslint/no-for-in-array": "error",
							"no-implied-eval": "off",
							"@typescript-eslint/no-implied-eval": "error",
							"no-loss-of-precision": "off",
							"@typescript-eslint/no-loss-of-precision": "error",
							"@typescript-eslint/no-misused-new": "error",
							"@typescript-eslint/no-misused-promises": "error",
							"@typescript-eslint/no-namespace": "error",
							"@typescript-eslint/no-non-null-asserted-optional-chain": "error",
							"@typescript-eslint/no-redundant-type-constituents": "error",
							"@typescript-eslint/no-this-alias": "error",
							"@typescript-eslint/no-unnecessary-type-assertion": "error",
							"@typescript-eslint/no-unnecessary-type-constraint": "error",
							"@typescript-eslint/no-unsafe-argument": "error",
							"@typescript-eslint/no-unsafe-assignment": "error",
							"@typescript-eslint/no-unsafe-call": "error",
							"@typescript-eslint/no-unsafe-declaration-merging": "error",
							"@typescript-eslint/no-unsafe-enum-comparison": "error",
							"@typescript-eslint/no-unsafe-member-access": "error",
							"@typescript-eslint/no-unsafe-return": "error",
							"no-unused-vars": "off",
							"@typescript-eslint/no-unused-vars": "error",
							"@typescript-eslint/no-var-requires": "error",
							"@typescript-eslint/prefer-as-const": "error",
							"require-await": "off",
							"@typescript-eslint/require-await": "error",
							"@typescript-eslint/restrict-plus-operands": "error",
							"@typescript-eslint/restrict-template-expressions": "error",
							"@typescript-eslint/triple-slash-reference": "error",
							"@typescript-eslint/unbound-method": "error"
						}
					},
					"recommended-type-checked-only": {
						"extends": [
							"./configs/base",
							"./configs/eslint-recommended"
						],
						"rules": {
							"@typescript-eslint/await-thenable": "error",
							"@typescript-eslint/no-base-to-string": "error",
							"@typescript-eslint/no-duplicate-type-constituents": "error",
							"@typescript-eslint/no-floating-promises": "error",
							"@typescript-eslint/no-for-in-array": "error",
							"no-implied-eval": "off",
							"@typescript-eslint/no-implied-eval": "error",
							"@typescript-eslint/no-misused-promises": "error",
							"@typescript-eslint/no-redundant-type-constituents": "error",
							"@typescript-eslint/no-unnecessary-type-assertion": "error",
							"@typescript-eslint/no-unsafe-argument": "error",
							"@typescript-eslint/no-unsafe-assignment": "error",
							"@typescript-eslint/no-unsafe-call": "error",
							"@typescript-eslint/no-unsafe-enum-comparison": "error",
							"@typescript-eslint/no-unsafe-member-access": "error",
							"@typescript-eslint/no-unsafe-return": "error",
							"require-await": "off",
							"@typescript-eslint/require-await": "error",
							"@typescript-eslint/restrict-plus-operands": "error",
							"@typescript-eslint/restrict-template-expressions": "error",
							"@typescript-eslint/unbound-method": "error"
						}
					},
					"strict": {
						"extends": [
							"./configs/base",
							"./configs/eslint-recommended"
						],
						"rules": {
							"@typescript-eslint/ban-ts-comment": [
								"error",
								{
									"minimumDescriptionLength": 10
								}
							],
							"@typescript-eslint/ban-types": "error",
							"no-array-constructor": "off",
							"@typescript-eslint/no-array-constructor": "error",
							"@typescript-eslint/no-duplicate-enum-values": "error",
							"@typescript-eslint/no-dynamic-delete": "error",
							"@typescript-eslint/no-explicit-any": "error",
							"@typescript-eslint/no-extra-non-null-assertion": "error",
							"@typescript-eslint/no-extraneous-class": "error",
							"@typescript-eslint/no-invalid-void-type": "error",
							"no-loss-of-precision": "off",
							"@typescript-eslint/no-loss-of-precision": "error",
							"@typescript-eslint/no-misused-new": "error",
							"@typescript-eslint/no-namespace": "error",
							"@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
							"@typescript-eslint/no-non-null-asserted-optional-chain": "error",
							"@typescript-eslint/no-non-null-assertion": "error",
							"@typescript-eslint/no-this-alias": "error",
							"@typescript-eslint/no-unnecessary-type-constraint": "error",
							"@typescript-eslint/no-unsafe-declaration-merging": "error",
							"no-unused-vars": "off",
							"@typescript-eslint/no-unused-vars": "error",
							"no-useless-constructor": "off",
							"@typescript-eslint/no-useless-constructor": "error",
							"@typescript-eslint/no-var-requires": "error",
							"@typescript-eslint/prefer-as-const": "error",
							"@typescript-eslint/prefer-literal-enum-member": "error",
							"@typescript-eslint/triple-slash-reference": "error",
							"@typescript-eslint/unified-signatures": "error"
						}
					},
					"strict-type-checked": {
						"extends": [
							"./configs/base",
							"./configs/eslint-recommended"
						],
						"rules": {
							"@typescript-eslint/await-thenable": "error",
							"@typescript-eslint/ban-ts-comment": [
								"error",
								{
									"minimumDescriptionLength": 10
								}
							],
							"@typescript-eslint/ban-types": "error",
							"no-array-constructor": "off",
							"@typescript-eslint/no-array-constructor": "error",
							"@typescript-eslint/no-array-delete": "error",
							"@typescript-eslint/no-base-to-string": "error",
							"@typescript-eslint/no-confusing-void-expression": "error",
							"@typescript-eslint/no-duplicate-enum-values": "error",
							"@typescript-eslint/no-duplicate-type-constituents": "error",
							"@typescript-eslint/no-dynamic-delete": "error",
							"@typescript-eslint/no-explicit-any": "error",
							"@typescript-eslint/no-extra-non-null-assertion": "error",
							"@typescript-eslint/no-extraneous-class": "error",
							"@typescript-eslint/no-floating-promises": "error",
							"@typescript-eslint/no-for-in-array": "error",
							"no-implied-eval": "off",
							"@typescript-eslint/no-implied-eval": "error",
							"@typescript-eslint/no-invalid-void-type": "error",
							"no-loss-of-precision": "off",
							"@typescript-eslint/no-loss-of-precision": "error",
							"@typescript-eslint/no-meaningless-void-operator": "error",
							"@typescript-eslint/no-misused-new": "error",
							"@typescript-eslint/no-misused-promises": "error",
							"@typescript-eslint/no-mixed-enums": "error",
							"@typescript-eslint/no-namespace": "error",
							"@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
							"@typescript-eslint/no-non-null-asserted-optional-chain": "error",
							"@typescript-eslint/no-non-null-assertion": "error",
							"@typescript-eslint/no-redundant-type-constituents": "error",
							"@typescript-eslint/no-this-alias": "error",
							"@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
							"@typescript-eslint/no-unnecessary-condition": "error",
							"@typescript-eslint/no-unnecessary-type-arguments": "error",
							"@typescript-eslint/no-unnecessary-type-assertion": "error",
							"@typescript-eslint/no-unnecessary-type-constraint": "error",
							"@typescript-eslint/no-unsafe-argument": "error",
							"@typescript-eslint/no-unsafe-assignment": "error",
							"@typescript-eslint/no-unsafe-call": "error",
							"@typescript-eslint/no-unsafe-declaration-merging": "error",
							"@typescript-eslint/no-unsafe-enum-comparison": "error",
							"@typescript-eslint/no-unsafe-member-access": "error",
							"@typescript-eslint/no-unsafe-return": "error",
							"no-unused-vars": "off",
							"@typescript-eslint/no-unused-vars": "error",
							"no-useless-constructor": "off",
							"@typescript-eslint/no-useless-constructor": "error",
							"@typescript-eslint/no-unnecessary-template-expression": "error",
							"@typescript-eslint/no-var-requires": "error",
							"no-throw-literal": "off",
							"@typescript-eslint/only-throw-error": "error",
							"@typescript-eslint/prefer-as-const": "error",
							"@typescript-eslint/prefer-includes": "error",
							"@typescript-eslint/prefer-literal-enum-member": "error",
							"prefer-promise-reject-errors": "off",
							"@typescript-eslint/prefer-promise-reject-errors": "error",
							"@typescript-eslint/prefer-reduce-type-parameter": "error",
							"@typescript-eslint/prefer-return-this-type": "error",
							"require-await": "off",
							"@typescript-eslint/require-await": "error",
							"@typescript-eslint/restrict-plus-operands": [
								"error",
								{
									"allowAny": false,
									"allowBoolean": false,
									"allowNullish": false,
									"allowNumberAndString": false,
									"allowRegExp": false
								}
							],
							"@typescript-eslint/restrict-template-expressions": [
								"error",
								{
									"allowAny": false,
									"allowBoolean": false,
									"allowNullish": false,
									"allowNumber": false,
									"allowRegExp": false,
									"allowNever": false
								}
							],
							"@typescript-eslint/triple-slash-reference": "error",
							"@typescript-eslint/unbound-method": "error",
							"@typescript-eslint/unified-signatures": "error",
							"@typescript-eslint/use-unknown-in-catch-callback-variable": "error"
						}
					},
					"strict-type-checked-only": {
						"extends": [
							"./configs/base",
							"./configs/eslint-recommended"
						],
						"rules": {
							"@typescript-eslint/await-thenable": "error",
							"@typescript-eslint/no-array-delete": "error",
							"@typescript-eslint/no-base-to-string": "error",
							"@typescript-eslint/no-confusing-void-expression": "error",
							"@typescript-eslint/no-duplicate-type-constituents": "error",
							"@typescript-eslint/no-floating-promises": "error",
							"@typescript-eslint/no-for-in-array": "error",
							"no-implied-eval": "off",
							"@typescript-eslint/no-implied-eval": "error",
							"@typescript-eslint/no-meaningless-void-operator": "error",
							"@typescript-eslint/no-misused-promises": "error",
							"@typescript-eslint/no-mixed-enums": "error",
							"@typescript-eslint/no-redundant-type-constituents": "error",
							"@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
							"@typescript-eslint/no-unnecessary-condition": "error",
							"@typescript-eslint/no-unnecessary-type-arguments": "error",
							"@typescript-eslint/no-unnecessary-type-assertion": "error",
							"@typescript-eslint/no-unsafe-argument": "error",
							"@typescript-eslint/no-unsafe-assignment": "error",
							"@typescript-eslint/no-unsafe-call": "error",
							"@typescript-eslint/no-unsafe-enum-comparison": "error",
							"@typescript-eslint/no-unsafe-member-access": "error",
							"@typescript-eslint/no-unsafe-return": "error",
							"@typescript-eslint/no-unnecessary-template-expression": "error",
							"no-throw-literal": "off",
							"@typescript-eslint/only-throw-error": "error",
							"@typescript-eslint/prefer-includes": "error",
							"prefer-promise-reject-errors": "off",
							"@typescript-eslint/prefer-promise-reject-errors": "error",
							"@typescript-eslint/prefer-reduce-type-parameter": "error",
							"@typescript-eslint/prefer-return-this-type": "error",
							"require-await": "off",
							"@typescript-eslint/require-await": "error",
							"@typescript-eslint/restrict-plus-operands": [
								"error",
								{
									"allowAny": false,
									"allowBoolean": false,
									"allowNullish": false,
									"allowNumberAndString": false,
									"allowRegExp": false
								}
							],
							"@typescript-eslint/restrict-template-expressions": [
								"error",
								{
									"allowAny": false,
									"allowBoolean": false,
									"allowNullish": false,
									"allowNumber": false,
									"allowRegExp": false,
									"allowNever": false
								}
							],
							"@typescript-eslint/unbound-method": "error",
							"@typescript-eslint/use-unknown-in-catch-callback-variable": "error"
						}
					},
					"stylistic": {
						"extends": [
							"./configs/base",
							"./configs/eslint-recommended"
						],
						"rules": {
							"@typescript-eslint/adjacent-overload-signatures": "error",
							"@typescript-eslint/array-type": "error",
							"@typescript-eslint/ban-tslint-comment": "error",
							"@typescript-eslint/class-literal-property-style": "error",
							"@typescript-eslint/consistent-generic-constructors": "error",
							"@typescript-eslint/consistent-indexed-object-style": "error",
							"@typescript-eslint/consistent-type-assertions": "error",
							"@typescript-eslint/consistent-type-definitions": "error",
							"@typescript-eslint/no-confusing-non-null-assertion": "error",
							"no-empty-function": "off",
							"@typescript-eslint/no-empty-function": "error",
							"@typescript-eslint/no-empty-interface": "error",
							"@typescript-eslint/no-inferrable-types": "error",
							"@typescript-eslint/prefer-for-of": "error",
							"@typescript-eslint/prefer-function-type": "error",
							"@typescript-eslint/prefer-namespace-keyword": "error"
						}
					},
					"stylistic-type-checked": {
						"extends": [
							"./configs/base",
							"./configs/eslint-recommended"
						],
						"rules": {
							"@typescript-eslint/adjacent-overload-signatures": "error",
							"@typescript-eslint/array-type": "error",
							"@typescript-eslint/ban-tslint-comment": "error",
							"@typescript-eslint/class-literal-property-style": "error",
							"@typescript-eslint/consistent-generic-constructors": "error",
							"@typescript-eslint/consistent-indexed-object-style": "error",
							"@typescript-eslint/consistent-type-assertions": "error",
							"@typescript-eslint/consistent-type-definitions": "error",
							"dot-notation": "off",
							"@typescript-eslint/dot-notation": "error",
							"@typescript-eslint/no-confusing-non-null-assertion": "error",
							"no-empty-function": "off",
							"@typescript-eslint/no-empty-function": "error",
							"@typescript-eslint/no-empty-interface": "error",
							"@typescript-eslint/no-inferrable-types": "error",
							"@typescript-eslint/non-nullable-type-assertion-style": "error",
							"@typescript-eslint/prefer-for-of": "error",
							"@typescript-eslint/prefer-function-type": "error",
							"@typescript-eslint/prefer-namespace-keyword": "error",
							"@typescript-eslint/prefer-nullish-coalescing": "error",
							"@typescript-eslint/prefer-optional-chain": "error",
							"@typescript-eslint/prefer-string-starts-ends-with": "error"
						}
					},
					"stylistic-type-checked-only": {
						"extends": [
							"./configs/base",
							"./configs/eslint-recommended"
						],
						"rules": {
							"dot-notation": "off",
							"@typescript-eslint/dot-notation": "error",
							"@typescript-eslint/non-nullable-type-assertion-style": "error",
							"@typescript-eslint/prefer-nullish-coalescing": "error",
							"@typescript-eslint/prefer-optional-chain": "error",
							"@typescript-eslint/prefer-string-starts-ends-with": "error"
						}
					}
				},
				"meta": {
					"name": "@typescript-eslint/eslint-plugin",
					"version": "7.12.0"
				},
				"rules": {
					"adjacent-overload-signatures": {
						"defaultOptions": [],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Require that function overload signatures be consecutive",
								"recommended": "stylistic",
								"url": "https://typescript-eslint.io/rules/adjacent-overload-signatures"
							},
							"schema": [],
							"messages": {
								"adjacentSignature": "All {{name}} signatures should be adjacent."
							}
						}
					},
					"array-type": {
						"defaultOptions": [
							{
								"default": "array"
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Require consistently using either `T[]` or `Array<T>` for arrays",
								"recommended": "stylistic",
								"url": "https://typescript-eslint.io/rules/array-type"
							},
							"fixable": "code",
							"messages": {
								"errorStringGeneric": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden. Use '{{className}}<{{type}}>' instead.",
								"errorStringArray": "Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}[]' instead.",
								"errorStringArraySimple": "Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}[]' instead.",
								"errorStringGenericSimple": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden for non-simple types. Use '{{className}}<{{type}}>' instead."
							},
							"schema": [
								{
									"$defs": {
										"arrayOption": {
											"type": "string",
											"enum": [
												"array",
												"generic",
												"array-simple"
											]
										}
									},
									"additionalProperties": false,
									"properties": {
										"default": {
											"$ref": "#/items/0/$defs/arrayOption",
											"description": "The array type expected for mutable cases."
										},
										"readonly": {
											"$ref": "#/items/0/$defs/arrayOption",
											"description": "The array type expected for readonly cases. If omitted, the value for `default` will be used."
										}
									},
									"type": "object"
								}
							]
						}
					},
					"await-thenable": {
						"defaultOptions": [],
						"meta": {
							"docs": {
								"description": "Disallow awaiting a value that is not a Thenable",
								"recommended": "recommended",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/await-thenable"
							},
							"hasSuggestions": true,
							"messages": {
								"await": "Unexpected `await` of a non-Promise (non-\"Thenable\") value.",
								"removeAwait": "Remove unnecessary `await`."
							},
							"schema": [],
							"type": "problem"
						}
					},
					"ban-ts-comment": {
						"defaultOptions": [
							{
								"ts-expect-error": "allow-with-description",
								"ts-ignore": true,
								"ts-nocheck": true,
								"ts-check": false,
								"minimumDescriptionLength": 3
							}
						],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow `@ts-<directive>` comments or require descriptions after directives",
								"recommended": {
									"recommended": true,
									"strict": [
										{
											"minimumDescriptionLength": 10
										}
									]
								},
								"url": "https://typescript-eslint.io/rules/ban-ts-comment"
							},
							"messages": {
								"tsDirectiveComment": "Do not use \"@ts-{{directive}}\" because it alters compilation errors.",
								"tsIgnoreInsteadOfExpectError": "Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.",
								"tsDirectiveCommentRequiresDescription": "Include a description after the \"@ts-{{directive}}\" directive to explain why the @ts-{{directive}} is necessary. The description must be {{minimumDescriptionLength}} characters or longer.",
								"tsDirectiveCommentDescriptionNotMatchPattern": "The description for the \"@ts-{{directive}}\" directive must match the {{format}} format.",
								"replaceTsIgnoreWithTsExpectError": "Replace \"@ts-ignore\" with \"@ts-expect-error\"."
							},
							"hasSuggestions": true,
							"schema": [
								{
									"$defs": {
										"directiveConfigSchema": {
											"oneOf": [
												{
													"type": "boolean",
													"default": true
												},
												{
													"type": "string",
													"enum": [
														"allow-with-description"
													]
												},
												{
													"type": "object",
													"additionalProperties": false,
													"properties": {
														"descriptionFormat": {
															"type": "string"
														}
													}
												}
											]
										}
									},
									"properties": {
										"ts-expect-error": {
											"$ref": "#/items/0/$defs/directiveConfigSchema"
										},
										"ts-ignore": {
											"$ref": "#/items/0/$defs/directiveConfigSchema"
										},
										"ts-nocheck": {
											"$ref": "#/items/0/$defs/directiveConfigSchema"
										},
										"ts-check": {
											"$ref": "#/items/0/$defs/directiveConfigSchema"
										},
										"minimumDescriptionLength": {
											"type": "number",
											"default": 3
										}
									},
									"type": "object",
									"additionalProperties": false
								}
							]
						}
					},
					"ban-tslint-comment": {
						"defaultOptions": [],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow `// tslint:<rule-flag>` comments",
								"recommended": "stylistic",
								"url": "https://typescript-eslint.io/rules/ban-tslint-comment"
							},
							"messages": {
								"commentDetected": "tslint comment detected: \"{{ text }}\""
							},
							"schema": [],
							"fixable": "code"
						}
					},
					"ban-types": {
						"defaultOptions": [
							{}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow certain types",
								"recommended": "recommended",
								"url": "https://typescript-eslint.io/rules/ban-types"
							},
							"fixable": "code",
							"hasSuggestions": true,
							"messages": {
								"bannedTypeMessage": "Don't use `{{name}}` as a type.{{customMessage}}",
								"bannedTypeReplacement": "Replace `{{name}}` with `{{replacement}}`."
							},
							"schema": [
								{
									"$defs": {
										"banConfig": {
											"oneOf": [
												{
													"type": "null",
													"description": "Bans the type with the default message"
												},
												{
													"type": "boolean",
													"enum": [
														false
													],
													"description": "Un-bans the type (useful when paired with `extendDefaults`)"
												},
												{
													"type": "boolean",
													"enum": [
														true
													],
													"description": "Bans the type with the default message"
												},
												{
													"type": "string",
													"description": "Bans the type with a custom message"
												},
												{
													"type": "object",
													"description": "Bans a type",
													"properties": {
														"message": {
															"type": "string",
															"description": "Custom error message"
														},
														"fixWith": {
															"type": "string",
															"description": "Type to autofix replace with. Note that autofixers can be applied automatically - so you need to be careful with this option."
														},
														"suggest": {
															"type": "array",
															"items": {
																"type": "string"
															},
															"description": "Types to suggest replacing with.",
															"additionalItems": false
														}
													},
													"additionalProperties": false
												}
											]
										}
									},
									"type": "object",
									"properties": {
										"types": {
											"type": "object",
											"additionalProperties": {
												"$ref": "#/items/0/$defs/banConfig"
											}
										},
										"extendDefaults": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"block-spacing": {
						"defaultOptions": [
							"always"
						],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/block-spacing"
							],
							"type": "layout",
							"docs": {
								"description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/block-spacing"
							},
							"fixable": "whitespace",
							"schema": [
								{
									"enum": [
										"always",
										"never"
									]
								}
							],
							"messages": {
								"missing": "Requires a space {{location}} '{{token}}'.",
								"extra": "Unexpected space(s) {{location}} '{{token}}'."
							}
						}
					},
					"brace-style": {
						"defaultOptions": [
							"1tbs"
						],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/brace-style"
							],
							"type": "layout",
							"docs": {
								"description": "Enforce consistent brace style for blocks",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/brace-style"
							},
							"messages": {
								"nextLineOpen": "Opening curly brace does not appear on the same line as controlling statement.",
								"sameLineOpen": "Opening curly brace appears on the same line as controlling statement.",
								"blockSameLine": "Statement inside of curly braces should be on next line.",
								"nextLineClose": "Closing curly brace does not appear on the same line as the subsequent block.",
								"singleLineClose": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
								"sameLineClose": "Closing curly brace appears on the same line as the subsequent block."
							},
							"fixable": "whitespace",
							"schema": [
								{
									"enum": [
										"1tbs",
										"stroustrup",
										"allman"
									]
								},
								{
									"type": "object",
									"properties": {
										"allowSingleLine": {
											"type": "boolean",
											"default": false
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"class-literal-property-style": {
						"defaultOptions": [
							"fields"
						],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Enforce that literals on classes are exposed in a consistent style",
								"recommended": "stylistic",
								"url": "https://typescript-eslint.io/rules/class-literal-property-style"
							},
							"hasSuggestions": true,
							"messages": {
								"preferFieldStyle": "Literals should be exposed using readonly fields.",
								"preferFieldStyleSuggestion": "Replace the literals with readonly fields.",
								"preferGetterStyle": "Literals should be exposed using getters.",
								"preferGetterStyleSuggestion": "Replace the literals with getters."
							},
							"schema": [
								{
									"type": "string",
									"enum": [
										"fields",
										"getters"
									]
								}
							]
						}
					},
					"class-methods-use-this": {
						"defaultOptions": [
							{
								"enforceForClassFields": true,
								"exceptMethods": [],
								"ignoreClassesThatImplementAnInterface": false,
								"ignoreOverrideMethods": false
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Enforce that class methods utilize `this`",
								"extendsBaseRule": true,
								"requiresTypeChecking": false,
								"url": "https://typescript-eslint.io/rules/class-methods-use-this"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"exceptMethods": {
											"type": "array",
											"description": "Allows specified method names to be ignored with this rule",
											"items": {
												"type": "string"
											}
										},
										"enforceForClassFields": {
											"type": "boolean",
											"description": "Enforces that functions used as instance field initializers utilize `this`",
											"default": true
										},
										"ignoreOverrideMethods": {
											"type": "boolean",
											"description": "Ignore members marked with the `override` modifier"
										},
										"ignoreClassesThatImplementAnInterface": {
											"oneOf": [
												{
													"type": "boolean",
													"description": "Ignore all classes that implement an interface"
												},
												{
													"type": "string",
													"enum": [
														"public-fields"
													],
													"description": "Ignore only the public fields of classes that implement an interface"
												}
											],
											"description": "Ignore classes that specifically implement some interface"
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"missingThis": "Expected 'this' to be used by class {{name}}."
							}
						}
					},
					"comma-dangle": {
						"defaultOptions": [
							"never"
						],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/comma-dangle"
							],
							"type": "layout",
							"docs": {
								"description": "Require or disallow trailing commas",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/comma-dangle"
							},
							"schema": {
								"$defs": {
									"value": {
										"type": "string",
										"enum": [
											"always-multiline",
											"always",
											"never",
											"only-multiline"
										]
									},
									"valueWithIgnore": {
										"type": "string",
										"enum": [
											"always-multiline",
											"always",
											"never",
											"only-multiline",
											"ignore"
										]
									}
								},
								"type": "array",
								"items": [
									{
										"oneOf": [
											{
												"$ref": "#/$defs/value"
											},
											{
												"type": "object",
												"properties": {
													"arrays": {
														"$ref": "#/$defs/valueWithIgnore"
													},
													"objects": {
														"$ref": "#/$defs/valueWithIgnore"
													},
													"imports": {
														"$ref": "#/$defs/valueWithIgnore"
													},
													"exports": {
														"$ref": "#/$defs/valueWithIgnore"
													},
													"functions": {
														"$ref": "#/$defs/valueWithIgnore"
													},
													"enums": {
														"$ref": "#/$defs/valueWithIgnore"
													},
													"generics": {
														"$ref": "#/$defs/valueWithIgnore"
													},
													"tuples": {
														"$ref": "#/$defs/valueWithIgnore"
													}
												},
												"additionalProperties": false
											}
										]
									}
								],
								"additionalItems": false
							},
							"fixable": "code",
							"messages": {
								"unexpected": "Unexpected trailing comma.",
								"missing": "Missing trailing comma."
							}
						}
					},
					"comma-spacing": {
						"defaultOptions": [
							{
								"before": false,
								"after": true
							}
						],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/comma-spacing"
							],
							"type": "layout",
							"docs": {
								"description": "Enforce consistent spacing before and after commas",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/comma-spacing"
							},
							"fixable": "whitespace",
							"schema": [
								{
									"type": "object",
									"properties": {
										"before": {
											"type": "boolean",
											"default": false
										},
										"after": {
											"type": "boolean",
											"default": true
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"unexpected": "There should be no space {{loc}} ','.",
								"missing": "A space is required {{loc}} ','."
							}
						}
					},
					"consistent-generic-constructors": {
						"defaultOptions": [
							"constructor"
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Enforce specifying generic type arguments on type annotation or constructor name of a constructor call",
								"recommended": "stylistic",
								"url": "https://typescript-eslint.io/rules/consistent-generic-constructors"
							},
							"messages": {
								"preferTypeAnnotation": "The generic type arguments should be specified as part of the type annotation.",
								"preferConstructor": "The generic type arguments should be specified as part of the constructor type arguments."
							},
							"fixable": "code",
							"schema": [
								{
									"type": "string",
									"enum": [
										"type-annotation",
										"constructor"
									]
								}
							]
						}
					},
					"consistent-indexed-object-style": {
						"defaultOptions": [
							"record"
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Require or disallow the `Record` type",
								"recommended": "stylistic",
								"url": "https://typescript-eslint.io/rules/consistent-indexed-object-style"
							},
							"messages": {
								"preferRecord": "A record is preferred over an index signature.",
								"preferIndexSignature": "An index signature is preferred over a record."
							},
							"fixable": "code",
							"schema": [
								{
									"type": "string",
									"enum": [
										"record",
										"index-signature"
									]
								}
							]
						}
					},
					"consistent-return": {
						"defaultOptions": [
							{
								"treatUndefinedAsUnspecified": false
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Require `return` statements to either always or never specify values",
								"extendsBaseRule": true,
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/consistent-return"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"treatUndefinedAsUnspecified": {
											"type": "boolean",
											"default": false
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"missingReturn": "Expected to return a value at the end of {{name}}.",
								"missingReturnValue": "{{name}} expected a return value.",
								"unexpectedReturnValue": "{{name}} expected no return value."
							}
						}
					},
					"consistent-type-assertions": {
						"defaultOptions": [
							{
								"assertionStyle": "as",
								"objectLiteralTypeAssertions": "allow"
							}
						],
						"meta": {
							"type": "suggestion",
							"fixable": "code",
							"hasSuggestions": true,
							"docs": {
								"description": "Enforce consistent usage of type assertions",
								"recommended": "stylistic",
								"url": "https://typescript-eslint.io/rules/consistent-type-assertions"
							},
							"messages": {
								"as": "Use 'as {{cast}}' instead of '<{{cast}}>'.",
								"angle-bracket": "Use '<{{cast}}>' instead of 'as {{cast}}'.",
								"never": "Do not use any type assertions.",
								"unexpectedObjectTypeAssertion": "Always prefer const x: T = { ... }.",
								"replaceObjectTypeAssertionWithAnnotation": "Use const x: {{cast}} = { ... } instead.",
								"replaceObjectTypeAssertionWithSatisfies": "Use const x = { ... } satisfies {{cast}} instead."
							},
							"schema": [
								{
									"oneOf": [
										{
											"type": "object",
											"properties": {
												"assertionStyle": {
													"type": "string",
													"enum": [
														"never"
													]
												}
											},
											"additionalProperties": false,
											"required": [
												"assertionStyle"
											]
										},
										{
											"type": "object",
											"properties": {
												"assertionStyle": {
													"type": "string",
													"enum": [
														"as",
														"angle-bracket"
													]
												},
												"objectLiteralTypeAssertions": {
													"type": "string",
													"enum": [
														"allow",
														"allow-as-parameter",
														"never"
													]
												}
											},
											"additionalProperties": false,
											"required": [
												"assertionStyle"
											]
										}
									]
								}
							]
						}
					},
					"consistent-type-definitions": {
						"defaultOptions": [
							"interface"
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Enforce type definitions to consistently use either `interface` or `type`",
								"recommended": "stylistic",
								"url": "https://typescript-eslint.io/rules/consistent-type-definitions"
							},
							"messages": {
								"interfaceOverType": "Use an `interface` instead of a `type`.",
								"typeOverInterface": "Use a `type` instead of an `interface`."
							},
							"schema": [
								{
									"type": "string",
									"enum": [
										"interface",
										"type"
									]
								}
							],
							"fixable": "code"
						}
					},
					"consistent-type-exports": {
						"defaultOptions": [
							{
								"fixMixedExportsWithInlineTypeSpecifier": false
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Enforce consistent usage of type exports",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/consistent-type-exports"
							},
							"messages": {
								"typeOverValue": "All exports in the declaration are only used as types. Use `export type`.",
								"singleExportIsType": "Type export {{exportNames}} is not a value and should be exported using `export type`.",
								"multipleExportsAreTypes": "Type exports {{exportNames}} are not values and should be exported using `export type`."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"fixMixedExportsWithInlineTypeSpecifier": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							],
							"fixable": "code"
						}
					},
					"consistent-type-imports": {
						"defaultOptions": [
							{
								"prefer": "type-imports",
								"disallowTypeAnnotations": true,
								"fixStyle": "separate-type-imports"
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Enforce consistent usage of type imports",
								"url": "https://typescript-eslint.io/rules/consistent-type-imports"
							},
							"messages": {
								"typeOverValue": "All imports in the declaration are only used as types. Use `import type`.",
								"someImportsAreOnlyTypes": "Imports {{typeImports}} are only used as type.",
								"avoidImportType": "Use an `import` instead of an `import type`.",
								"noImportTypeAnnotations": "`import()` type annotations are forbidden."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"disallowTypeAnnotations": {
											"type": "boolean"
										},
										"fixStyle": {
											"type": "string",
											"enum": [
												"separate-type-imports",
												"inline-type-imports"
											]
										},
										"prefer": {
											"type": "string",
											"enum": [
												"type-imports",
												"no-type-imports"
											]
										}
									},
									"additionalProperties": false
								}
							],
							"fixable": "code"
						}
					},
					"default-param-last": {
						"defaultOptions": [],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Enforce default parameters to be last",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/default-param-last"
							},
							"schema": [],
							"messages": {
								"shouldBeLast": "Default parameters should be last."
							}
						}
					},
					"dot-notation": {
						"defaultOptions": [
							{
								"allowPrivateClassPropertyAccess": false,
								"allowProtectedClassPropertyAccess": false,
								"allowIndexSignaturePropertyAccess": false,
								"allowKeywords": true,
								"allowPattern": ""
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Enforce dot notation whenever possible",
								"recommended": "stylistic",
								"extendsBaseRule": true,
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/dot-notation"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowKeywords": {
											"type": "boolean",
											"default": true
										},
										"allowPattern": {
											"type": "string",
											"default": ""
										},
										"allowPrivateClassPropertyAccess": {
											"type": "boolean",
											"default": false
										},
										"allowProtectedClassPropertyAccess": {
											"type": "boolean",
											"default": false
										},
										"allowIndexSignaturePropertyAccess": {
											"type": "boolean",
											"default": false
										}
									},
									"additionalProperties": false
								}
							],
							"fixable": "code",
							"messages": {
								"useDot": "[{{key}}] is better written in dot notation.",
								"useBrackets": ".{{key}} is a syntax error."
							}
						}
					},
					"explicit-function-return-type": {
						"defaultOptions": [
							{
								"allowExpressions": false,
								"allowTypedFunctionExpressions": true,
								"allowHigherOrderFunctions": true,
								"allowDirectConstAssertionInArrowFunctions": true,
								"allowConciseArrowFunctionExpressionsStartingWithVoid": false,
								"allowFunctionsWithoutTypeParameters": false,
								"allowedNames": [],
								"allowIIFEs": false
							}
						],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Require explicit return types on functions and class methods",
								"url": "https://typescript-eslint.io/rules/explicit-function-return-type"
							},
							"messages": {
								"missingReturnType": "Missing return type on function."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowConciseArrowFunctionExpressionsStartingWithVoid": {
											"description": "Whether to allow arrow functions that start with the `void` keyword.",
											"type": "boolean"
										},
										"allowExpressions": {
											"description": "Whether to ignore function expressions (functions which are not part of a declaration).",
											"type": "boolean"
										},
										"allowHigherOrderFunctions": {
											"description": "Whether to ignore functions immediately returning another function expression.",
											"type": "boolean"
										},
										"allowTypedFunctionExpressions": {
											"description": "Whether to ignore type annotations on the variable of function expressions.",
											"type": "boolean"
										},
										"allowDirectConstAssertionInArrowFunctions": {
											"description": "Whether to ignore arrow functions immediately returning a `as const` value.",
											"type": "boolean"
										},
										"allowFunctionsWithoutTypeParameters": {
											"description": "Whether to ignore functions that don't have generic type parameters.",
											"type": "boolean"
										},
										"allowedNames": {
											"description": "An array of function/method names that will not have their arguments or return values checked.",
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"allowIIFEs": {
											"description": "Whether to ignore immediately invoked function expressions (IIFEs).",
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"explicit-member-accessibility": {
						"defaultOptions": [
							{
								"accessibility": "explicit"
							}
						],
						"meta": {
							"hasSuggestions": true,
							"type": "problem",
							"docs": {
								"description": "Require explicit accessibility modifiers on class properties and methods",
								"url": "https://typescript-eslint.io/rules/explicit-member-accessibility"
							},
							"fixable": "code",
							"messages": {
								"missingAccessibility": "Missing accessibility modifier on {{type}} {{name}}.",
								"unwantedPublicAccessibility": "Public accessibility modifier on {{type}} {{name}}.",
								"addExplicitAccessibility": "Add '{{ type }}' accessibility modifier"
							},
							"schema": [
								{
									"$defs": {
										"accessibilityLevel": {
											"oneOf": [
												{
													"type": "string",
													"enum": [
														"explicit"
													],
													"description": "Always require an accessor."
												},
												{
													"type": "string",
													"enum": [
														"no-public"
													],
													"description": "Require an accessor except when public."
												},
												{
													"type": "string",
													"enum": [
														"off"
													],
													"description": "Never check whether there is an accessor."
												}
											]
										}
									},
									"type": "object",
									"properties": {
										"accessibility": {
											"$ref": "#/items/0/$defs/accessibilityLevel"
										},
										"overrides": {
											"type": "object",
											"properties": {
												"accessors": {
													"$ref": "#/items/0/$defs/accessibilityLevel"
												},
												"constructors": {
													"$ref": "#/items/0/$defs/accessibilityLevel"
												},
												"methods": {
													"$ref": "#/items/0/$defs/accessibilityLevel"
												},
												"properties": {
													"$ref": "#/items/0/$defs/accessibilityLevel"
												},
												"parameterProperties": {
													"$ref": "#/items/0/$defs/accessibilityLevel"
												}
											},
											"additionalProperties": false
										},
										"ignoredMethodNames": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"explicit-module-boundary-types": {
						"defaultOptions": [
							{
								"allowArgumentsExplicitlyTypedAsAny": false,
								"allowDirectConstAssertionInArrowFunctions": true,
								"allowedNames": [],
								"allowHigherOrderFunctions": true,
								"allowTypedFunctionExpressions": true
							}
						],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Require explicit return and argument types on exported functions' and classes' public class methods",
								"url": "https://typescript-eslint.io/rules/explicit-module-boundary-types"
							},
							"messages": {
								"missingReturnType": "Missing return type on function.",
								"missingArgType": "Argument '{{name}}' should be typed.",
								"missingArgTypeUnnamed": "{{type}} argument should be typed.",
								"anyTypedArg": "Argument '{{name}}' should be typed with a non-any type.",
								"anyTypedArgUnnamed": "{{type}} argument should be typed with a non-any type."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowArgumentsExplicitlyTypedAsAny": {
											"description": "Whether to ignore arguments that are explicitly typed as `any`.",
											"type": "boolean"
										},
										"allowDirectConstAssertionInArrowFunctions": {
											"description": "Whether to ignore return type annotations on body-less arrow functions that return an `as const` type assertion.\nYou must still type the parameters of the function.",
											"type": "boolean"
										},
										"allowedNames": {
											"description": "An array of function/method names that will not have their arguments or return values checked.",
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"allowHigherOrderFunctions": {
											"description": "Whether to ignore return type annotations on functions immediately returning another function expression.\nYou must still type the parameters of the function.",
											"type": "boolean"
										},
										"allowTypedFunctionExpressions": {
											"description": "Whether to ignore type annotations on the variable of a function expression.",
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"func-call-spacing": {
						"defaultOptions": [
							"never",
							{}
						],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/func-call-spacing"
							],
							"type": "layout",
							"docs": {
								"description": "Require or disallow spacing between function identifiers and their invocations",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/func-call-spacing"
							},
							"fixable": "whitespace",
							"schema": {
								"anyOf": [
									{
										"type": "array",
										"items": [
											{
												"type": "string",
												"enum": [
													"never"
												]
											}
										],
										"minItems": 0,
										"maxItems": 1
									},
									{
										"type": "array",
										"items": [
											{
												"type": "string",
												"enum": [
													"always"
												]
											},
											{
												"type": "object",
												"properties": {
													"allowNewlines": {
														"type": "boolean"
													}
												},
												"additionalProperties": false
											}
										],
										"minItems": 0,
										"maxItems": 2
									}
								]
							},
							"messages": {
								"unexpectedWhitespace": "Unexpected whitespace between function name and paren.",
								"unexpectedNewline": "Unexpected newline between function name and paren.",
								"missing": "Missing space between function name and paren."
							}
						}
					},
					"indent": {
						"defaultOptions": [
							4,
							{
								"SwitchCase": 1,
								"flatTernaryExpressions": false,
								"ignoredNodes": []
							}
						],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/indent"
							],
							"type": "layout",
							"docs": {
								"description": "Enforce consistent indentation",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/indent"
							},
							"fixable": "whitespace",
							"schema": [
								{
									"oneOf": [
										{
											"enum": [
												"tab"
											]
										},
										{
											"type": "integer",
											"minimum": 0
										}
									]
								},
								{
									"type": "object",
									"properties": {
										"SwitchCase": {
											"type": "integer",
											"minimum": 0,
											"default": 0
										},
										"VariableDeclarator": {
											"oneOf": [
												{
													"oneOf": [
														{
															"type": "integer",
															"minimum": 0
														},
														{
															"enum": [
																"first",
																"off"
															]
														}
													]
												},
												{
													"type": "object",
													"properties": {
														"var": {
															"oneOf": [
																{
																	"type": "integer",
																	"minimum": 0
																},
																{
																	"enum": [
																		"first",
																		"off"
																	]
																}
															]
														},
														"let": {
															"oneOf": [
																{
																	"type": "integer",
																	"minimum": 0
																},
																{
																	"enum": [
																		"first",
																		"off"
																	]
																}
															]
														},
														"const": {
															"oneOf": [
																{
																	"type": "integer",
																	"minimum": 0
																},
																{
																	"enum": [
																		"first",
																		"off"
																	]
																}
															]
														}
													},
													"additionalProperties": false
												}
											]
										},
										"outerIIFEBody": {
											"oneOf": [
												{
													"type": "integer",
													"minimum": 0
												},
												{
													"enum": [
														"off"
													]
												}
											]
										},
										"MemberExpression": {
											"oneOf": [
												{
													"type": "integer",
													"minimum": 0
												},
												{
													"enum": [
														"off"
													]
												}
											]
										},
										"FunctionDeclaration": {
											"type": "object",
											"properties": {
												"parameters": {
													"oneOf": [
														{
															"type": "integer",
															"minimum": 0
														},
														{
															"enum": [
																"first",
																"off"
															]
														}
													]
												},
												"body": {
													"type": "integer",
													"minimum": 0
												}
											},
											"additionalProperties": false
										},
										"FunctionExpression": {
											"type": "object",
											"properties": {
												"parameters": {
													"oneOf": [
														{
															"type": "integer",
															"minimum": 0
														},
														{
															"enum": [
																"first",
																"off"
															]
														}
													]
												},
												"body": {
													"type": "integer",
													"minimum": 0
												}
											},
											"additionalProperties": false
										},
										"StaticBlock": {
											"type": "object",
											"properties": {
												"body": {
													"type": "integer",
													"minimum": 0
												}
											},
											"additionalProperties": false
										},
										"CallExpression": {
											"type": "object",
											"properties": {
												"arguments": {
													"oneOf": [
														{
															"type": "integer",
															"minimum": 0
														},
														{
															"enum": [
																"first",
																"off"
															]
														}
													]
												}
											},
											"additionalProperties": false
										},
										"ArrayExpression": {
											"oneOf": [
												{
													"type": "integer",
													"minimum": 0
												},
												{
													"enum": [
														"first",
														"off"
													]
												}
											]
										},
										"ObjectExpression": {
											"oneOf": [
												{
													"type": "integer",
													"minimum": 0
												},
												{
													"enum": [
														"first",
														"off"
													]
												}
											]
										},
										"ImportDeclaration": {
											"oneOf": [
												{
													"type": "integer",
													"minimum": 0
												},
												{
													"enum": [
														"first",
														"off"
													]
												}
											]
										},
										"flatTernaryExpressions": {
											"type": "boolean",
											"default": false
										},
										"offsetTernaryExpressions": {
											"type": "boolean",
											"default": false
										},
										"ignoredNodes": {
											"type": "array",
											"items": {
												"type": "string",
												"not": {
													"pattern": ":exit$"
												}
											}
										},
										"ignoreComments": {
											"type": "boolean",
											"default": false
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}."
							}
						}
					},
					"init-declarations": {
						"defaultOptions": [
							"always"
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Require or disallow initialization in variable declarations",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/init-declarations"
							},
							"schema": {
								"anyOf": [
									{
										"type": "array",
										"items": [
											{
												"enum": [
													"always"
												]
											}
										],
										"minItems": 0,
										"maxItems": 1
									},
									{
										"type": "array",
										"items": [
											{
												"enum": [
													"never"
												]
											},
											{
												"type": "object",
												"properties": {
													"ignoreForLoopInit": {
														"type": "boolean"
													}
												},
												"additionalProperties": false
											}
										],
										"minItems": 0,
										"maxItems": 2
									}
								]
							},
							"messages": {
								"initialized": "Variable '{{idName}}' should be initialized on declaration.",
								"notInitialized": "Variable '{{idName}}' should not be initialized on declaration."
							}
						}
					},
					"key-spacing": {
						"defaultOptions": [
							{}
						],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/key-spacing"
							],
							"type": "layout",
							"docs": {
								"description": "Enforce consistent spacing between property names and type annotations in types and interfaces",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/key-spacing"
							},
							"fixable": "whitespace",
							"schema": [
								{
									"anyOf": [
										{
											"type": "object",
											"properties": {
												"align": {
													"anyOf": [
														{
															"enum": [
																"colon",
																"value"
															]
														},
														{
															"type": "object",
															"properties": {
																"mode": {
																	"enum": [
																		"strict",
																		"minimum"
																	]
																},
																"on": {
																	"enum": [
																		"colon",
																		"value"
																	]
																},
																"beforeColon": {
																	"type": "boolean"
																},
																"afterColon": {
																	"type": "boolean"
																}
															},
															"additionalProperties": false
														}
													]
												},
												"mode": {
													"enum": [
														"strict",
														"minimum"
													]
												},
												"beforeColon": {
													"type": "boolean"
												},
												"afterColon": {
													"type": "boolean"
												}
											},
											"additionalProperties": false
										},
										{
											"type": "object",
											"properties": {
												"singleLine": {
													"type": "object",
													"properties": {
														"mode": {
															"enum": [
																"strict",
																"minimum"
															]
														},
														"beforeColon": {
															"type": "boolean"
														},
														"afterColon": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"multiLine": {
													"type": "object",
													"properties": {
														"align": {
															"anyOf": [
																{
																	"enum": [
																		"colon",
																		"value"
																	]
																},
																{
																	"type": "object",
																	"properties": {
																		"mode": {
																			"enum": [
																				"strict",
																				"minimum"
																			]
																		},
																		"on": {
																			"enum": [
																				"colon",
																				"value"
																			]
																		},
																		"beforeColon": {
																			"type": "boolean"
																		},
																		"afterColon": {
																			"type": "boolean"
																		}
																	},
																	"additionalProperties": false
																}
															]
														},
														"mode": {
															"enum": [
																"strict",
																"minimum"
															]
														},
														"beforeColon": {
															"type": "boolean"
														},
														"afterColon": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												}
											},
											"additionalProperties": false
										},
										{
											"type": "object",
											"properties": {
												"singleLine": {
													"type": "object",
													"properties": {
														"mode": {
															"enum": [
																"strict",
																"minimum"
															]
														},
														"beforeColon": {
															"type": "boolean"
														},
														"afterColon": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"multiLine": {
													"type": "object",
													"properties": {
														"mode": {
															"enum": [
																"strict",
																"minimum"
															]
														},
														"beforeColon": {
															"type": "boolean"
														},
														"afterColon": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"align": {
													"type": "object",
													"properties": {
														"mode": {
															"enum": [
																"strict",
																"minimum"
															]
														},
														"on": {
															"enum": [
																"colon",
																"value"
															]
														},
														"beforeColon": {
															"type": "boolean"
														},
														"afterColon": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												}
											},
											"additionalProperties": false
										}
									]
								}
							],
							"messages": {
								"extraKey": "Extra space after {{computed}}key '{{key}}'.",
								"extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
								"missingKey": "Missing space after {{computed}}key '{{key}}'.",
								"missingValue": "Missing space before value for {{computed}}key '{{key}}'."
							}
						}
					},
					"keyword-spacing": {
						"defaultOptions": [
							{}
						],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/keyword-spacing"
							],
							"type": "layout",
							"docs": {
								"description": "Enforce consistent spacing before and after keywords",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/keyword-spacing"
							},
							"fixable": "whitespace",
							"schema": [
								{
									"type": "object",
									"properties": {
										"before": {
											"type": "boolean",
											"default": true
										},
										"after": {
											"type": "boolean",
											"default": true
										},
										"overrides": {
											"type": "object",
											"properties": {
												"abstract": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"as": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"async": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"await": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"boolean": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"break": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"byte": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"case": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"catch": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"char": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"class": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"const": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"continue": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"debugger": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"default": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"delete": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"do": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"double": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"else": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"enum": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"export": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"extends": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"false": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"final": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"finally": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"float": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"for": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"from": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"function": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"get": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"goto": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"if": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"implements": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"import": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"in": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"instanceof": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"int": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"interface": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"let": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"long": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"native": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"new": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"null": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"of": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"package": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"private": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"protected": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"public": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"return": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"set": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"short": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"static": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"super": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"switch": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"synchronized": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"this": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"throw": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"throws": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"transient": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"true": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"try": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"typeof": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"var": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"void": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"volatile": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"while": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"with": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"yield": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"type": {
													"type": "object",
													"properties": {
														"before": {
															"type": "boolean"
														},
														"after": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												}
											},
											"additionalProperties": false
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"expectedBefore": "Expected space(s) before \"{{value}}\".",
								"expectedAfter": "Expected space(s) after \"{{value}}\".",
								"unexpectedBefore": "Unexpected space(s) before \"{{value}}\".",
								"unexpectedAfter": "Unexpected space(s) after \"{{value}}\"."
							}
						}
					},
					"lines-around-comment": {
						"defaultOptions": [
							{
								"beforeBlockComment": true
							}
						],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/lines-around-comment"
							],
							"type": "layout",
							"docs": {
								"description": "Require empty lines around comments",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/lines-around-comment"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"beforeBlockComment": {
											"type": "boolean",
											"default": true
										},
										"afterBlockComment": {
											"type": "boolean",
											"default": false
										},
										"beforeLineComment": {
											"type": "boolean",
											"default": false
										},
										"afterLineComment": {
											"type": "boolean",
											"default": false
										},
										"allowBlockStart": {
											"type": "boolean",
											"default": false
										},
										"allowBlockEnd": {
											"type": "boolean",
											"default": false
										},
										"allowClassStart": {
											"type": "boolean"
										},
										"allowClassEnd": {
											"type": "boolean"
										},
										"allowObjectStart": {
											"type": "boolean"
										},
										"allowObjectEnd": {
											"type": "boolean"
										},
										"allowArrayStart": {
											"type": "boolean"
										},
										"allowArrayEnd": {
											"type": "boolean"
										},
										"allowInterfaceStart": {
											"type": "boolean"
										},
										"allowInterfaceEnd": {
											"type": "boolean"
										},
										"allowTypeStart": {
											"type": "boolean"
										},
										"allowTypeEnd": {
											"type": "boolean"
										},
										"allowEnumStart": {
											"type": "boolean"
										},
										"allowEnumEnd": {
											"type": "boolean"
										},
										"allowModuleStart": {
											"type": "boolean"
										},
										"allowModuleEnd": {
											"type": "boolean"
										},
										"ignorePattern": {
											"type": "string"
										},
										"applyDefaultIgnorePatterns": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							],
							"fixable": "whitespace",
							"messages": {
								"after": "Expected line after comment.",
								"before": "Expected line before comment."
							}
						}
					},
					"lines-between-class-members": {
						"defaultOptions": [
							"always",
							{
								"exceptAfterOverload": true,
								"exceptAfterSingleLine": false
							}
						],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/lines-between-class-members"
							],
							"type": "layout",
							"docs": {
								"description": "Require or disallow an empty line between class members",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/lines-between-class-members"
							},
							"fixable": "whitespace",
							"schema": [
								{
									"anyOf": [
										{
											"type": "object",
											"properties": {
												"enforce": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"blankLine": {
																"enum": [
																	"always",
																	"never"
																]
															},
															"prev": {
																"enum": [
																	"method",
																	"field",
																	"*"
																]
															},
															"next": {
																"enum": [
																	"method",
																	"field",
																	"*"
																]
															}
														},
														"additionalProperties": false,
														"required": [
															"blankLine",
															"prev",
															"next"
														]
													},
													"minItems": 1
												}
											},
											"additionalProperties": false,
											"required": [
												"enforce"
											]
										},
										{
											"enum": [
												"always",
												"never"
											]
										}
									]
								},
								{
									"type": "object",
									"properties": {
										"exceptAfterSingleLine": {
											"type": "boolean",
											"default": false
										},
										"exceptAfterOverload": {
											"type": "boolean",
											"default": true
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"never": "Unexpected blank line between class members.",
								"always": "Expected blank line between class members."
							}
						}
					},
					"max-params": {
						"defaultOptions": [
							{
								"max": 3,
								"countVoidThis": false
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Enforce a maximum number of parameters in function definitions",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/max-params"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"maximum": {
											"type": "integer",
											"minimum": 0
										},
										"max": {
											"type": "integer",
											"minimum": 0
										},
										"countVoidThis": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"exceed": "{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}."
							}
						}
					},
					"member-delimiter-style": {
						"defaultOptions": [
							{
								"multiline": {
									"delimiter": "semi",
									"requireLast": true
								},
								"singleline": {
									"delimiter": "semi",
									"requireLast": false
								},
								"multilineDetection": "brackets"
							}
						],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/member-delimiter-style"
							],
							"type": "layout",
							"docs": {
								"description": "Require a specific member delimiter style for interfaces and type literals",
								"url": "https://typescript-eslint.io/rules/member-delimiter-style"
							},
							"fixable": "whitespace",
							"messages": {
								"unexpectedComma": "Unexpected separator (,).",
								"unexpectedSemi": "Unexpected separator (;).",
								"expectedComma": "Expected a comma.",
								"expectedSemi": "Expected a semicolon."
							},
							"schema": [
								{
									"$defs": {
										"multiLineOption": {
											"type": "string",
											"enum": [
												"none",
												"semi",
												"comma"
											]
										},
										"singleLineOption": {
											"type": "string",
											"enum": [
												"semi",
												"comma"
											]
										},
										"delimiterConfig": {
											"type": "object",
											"properties": {
												"multiline": {
													"type": "object",
													"properties": {
														"delimiter": {
															"$ref": "#/items/0/$defs/multiLineOption"
														},
														"requireLast": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"singleline": {
													"type": "object",
													"properties": {
														"delimiter": {
															"$ref": "#/items/0/$defs/singleLineOption"
														},
														"requireLast": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												}
											},
											"additionalProperties": false
										}
									},
									"type": "object",
									"properties": {
										"multiline": {
											"type": "object",
											"properties": {
												"delimiter": {
													"$ref": "#/items/0/$defs/multiLineOption"
												},
												"requireLast": {
													"type": "boolean"
												}
											},
											"additionalProperties": false
										},
										"singleline": {
											"type": "object",
											"properties": {
												"delimiter": {
													"$ref": "#/items/0/$defs/singleLineOption"
												},
												"requireLast": {
													"type": "boolean"
												}
											},
											"additionalProperties": false
										},
										"overrides": {
											"type": "object",
											"properties": {
												"interface": {
													"$ref": "#/items/0/$defs/delimiterConfig"
												},
												"typeLiteral": {
													"$ref": "#/items/0/$defs/delimiterConfig"
												}
											},
											"additionalProperties": false
										},
										"multilineDetection": {
											"type": "string",
											"enum": [
												"brackets",
												"last-member"
											]
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"member-ordering": {
						"defaultOptions": [
							{
								"default": {
									"memberTypes": [
										"signature",
										"call-signature",
										"public-static-field",
										"protected-static-field",
										"private-static-field",
										"#private-static-field",
										"public-decorated-field",
										"protected-decorated-field",
										"private-decorated-field",
										"public-instance-field",
										"protected-instance-field",
										"private-instance-field",
										"#private-instance-field",
										"public-abstract-field",
										"protected-abstract-field",
										"public-field",
										"protected-field",
										"private-field",
										"#private-field",
										"static-field",
										"instance-field",
										"abstract-field",
										"decorated-field",
										"field",
										"static-initialization",
										"public-constructor",
										"protected-constructor",
										"private-constructor",
										"constructor",
										"public-static-accessor",
										"protected-static-accessor",
										"private-static-accessor",
										"#private-static-accessor",
										"public-decorated-accessor",
										"protected-decorated-accessor",
										"private-decorated-accessor",
										"public-instance-accessor",
										"protected-instance-accessor",
										"private-instance-accessor",
										"#private-instance-accessor",
										"public-abstract-accessor",
										"protected-abstract-accessor",
										"public-accessor",
										"protected-accessor",
										"private-accessor",
										"#private-accessor",
										"static-accessor",
										"instance-accessor",
										"abstract-accessor",
										"decorated-accessor",
										"accessor",
										"public-static-get",
										"protected-static-get",
										"private-static-get",
										"#private-static-get",
										"public-decorated-get",
										"protected-decorated-get",
										"private-decorated-get",
										"public-instance-get",
										"protected-instance-get",
										"private-instance-get",
										"#private-instance-get",
										"public-abstract-get",
										"protected-abstract-get",
										"public-get",
										"protected-get",
										"private-get",
										"#private-get",
										"static-get",
										"instance-get",
										"abstract-get",
										"decorated-get",
										"get",
										"public-static-set",
										"protected-static-set",
										"private-static-set",
										"#private-static-set",
										"public-decorated-set",
										"protected-decorated-set",
										"private-decorated-set",
										"public-instance-set",
										"protected-instance-set",
										"private-instance-set",
										"#private-instance-set",
										"public-abstract-set",
										"protected-abstract-set",
										"public-set",
										"protected-set",
										"private-set",
										"#private-set",
										"static-set",
										"instance-set",
										"abstract-set",
										"decorated-set",
										"set",
										"public-static-method",
										"protected-static-method",
										"private-static-method",
										"#private-static-method",
										"public-decorated-method",
										"protected-decorated-method",
										"private-decorated-method",
										"public-instance-method",
										"protected-instance-method",
										"private-instance-method",
										"#private-instance-method",
										"public-abstract-method",
										"protected-abstract-method",
										"public-method",
										"protected-method",
										"private-method",
										"#private-method",
										"static-method",
										"instance-method",
										"abstract-method",
										"decorated-method",
										"method"
									]
								}
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Require a consistent member declaration order",
								"url": "https://typescript-eslint.io/rules/member-ordering"
							},
							"messages": {
								"incorrectOrder": "Member {{member}} should be declared before member {{beforeMember}}.",
								"incorrectGroupOrder": "Member {{name}} should be declared before all {{rank}} definitions.",
								"incorrectRequiredMembersOrder": "Member {{member}} should be declared after all {{optionalOrRequired}} members."
							},
							"schema": [
								{
									"$defs": {
										"orderOptions": {
											"type": "string",
											"enum": [
												"alphabetically",
												"alphabetically-case-insensitive",
												"as-written",
												"natural",
												"natural-case-insensitive"
											]
										},
										"optionalityOrderOptions": {
											"type": "string",
											"enum": [
												"optional-first",
												"required-first"
											]
										},
										"allItems": {
											"type": "string",
											"enum": [
												"readonly-signature",
												"signature",
												"readonly-field",
												"public-readonly-field",
												"public-decorated-readonly-field",
												"decorated-readonly-field",
												"static-readonly-field",
												"public-static-readonly-field",
												"instance-readonly-field",
												"public-instance-readonly-field",
												"abstract-readonly-field",
												"public-abstract-readonly-field",
												"protected-readonly-field",
												"protected-decorated-readonly-field",
												"protected-static-readonly-field",
												"protected-instance-readonly-field",
												"protected-abstract-readonly-field",
												"private-readonly-field",
												"private-decorated-readonly-field",
												"private-static-readonly-field",
												"private-instance-readonly-field",
												"#private-readonly-field",
												"#private-static-readonly-field",
												"#private-instance-readonly-field",
												"field",
												"public-field",
												"public-decorated-field",
												"decorated-field",
												"static-field",
												"public-static-field",
												"instance-field",
												"public-instance-field",
												"abstract-field",
												"public-abstract-field",
												"protected-field",
												"protected-decorated-field",
												"protected-static-field",
												"protected-instance-field",
												"protected-abstract-field",
												"private-field",
												"private-decorated-field",
												"private-static-field",
												"private-instance-field",
												"#private-field",
												"#private-static-field",
												"#private-instance-field",
												"method",
												"public-method",
												"public-decorated-method",
												"decorated-method",
												"static-method",
												"public-static-method",
												"instance-method",
												"public-instance-method",
												"abstract-method",
												"public-abstract-method",
												"protected-method",
												"protected-decorated-method",
												"protected-static-method",
												"protected-instance-method",
												"protected-abstract-method",
												"private-method",
												"private-decorated-method",
												"private-static-method",
												"private-instance-method",
												"#private-method",
												"#private-static-method",
												"#private-instance-method",
												"call-signature",
												"constructor",
												"public-constructor",
												"protected-constructor",
												"private-constructor",
												"accessor",
												"public-accessor",
												"public-decorated-accessor",
												"decorated-accessor",
												"static-accessor",
												"public-static-accessor",
												"instance-accessor",
												"public-instance-accessor",
												"abstract-accessor",
												"public-abstract-accessor",
												"protected-accessor",
												"protected-decorated-accessor",
												"protected-static-accessor",
												"protected-instance-accessor",
												"protected-abstract-accessor",
												"private-accessor",
												"private-decorated-accessor",
												"private-static-accessor",
												"private-instance-accessor",
												"#private-accessor",
												"#private-static-accessor",
												"#private-instance-accessor",
												"get",
												"public-get",
												"public-decorated-get",
												"decorated-get",
												"static-get",
												"public-static-get",
												"instance-get",
												"public-instance-get",
												"abstract-get",
												"public-abstract-get",
												"protected-get",
												"protected-decorated-get",
												"protected-static-get",
												"protected-instance-get",
												"protected-abstract-get",
												"private-get",
												"private-decorated-get",
												"private-static-get",
												"private-instance-get",
												"#private-get",
												"#private-static-get",
												"#private-instance-get",
												"set",
												"public-set",
												"public-decorated-set",
												"decorated-set",
												"static-set",
												"public-static-set",
												"instance-set",
												"public-instance-set",
												"abstract-set",
												"public-abstract-set",
												"protected-set",
												"protected-decorated-set",
												"protected-static-set",
												"protected-instance-set",
												"protected-abstract-set",
												"private-set",
												"private-decorated-set",
												"private-static-set",
												"private-instance-set",
												"#private-set",
												"#private-static-set",
												"#private-instance-set",
												"static-initialization",
												"static-static-initialization",
												"public-static-static-initialization",
												"instance-static-initialization",
												"public-instance-static-initialization",
												"abstract-static-initialization",
												"public-abstract-static-initialization",
												"protected-static-static-initialization",
												"protected-instance-static-initialization",
												"protected-abstract-static-initialization",
												"private-static-static-initialization",
												"private-instance-static-initialization",
												"#private-static-static-initialization",
												"#private-instance-static-initialization"
											]
										},
										"typeItems": {
											"type": "string",
											"enum": [
												"readonly-signature",
												"signature",
												"readonly-field",
												"field",
												"method",
												"constructor"
											]
										},
										"baseConfig": {
											"oneOf": [
												{
													"type": "string",
													"enum": [
														"never"
													]
												},
												{
													"type": "array",
													"items": {
														"oneOf": [
															{
																"$ref": "#/items/0/$defs/allItems"
															},
															{
																"type": "array",
																"items": {
																	"$ref": "#/items/0/$defs/allItems"
																}
															}
														]
													}
												},
												{
													"type": "object",
													"properties": {
														"memberTypes": {
															"oneOf": [
																{
																	"type": "array",
																	"items": {
																		"oneOf": [
																			{
																				"$ref": "#/items/0/$defs/allItems"
																			},
																			{
																				"type": "array",
																				"items": {
																					"$ref": "#/items/0/$defs/allItems"
																				}
																			}
																		]
																	}
																},
																{
																	"type": "string",
																	"enum": [
																		"never"
																	]
																}
															]
														},
														"order": {
															"$ref": "#/items/0/$defs/orderOptions"
														},
														"optionalityOrder": {
															"$ref": "#/items/0/$defs/optionalityOrderOptions"
														}
													},
													"additionalProperties": false
												}
											]
										},
										"typesConfig": {
											"oneOf": [
												{
													"type": "string",
													"enum": [
														"never"
													]
												},
												{
													"type": "array",
													"items": {
														"oneOf": [
															{
																"$ref": "#/items/0/$defs/typeItems"
															},
															{
																"type": "array",
																"items": {
																	"$ref": "#/items/0/$defs/typeItems"
																}
															}
														]
													}
												},
												{
													"type": "object",
													"properties": {
														"memberTypes": {
															"oneOf": [
																{
																	"type": "array",
																	"items": {
																		"oneOf": [
																			{
																				"$ref": "#/items/0/$defs/typeItems"
																			},
																			{
																				"type": "array",
																				"items": {
																					"$ref": "#/items/0/$defs/typeItems"
																				}
																			}
																		]
																	}
																},
																{
																	"type": "string",
																	"enum": [
																		"never"
																	]
																}
															]
														},
														"order": {
															"$ref": "#/items/0/$defs/orderOptions"
														},
														"optionalityOrder": {
															"$ref": "#/items/0/$defs/optionalityOrderOptions"
														}
													},
													"additionalProperties": false
												}
											]
										}
									},
									"type": "object",
									"properties": {
										"default": {
											"$ref": "#/items/0/$defs/baseConfig"
										},
										"classes": {
											"$ref": "#/items/0/$defs/baseConfig"
										},
										"classExpressions": {
											"$ref": "#/items/0/$defs/baseConfig"
										},
										"interfaces": {
											"$ref": "#/items/0/$defs/typesConfig"
										},
										"typeLiterals": {
											"$ref": "#/items/0/$defs/typesConfig"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"method-signature-style": {
						"defaultOptions": [
							"property"
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Enforce using a particular method signature syntax",
								"url": "https://typescript-eslint.io/rules/method-signature-style"
							},
							"fixable": "code",
							"messages": {
								"errorMethod": "Shorthand method signature is forbidden. Use a function property instead.",
								"errorProperty": "Function property signature is forbidden. Use a method shorthand instead."
							},
							"schema": [
								{
									"type": "string",
									"enum": [
										"property",
										"method"
									]
								}
							]
						}
					},
					"naming-convention": {
						"defaultOptions": [
							{
								"selector": "default",
								"format": [
									"camelCase"
								],
								"leadingUnderscore": "allow",
								"trailingUnderscore": "allow"
							},
							{
								"selector": "import",
								"format": [
									"camelCase",
									"PascalCase"
								]
							},
							{
								"selector": "variable",
								"format": [
									"camelCase",
									"UPPER_CASE"
								],
								"leadingUnderscore": "allow",
								"trailingUnderscore": "allow"
							},
							{
								"selector": "typeLike",
								"format": [
									"PascalCase"
								]
							}
						],
						"meta": {
							"docs": {
								"description": "Enforce naming conventions for everything across a codebase",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/naming-convention"
							},
							"type": "suggestion",
							"messages": {
								"unexpectedUnderscore": "{{type}} name `{{name}}` must not have a {{position}} underscore.",
								"missingUnderscore": "{{type}} name `{{name}}` must have {{count}} {{position}} underscore(s).",
								"missingAffix": "{{type}} name `{{name}}` must have one of the following {{position}}es: {{affixes}}",
								"satisfyCustom": "{{type}} name `{{name}}` must {{regexMatch}} the RegExp: {{regex}}",
								"doesNotMatchFormat": "{{type}} name `{{name}}` must match one of the following formats: {{formats}}",
								"doesNotMatchFormatTrimmed": "{{type}} name `{{name}}` trimmed as `{{processedName}}` must match one of the following formats: {{formats}}"
							},
							"schema": {
								"$defs": {
									"underscoreOptions": {
										"type": "string",
										"enum": [
											"forbid",
											"allow",
											"require",
											"requireDouble",
											"allowDouble",
											"allowSingleOrDouble"
										]
									},
									"predefinedFormats": {
										"type": "string",
										"enum": [
											"camelCase",
											"strictCamelCase",
											"PascalCase",
											"StrictPascalCase",
											"snake_case",
											"UPPER_CASE"
										]
									},
									"typeModifiers": {
										"type": "string",
										"enum": [
											"boolean",
											"string",
											"number",
											"function",
											"array"
										]
									},
									"prefixSuffixConfig": {
										"type": "array",
										"items": {
											"type": "string",
											"minLength": 1
										},
										"additionalItems": false
									},
									"matchRegexConfig": {
										"type": "object",
										"additionalProperties": false,
										"properties": {
											"match": {
												"type": "boolean"
											},
											"regex": {
												"type": "string"
											}
										},
										"required": [
											"match",
											"regex"
										]
									},
									"formatOptionsConfig": {
										"oneOf": [
											{
												"type": "array",
												"items": {
													"$ref": "#/$defs/predefinedFormats"
												},
												"additionalItems": false
											},
											{
												"type": "null"
											}
										]
									}
								},
								"type": "array",
								"items": {
									"oneOf": [
										{
											"type": "object",
											"description": "Multiple selectors in one config",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"default",
															"variableLike",
															"memberLike",
															"typeLike",
															"method",
															"property",
															"accessor",
															"variable",
															"function",
															"parameter",
															"parameterProperty",
															"classicAccessor",
															"enumMember",
															"classMethod",
															"objectLiteralMethod",
															"typeMethod",
															"classProperty",
															"objectLiteralProperty",
															"typeProperty",
															"autoAccessor",
															"class",
															"interface",
															"typeAlias",
															"enum",
															"typeParameter",
															"import"
														]
													},
													"additionalItems": false
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"const",
															"readonly",
															"static",
															"public",
															"protected",
															"private",
															"#private",
															"abstract",
															"destructured",
															"global",
															"exported",
															"unused",
															"requiresQuotes",
															"override",
															"async",
															"default",
															"namespace"
														]
													},
													"additionalItems": false
												},
												"types": {
													"type": "array",
													"items": {
														"$ref": "#/$defs/typeModifiers"
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'default'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"default"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"const",
															"readonly",
															"static",
															"public",
															"protected",
															"private",
															"#private",
															"abstract",
															"destructured",
															"global",
															"exported",
															"unused",
															"requiresQuotes",
															"override",
															"async",
															"default",
															"namespace"
														]
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'variableLike'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"variableLike"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"unused",
															"async"
														]
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'variable'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"variable"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"const",
															"destructured",
															"exported",
															"global",
															"unused",
															"async"
														]
													},
													"additionalItems": false
												},
												"types": {
													"type": "array",
													"items": {
														"$ref": "#/$defs/typeModifiers"
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'function'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"function"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"exported",
															"global",
															"unused",
															"async"
														]
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'parameter'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"parameter"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"destructured",
															"unused"
														]
													},
													"additionalItems": false
												},
												"types": {
													"type": "array",
													"items": {
														"$ref": "#/$defs/typeModifiers"
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'memberLike'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"memberLike"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"abstract",
															"private",
															"#private",
															"protected",
															"public",
															"readonly",
															"requiresQuotes",
															"static",
															"override",
															"async"
														]
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'classProperty'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"classProperty"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"abstract",
															"private",
															"#private",
															"protected",
															"public",
															"readonly",
															"requiresQuotes",
															"static",
															"override"
														]
													},
													"additionalItems": false
												},
												"types": {
													"type": "array",
													"items": {
														"$ref": "#/$defs/typeModifiers"
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'objectLiteralProperty'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"objectLiteralProperty"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"public",
															"requiresQuotes"
														]
													},
													"additionalItems": false
												},
												"types": {
													"type": "array",
													"items": {
														"$ref": "#/$defs/typeModifiers"
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'typeProperty'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"typeProperty"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"public",
															"readonly",
															"requiresQuotes"
														]
													},
													"additionalItems": false
												},
												"types": {
													"type": "array",
													"items": {
														"$ref": "#/$defs/typeModifiers"
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'parameterProperty'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"parameterProperty"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"private",
															"protected",
															"public",
															"readonly"
														]
													},
													"additionalItems": false
												},
												"types": {
													"type": "array",
													"items": {
														"$ref": "#/$defs/typeModifiers"
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'property'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"property"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"abstract",
															"private",
															"#private",
															"protected",
															"public",
															"readonly",
															"requiresQuotes",
															"static",
															"override",
															"async"
														]
													},
													"additionalItems": false
												},
												"types": {
													"type": "array",
													"items": {
														"$ref": "#/$defs/typeModifiers"
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'classMethod'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"classMethod"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"abstract",
															"private",
															"#private",
															"protected",
															"public",
															"requiresQuotes",
															"static",
															"override",
															"async"
														]
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'objectLiteralMethod'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"objectLiteralMethod"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"public",
															"requiresQuotes",
															"async"
														]
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'typeMethod'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"typeMethod"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"public",
															"requiresQuotes"
														]
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'method'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"method"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"abstract",
															"private",
															"#private",
															"protected",
															"public",
															"requiresQuotes",
															"static",
															"override",
															"async"
														]
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'classicAccessor'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"classicAccessor"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"abstract",
															"private",
															"protected",
															"public",
															"requiresQuotes",
															"static",
															"override"
														]
													},
													"additionalItems": false
												},
												"types": {
													"type": "array",
													"items": {
														"$ref": "#/$defs/typeModifiers"
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'autoAccessor'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"autoAccessor"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"abstract",
															"private",
															"protected",
															"public",
															"requiresQuotes",
															"static",
															"override"
														]
													},
													"additionalItems": false
												},
												"types": {
													"type": "array",
													"items": {
														"$ref": "#/$defs/typeModifiers"
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'accessor'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"accessor"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"abstract",
															"private",
															"protected",
															"public",
															"requiresQuotes",
															"static",
															"override"
														]
													},
													"additionalItems": false
												},
												"types": {
													"type": "array",
													"items": {
														"$ref": "#/$defs/typeModifiers"
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'enumMember'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"enumMember"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"requiresQuotes"
														]
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'typeLike'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"typeLike"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"abstract",
															"exported",
															"unused"
														]
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'class'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"class"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"abstract",
															"exported",
															"unused"
														]
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'interface'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"interface"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"exported",
															"unused"
														]
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'typeAlias'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"typeAlias"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"exported",
															"unused"
														]
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'enum'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"enum"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"exported",
															"unused"
														]
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'typeParameter'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"typeParameter"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"unused"
														]
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Selector 'import'",
											"properties": {
												"format": {
													"$ref": "#/$defs/formatOptionsConfig"
												},
												"custom": {
													"$ref": "#/$defs/matchRegexConfig"
												},
												"leadingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"trailingUnderscore": {
													"$ref": "#/$defs/underscoreOptions"
												},
												"prefix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"suffix": {
													"$ref": "#/$defs/prefixSuffixConfig"
												},
												"failureMessage": {
													"type": "string"
												},
												"filter": {
													"oneOf": [
														{
															"type": "string",
															"minLength": 1
														},
														{
															"$ref": "#/$defs/matchRegexConfig"
														}
													]
												},
												"selector": {
													"type": "string",
													"enum": [
														"import"
													]
												},
												"modifiers": {
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"default",
															"namespace"
														]
													},
													"additionalItems": false
												}
											},
											"required": [
												"selector",
												"format"
											],
											"additionalProperties": false
										}
									]
								},
								"additionalItems": false
							}
						}
					},
					"no-array-constructor": {
						"defaultOptions": [],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow generic `Array` constructors",
								"recommended": "recommended",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/no-array-constructor"
							},
							"fixable": "code",
							"messages": {
								"useLiteral": "The array literal notation [] is preferable."
							},
							"schema": []
						}
					},
					"no-array-delete": {
						"defaultOptions": [],
						"meta": {
							"hasSuggestions": true,
							"type": "problem",
							"docs": {
								"description": "Disallow using the `delete` operator on array values",
								"recommended": "strict",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-array-delete"
							},
							"messages": {
								"noArrayDelete": "Using the `delete` operator with an array expression is unsafe.",
								"useSplice": "Use `array.splice()` instead."
							},
							"schema": []
						}
					},
					"no-base-to-string": {
						"defaultOptions": [
							{
								"ignoredTypeNames": [
									"Error",
									"RegExp",
									"URL",
									"URLSearchParams"
								]
							}
						],
						"meta": {
							"docs": {
								"description": "Require `.toString()` to only be called on objects which provide useful information when stringified",
								"recommended": "recommended",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-base-to-string"
							},
							"messages": {
								"baseToString": "'{{name}}' {{certainty}} evaluate to '[object Object]' when stringified."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"ignoredTypeNames": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									},
									"additionalProperties": false
								}
							],
							"type": "suggestion"
						}
					},
					"no-confusing-non-null-assertion": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow non-null assertion in locations that may be confusing",
								"recommended": "stylistic",
								"url": "https://typescript-eslint.io/rules/no-confusing-non-null-assertion"
							},
							"hasSuggestions": true,
							"messages": {
								"confusingEqual": "Confusing combinations of non-null assertion and equal test like \"a! == b\", which looks very similar to not equal \"a !== b\".",
								"confusingAssign": "Confusing combinations of non-null assertion and equal test like \"a! = b\", which looks very similar to not equal \"a != b\".",
								"notNeedInEqualTest": "Unnecessary non-null assertion (!) in equal test.",
								"notNeedInAssign": "Unnecessary non-null assertion (!) in assignment left hand.",
								"wrapUpLeft": "Wrap up left hand to avoid putting non-null assertion \"!\" and \"=\" together."
							},
							"schema": []
						}
					},
					"no-confusing-void-expression": {
						"defaultOptions": [
							{
								"ignoreArrowShorthand": false,
								"ignoreVoidOperator": false
							}
						],
						"meta": {
							"docs": {
								"description": "Require expressions of type void to appear in statement position",
								"recommended": "strict",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-confusing-void-expression"
							},
							"messages": {
								"invalidVoidExpr": "Placing a void expression inside another expression is forbidden. Move it to its own statement instead.",
								"invalidVoidExprWrapVoid": "Void expressions used inside another expression must be moved to its own statement or marked explicitly with the `void` operator.",
								"invalidVoidExprArrow": "Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.",
								"invalidVoidExprArrowWrapVoid": "Void expressions returned from an arrow function shorthand must be marked explicitly with the `void` operator.",
								"invalidVoidExprReturn": "Returning a void expression from a function is forbidden. Please move it before the `return` statement.",
								"invalidVoidExprReturnLast": "Returning a void expression from a function is forbidden. Please remove the `return` statement.",
								"invalidVoidExprReturnWrapVoid": "Void expressions returned from a function must be marked explicitly with the `void` operator.",
								"voidExprWrapVoid": "Mark with an explicit `void` operator."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"ignoreArrowShorthand": {
											"type": "boolean"
										},
										"ignoreVoidOperator": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							],
							"type": "problem",
							"fixable": "code",
							"hasSuggestions": true
						}
					},
					"no-dupe-class-members": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow duplicate class members",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/no-dupe-class-members"
							},
							"schema": [],
							"messages": {
								"unexpected": "Duplicate name '{{name}}'."
							}
						}
					},
					"no-duplicate-enum-values": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow duplicate enum member values",
								"recommended": "recommended",
								"url": "https://typescript-eslint.io/rules/no-duplicate-enum-values"
							},
							"hasSuggestions": false,
							"messages": {
								"duplicateValue": "Duplicate enum member value {{value}}."
							},
							"schema": []
						}
					},
					"no-duplicate-type-constituents": {
						"defaultOptions": [
							{
								"ignoreIntersections": false,
								"ignoreUnions": false
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow duplicate constituents of union or intersection types",
								"recommended": "recommended",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-duplicate-type-constituents"
							},
							"fixable": "code",
							"messages": {
								"duplicate": "{{type}} type constituent is duplicated with {{previous}}."
							},
							"schema": [
								{
									"additionalProperties": false,
									"type": "object",
									"properties": {
										"ignoreIntersections": {
											"type": "boolean"
										},
										"ignoreUnions": {
											"type": "boolean"
										}
									}
								}
							]
						}
					},
					"no-dynamic-delete": {
						"defaultOptions": [],
						"meta": {
							"docs": {
								"description": "Disallow using the `delete` operator on computed key expressions",
								"recommended": "strict",
								"url": "https://typescript-eslint.io/rules/no-dynamic-delete"
							},
							"fixable": "code",
							"messages": {
								"dynamicDelete": "Do not delete dynamically computed property keys."
							},
							"schema": [],
							"type": "suggestion"
						}
					},
					"no-empty-function": {
						"defaultOptions": [
							{
								"allow": []
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow empty functions",
								"recommended": "stylistic",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/no-empty-function"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allow": {
											"type": "array",
											"items": {
												"enum": [
													"functions",
													"arrowFunctions",
													"generatorFunctions",
													"methods",
													"generatorMethods",
													"getters",
													"setters",
													"constructors",
													"private-constructors",
													"protected-constructors",
													"asyncFunctions",
													"asyncMethods",
													"decoratedFunctions",
													"overrideMethods"
												],
												"type": "string"
											},
											"uniqueItems": true
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"unexpected": "Unexpected empty {{name}}."
							}
						}
					},
					"no-empty-interface": {
						"defaultOptions": [
							{
								"allowSingleExtends": false
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow the declaration of empty interfaces",
								"recommended": "stylistic",
								"url": "https://typescript-eslint.io/rules/no-empty-interface"
							},
							"fixable": "code",
							"hasSuggestions": true,
							"messages": {
								"noEmpty": "An empty interface is equivalent to `{}`.",
								"noEmptyWithSuper": "An interface declaring no members is equivalent to its supertype."
							},
							"schema": [
								{
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"allowSingleExtends": {
											"type": "boolean"
										}
									}
								}
							]
						}
					},
					"no-explicit-any": {
						"defaultOptions": [
							{
								"fixToUnknown": false,
								"ignoreRestArgs": false
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow the `any` type",
								"recommended": "recommended",
								"url": "https://typescript-eslint.io/rules/no-explicit-any"
							},
							"fixable": "code",
							"hasSuggestions": true,
							"messages": {
								"unexpectedAny": "Unexpected any. Specify a different type.",
								"suggestUnknown": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.",
								"suggestNever": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
							},
							"schema": [
								{
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"fixToUnknown": {
											"description": "Whether to enable auto-fixing in which the `any` type is converted to the `unknown` type.",
											"type": "boolean"
										},
										"ignoreRestArgs": {
											"description": "Whether to ignore rest parameter arrays.",
											"type": "boolean"
										}
									}
								}
							]
						}
					},
					"no-extra-non-null-assertion": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow extra non-null assertions",
								"recommended": "recommended",
								"url": "https://typescript-eslint.io/rules/no-extra-non-null-assertion"
							},
							"fixable": "code",
							"schema": [],
							"messages": {
								"noExtraNonNullAssertion": "Forbidden extra non-null assertion."
							}
						}
					},
					"no-extra-parens": {
						"defaultOptions": [
							"all"
						],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/no-extra-parens"
							],
							"type": "layout",
							"docs": {
								"description": "Disallow unnecessary parentheses",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/no-extra-parens"
							},
							"fixable": "code",
							"schema": {
								"anyOf": [
									{
										"type": "array",
										"items": [
											{
												"enum": [
													"functions"
												]
											}
										],
										"minItems": 0,
										"maxItems": 1
									},
									{
										"type": "array",
										"items": [
											{
												"enum": [
													"all"
												]
											},
											{
												"type": "object",
												"properties": {
													"conditionalAssign": {
														"type": "boolean"
													},
													"ternaryOperandBinaryExpressions": {
														"type": "boolean"
													},
													"nestedBinaryExpressions": {
														"type": "boolean"
													},
													"returnAssign": {
														"type": "boolean"
													},
													"ignoreJSX": {
														"enum": [
															"none",
															"all",
															"single-line",
															"multi-line"
														]
													},
													"enforceForArrowConditionals": {
														"type": "boolean"
													},
													"enforceForSequenceExpressions": {
														"type": "boolean"
													},
													"enforceForNewInMemberExpressions": {
														"type": "boolean"
													},
													"enforceForFunctionPrototypeMethods": {
														"type": "boolean"
													},
													"allowParensAfterCommentPattern": {
														"type": "string"
													}
												},
												"additionalProperties": false
											}
										],
										"minItems": 0,
										"maxItems": 2
									}
								]
							},
							"messages": {
								"unexpected": "Unnecessary parentheses around expression."
							}
						}
					},
					"no-extra-semi": {
						"defaultOptions": [],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/no-extra-semi"
							],
							"type": "suggestion",
							"docs": {
								"description": "Disallow unnecessary semicolons",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/no-extra-semi"
							},
							"fixable": "code",
							"schema": [],
							"messages": {
								"unexpected": "Unnecessary semicolon."
							}
						}
					},
					"no-extraneous-class": {
						"defaultOptions": [
							{
								"allowConstructorOnly": false,
								"allowEmpty": false,
								"allowStaticOnly": false,
								"allowWithDecorator": false
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow classes used as namespaces",
								"recommended": "strict",
								"url": "https://typescript-eslint.io/rules/no-extraneous-class"
							},
							"schema": [
								{
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"allowConstructorOnly": {
											"description": "Whether to allow extraneous classes that contain only a constructor.",
											"type": "boolean"
										},
										"allowEmpty": {
											"description": "Whether to allow extraneous classes that have no body (i.e. are empty).",
											"type": "boolean"
										},
										"allowStaticOnly": {
											"description": "Whether to allow extraneous classes that only contain static members.",
											"type": "boolean"
										},
										"allowWithDecorator": {
											"description": "Whether to allow extraneous classes that include a decorator.",
											"type": "boolean"
										}
									}
								}
							],
							"messages": {
								"empty": "Unexpected empty class.",
								"onlyStatic": "Unexpected class with only static properties.",
								"onlyConstructor": "Unexpected class with only a constructor."
							}
						}
					},
					"no-floating-promises": {
						"defaultOptions": [
							{
								"ignoreVoid": true,
								"ignoreIIFE": false,
								"allowForKnownSafePromises": []
							}
						],
						"meta": {
							"docs": {
								"description": "Require Promise-like statements to be handled appropriately",
								"recommended": "recommended",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-floating-promises"
							},
							"hasSuggestions": true,
							"messages": {
								"floating": "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler.",
								"floatingFixAwait": "Add await operator.",
								"floatingVoid": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
								"floatingFixVoid": "Add void operator to ignore.",
								"floatingUselessRejectionHandler": "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler. A rejection handler that is not a function will be ignored.",
								"floatingUselessRejectionHandlerVoid": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator. A rejection handler that is not a function will be ignored.",
								"floatingPromiseArray": "An array of Promises may be unintentional. Consider handling the promises' fulfillment or rejection with Promise.all or similar.",
								"floatingPromiseArrayVoid": "An array of Promises may be unintentional. Consider handling the promises' fulfillment or rejection with Promise.all or similar, or explicitly marking the expression as ignored with the `void` operator."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"ignoreVoid": {
											"description": "Whether to ignore `void` expressions.",
											"type": "boolean"
										},
										"ignoreIIFE": {
											"description": "Whether to ignore async IIFEs (Immediately Invoked Function Expressions).",
											"type": "boolean"
										},
										"allowForKnownSafePromises": {
											"type": "array",
											"items": {
												"oneOf": [
													{
														"type": "string"
													},
													{
														"type": "object",
														"additionalProperties": false,
														"properties": {
															"from": {
																"type": "string",
																"enum": [
																	"file"
																]
															},
															"name": {
																"oneOf": [
																	{
																		"type": "string"
																	},
																	{
																		"type": "array",
																		"minItems": 1,
																		"uniqueItems": true,
																		"items": {
																			"type": "string"
																		}
																	}
																]
															},
															"path": {
																"type": "string"
															}
														},
														"required": [
															"from",
															"name"
														]
													},
													{
														"type": "object",
														"additionalProperties": false,
														"properties": {
															"from": {
																"type": "string",
																"enum": [
																	"lib"
																]
															},
															"name": {
																"oneOf": [
																	{
																		"type": "string"
																	},
																	{
																		"type": "array",
																		"minItems": 1,
																		"uniqueItems": true,
																		"items": {
																			"type": "string"
																		}
																	}
																]
															}
														},
														"required": [
															"from",
															"name"
														]
													},
													{
														"type": "object",
														"additionalProperties": false,
														"properties": {
															"from": {
																"type": "string",
																"enum": [
																	"package"
																]
															},
															"name": {
																"oneOf": [
																	{
																		"type": "string"
																	},
																	{
																		"type": "array",
																		"minItems": 1,
																		"uniqueItems": true,
																		"items": {
																			"type": "string"
																		}
																	}
																]
															},
															"package": {
																"type": "string"
															}
														},
														"required": [
															"from",
															"name",
															"package"
														]
													}
												]
											}
										}
									},
									"additionalProperties": false
								}
							],
							"type": "problem"
						}
					},
					"no-for-in-array": {
						"defaultOptions": [],
						"meta": {
							"docs": {
								"description": "Disallow iterating over an array with a for-in loop",
								"recommended": "recommended",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-for-in-array"
							},
							"messages": {
								"forInViolation": "For-in loops over arrays skips holes, returns indices as strings, and may visit the prototype chain or other enumerable properties. Use a more robust iteration method such as for-of or array.forEach instead."
							},
							"schema": [],
							"type": "problem"
						}
					},
					"no-implied-eval": {
						"defaultOptions": [],
						"meta": {
							"docs": {
								"description": "Disallow the use of `eval()`-like methods",
								"recommended": "recommended",
								"extendsBaseRule": true,
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-implied-eval"
							},
							"messages": {
								"noImpliedEvalError": "Implied eval. Consider passing a function.",
								"noFunctionConstructor": "Implied eval. Do not use the Function constructor to create functions."
							},
							"schema": [],
							"type": "suggestion"
						}
					},
					"no-import-type-side-effects": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers",
								"url": "https://typescript-eslint.io/rules/no-import-type-side-effects"
							},
							"fixable": "code",
							"messages": {
								"useTopLevelQualifier": "TypeScript will only remove the inline type specifiers which will leave behind a side effect import at runtime. Convert this to a top-level type qualifier to properly remove the entire import."
							},
							"schema": []
						}
					},
					"no-inferrable-types": {
						"defaultOptions": [
							{
								"ignoreParameters": false,
								"ignoreProperties": false
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean",
								"recommended": "stylistic",
								"url": "https://typescript-eslint.io/rules/no-inferrable-types"
							},
							"fixable": "code",
							"messages": {
								"noInferrableType": "Type {{type}} trivially inferred from a {{type}} literal, remove type annotation."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"ignoreParameters": {
											"type": "boolean"
										},
										"ignoreProperties": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"no-invalid-this": {
						"defaultOptions": [
							{
								"capIsConstructor": true
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow `this` keywords outside of classes or class-like objects",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/no-invalid-this"
							},
							"messages": {
								"unexpectedThis": "Unexpected 'this'."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"capIsConstructor": {
											"type": "boolean",
											"default": true
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"no-invalid-void-type": {
						"defaultOptions": [
							{
								"allowInGenericTypeArguments": true,
								"allowAsThisParameter": false
							}
						],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow `void` type outside of generic or return types",
								"recommended": "strict",
								"url": "https://typescript-eslint.io/rules/no-invalid-void-type"
							},
							"messages": {
								"invalidVoidForGeneric": "{{ generic }} may not have void as a type argument.",
								"invalidVoidNotReturnOrGeneric": "void is only valid as a return type or generic type argument.",
								"invalidVoidNotReturn": "void is only valid as a return type.",
								"invalidVoidNotReturnOrThisParam": "void is only valid as return type or type of `this` parameter.",
								"invalidVoidNotReturnOrThisParamOrGeneric": "void is only valid as a return type or generic type argument or the type of a `this` parameter.",
								"invalidVoidUnionConstituent": "void is not valid as a constituent in a union type"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowInGenericTypeArguments": {
											"oneOf": [
												{
													"type": "boolean"
												},
												{
													"type": "array",
													"items": {
														"type": "string"
													},
													"minItems": 1
												}
											]
										},
										"allowAsThisParameter": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"no-loop-func": {
						"defaultOptions": [],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow function declarations that contain unsafe references inside loop statements",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/no-loop-func"
							},
							"schema": [],
							"messages": {
								"unsafeRefs": "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}."
							}
						}
					},
					"no-loss-of-precision": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow literal numbers that lose precision",
								"recommended": "recommended",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/no-loss-of-precision"
							},
							"schema": [],
							"messages": {
								"noLossOfPrecision": "This number literal will lose precision at runtime."
							}
						}
					},
					"no-magic-numbers": {
						"defaultOptions": [
							{
								"ignore": [],
								"ignoreArrayIndexes": false,
								"enforceConst": false,
								"detectObjects": false,
								"ignoreNumericLiteralTypes": false,
								"ignoreEnums": false,
								"ignoreReadonlyClassProperties": false
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow magic numbers",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/no-magic-numbers"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"detectObjects": {
											"type": "boolean",
											"default": false
										},
										"enforceConst": {
											"type": "boolean",
											"default": false
										},
										"ignore": {
											"type": "array",
											"items": {
												"anyOf": [
													{
														"type": "number"
													},
													{
														"type": "string",
														"pattern": "^[+-]?(?:0|[1-9][0-9]*)n$"
													}
												]
											},
											"uniqueItems": true
										},
										"ignoreArrayIndexes": {
											"type": "boolean",
											"default": false
										},
										"ignoreDefaultValues": {
											"type": "boolean",
											"default": false
										},
										"ignoreClassFieldInitialValues": {
											"type": "boolean",
											"default": false
										},
										"ignoreNumericLiteralTypes": {
											"type": "boolean"
										},
										"ignoreEnums": {
											"type": "boolean"
										},
										"ignoreReadonlyClassProperties": {
											"type": "boolean"
										},
										"ignoreTypeIndexes": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"useConst": "Number constants declarations must use 'const'.",
								"noMagic": "No magic number: {{raw}}."
							}
						}
					},
					"no-meaningless-void-operator": {
						"defaultOptions": [
							{
								"checkNever": false
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow the `void` operator except when used to discard a value",
								"recommended": "strict",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-meaningless-void-operator"
							},
							"fixable": "code",
							"hasSuggestions": true,
							"messages": {
								"meaninglessVoidOperator": "void operator shouldn't be used on {{type}}; it should convey that a return value is being ignored",
								"removeVoid": "Remove 'void'"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"checkNever": {
											"type": "boolean",
											"default": false
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"no-misused-new": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Enforce valid definition of `new` and `constructor`",
								"recommended": "recommended",
								"url": "https://typescript-eslint.io/rules/no-misused-new"
							},
							"schema": [],
							"messages": {
								"errorMessageInterface": "Interfaces cannot be constructed, only classes.",
								"errorMessageClass": "Class cannot have method named `new`."
							}
						}
					},
					"no-misused-promises": {
						"defaultOptions": [
							{
								"checksConditionals": true,
								"checksVoidReturn": true,
								"checksSpreads": true
							}
						],
						"meta": {
							"docs": {
								"description": "Disallow Promises in places not designed to handle them",
								"recommended": "recommended",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-misused-promises"
							},
							"messages": {
								"voidReturnArgument": "Promise returned in function argument where a void return was expected.",
								"voidReturnVariable": "Promise-returning function provided to variable where a void return was expected.",
								"voidReturnProperty": "Promise-returning function provided to property where a void return was expected.",
								"voidReturnReturnValue": "Promise-returning function provided to return value where a void return was expected.",
								"voidReturnAttribute": "Promise-returning function provided to attribute where a void return was expected.",
								"conditional": "Expected non-Promise value in a boolean conditional.",
								"spread": "Expected a non-Promise value to be spreaded in an object."
							},
							"schema": [
								{
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"checksConditionals": {
											"type": "boolean"
										},
										"checksVoidReturn": {
											"oneOf": [
												{
													"type": "boolean"
												},
												{
													"additionalProperties": false,
													"properties": {
														"arguments": {
															"type": "boolean"
														},
														"attributes": {
															"type": "boolean"
														},
														"properties": {
															"type": "boolean"
														},
														"returns": {
															"type": "boolean"
														},
														"variables": {
															"type": "boolean"
														}
													},
													"type": "object"
												}
											]
										},
										"checksSpreads": {
											"type": "boolean"
										}
									}
								}
							],
							"type": "problem"
						}
					},
					"no-mixed-enums": {
						"defaultOptions": [],
						"meta": {
							"docs": {
								"description": "Disallow enums from having both number and string members",
								"recommended": "strict",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-mixed-enums"
							},
							"messages": {
								"mixed": "Mixing number and string enums can be confusing."
							},
							"schema": [],
							"type": "problem"
						}
					},
					"no-namespace": {
						"defaultOptions": [
							{
								"allowDeclarations": false,
								"allowDefinitionFiles": true
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow TypeScript namespaces",
								"recommended": "recommended",
								"url": "https://typescript-eslint.io/rules/no-namespace"
							},
							"messages": {
								"moduleSyntaxIsPreferred": "ES2015 module syntax is preferred over namespaces."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowDeclarations": {
											"description": "Whether to allow `declare` with custom TypeScript namespaces.",
											"type": "boolean"
										},
										"allowDefinitionFiles": {
											"description": "Whether to allow `declare` with custom TypeScript namespaces inside definition files.",
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"no-non-null-asserted-nullish-coalescing": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow non-null assertions in the left operand of a nullish coalescing operator",
								"recommended": "strict",
								"url": "https://typescript-eslint.io/rules/no-non-null-asserted-nullish-coalescing"
							},
							"messages": {
								"noNonNullAssertedNullishCoalescing": "The nullish coalescing operator is designed to handle undefined and null - using a non-null assertion is not needed.",
								"suggestRemovingNonNull": "Remove the non-null assertion."
							},
							"schema": [],
							"hasSuggestions": true
						}
					},
					"no-non-null-asserted-optional-chain": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow non-null assertions after an optional chain expression",
								"recommended": "recommended",
								"url": "https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain"
							},
							"hasSuggestions": true,
							"messages": {
								"noNonNullOptionalChain": "Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.",
								"suggestRemovingNonNull": "You should remove the non-null assertion."
							},
							"schema": []
						}
					},
					"no-non-null-assertion": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow non-null assertions using the `!` postfix operator",
								"recommended": "strict",
								"url": "https://typescript-eslint.io/rules/no-non-null-assertion"
							},
							"hasSuggestions": true,
							"messages": {
								"noNonNull": "Forbidden non-null assertion.",
								"suggestOptionalChain": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
							},
							"schema": []
						}
					},
					"no-redeclare": {
						"defaultOptions": [
							{
								"builtinGlobals": true,
								"ignoreDeclarationMerge": true
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow variable redeclaration",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/no-redeclare"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"builtinGlobals": {
											"type": "boolean"
										},
										"ignoreDeclarationMerge": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"redeclared": "'{{id}}' is already defined.",
								"redeclaredAsBuiltin": "'{{id}}' is already defined as a built-in global variable.",
								"redeclaredBySyntax": "'{{id}}' is already defined by a variable declaration."
							}
						}
					},
					"no-redundant-type-constituents": {
						"defaultOptions": [],
						"meta": {
							"docs": {
								"description": "Disallow members of unions and intersections that do nothing or override type information",
								"recommended": "recommended",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-redundant-type-constituents"
							},
							"messages": {
								"literalOverridden": "{{literal}} is overridden by {{primitive}} in this union type.",
								"primitiveOverridden": "{{primitive}} is overridden by the {{literal}} in this intersection type.",
								"overridden": "'{{typeName}}' is overridden by other types in this {{container}} type.",
								"overrides": "'{{typeName}}' overrides all other types in this {{container}} type."
							},
							"schema": [],
							"type": "suggestion"
						}
					},
					"no-require-imports": {
						"defaultOptions": [
							{
								"allow": []
							}
						],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow invocation of `require()`",
								"url": "https://typescript-eslint.io/rules/no-require-imports"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allow": {
											"type": "array",
											"items": {
												"type": "string"
											},
											"description": "Patterns of import paths to allow requiring from."
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"noRequireImports": "A `require()` style import is forbidden."
							}
						}
					},
					"no-restricted-imports": {
						"defaultOptions": [],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow specified modules when loaded by `import`",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/no-restricted-imports"
							},
							"messages": {
								"path": "'{{importSource}}' import is restricted from being used.",
								"pathWithCustomMessage": "'{{importSource}}' import is restricted from being used. {{customMessage}}",
								"patterns": "'{{importSource}}' import is restricted from being used by a pattern.",
								"patternWithCustomMessage": "'{{importSource}}' import is restricted from being used by a pattern. {{customMessage}}",
								"patternAndImportName": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern.",
								"patternAndImportNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
								"patternAndEverything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern.",
								"patternAndEverythingWithRegexImportName": "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used.",
								"patternAndEverythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
								"patternAndEverythingWithRegexImportNameAndCustomMessage": "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used. {{customMessage}}",
								"everything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
								"everythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}",
								"importName": "'{{importName}}' import from '{{importSource}}' is restricted.",
								"importNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted. {{customMessage}}",
								"allowedImportName": "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed.",
								"allowedImportNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed. {{customMessage}}",
								"everythingWithAllowImportNames": "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed.",
								"everythingWithAllowImportNamesAndCustomMessage": "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed. {{customMessage}}",
								"allowedImportNamePattern": "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'.",
								"allowedImportNamePatternWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'. {{customMessage}}",
								"everythingWithAllowedImportNamePattern": "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed.",
								"everythingWithAllowedImportNamePatternWithCustomMessage": "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed. {{customMessage}}"
							},
							"schema": {
								"anyOf": [
									{
										"type": "array",
										"items": {
											"anyOf": [
												{
													"type": "string"
												},
												{
													"type": "object",
													"additionalProperties": false,
													"properties": {
														"name": {
															"type": "string"
														},
														"message": {
															"type": "string",
															"minLength": 1
														},
														"importNames": {
															"type": "array",
															"items": {
																"type": "string"
															}
														},
														"allowImportNames": {
															"type": "array",
															"items": {
																"type": "string"
															}
														},
														"allowTypeImports": {
															"type": "boolean",
															"description": "Disallow value imports, but allow type-only imports."
														}
													},
													"required": [
														"name"
													]
												}
											]
										},
										"uniqueItems": true
									},
									{
										"type": "array",
										"items": [
											{
												"type": "object",
												"properties": {
													"paths": {
														"type": "array",
														"items": {
															"anyOf": [
																{
																	"type": "string"
																},
																{
																	"type": "object",
																	"additionalProperties": false,
																	"properties": {
																		"name": {
																			"type": "string"
																		},
																		"message": {
																			"type": "string",
																			"minLength": 1
																		},
																		"importNames": {
																			"type": "array",
																			"items": {
																				"type": "string"
																			}
																		},
																		"allowImportNames": {
																			"type": "array",
																			"items": {
																				"type": "string"
																			}
																		},
																		"allowTypeImports": {
																			"type": "boolean",
																			"description": "Disallow value imports, but allow type-only imports."
																		}
																	},
																	"required": [
																		"name"
																	]
																}
															]
														},
														"uniqueItems": true
													},
													"patterns": {
														"anyOf": [
															{
																"type": "array",
																"items": {
																	"type": "string"
																},
																"uniqueItems": true
															},
															{
																"type": "array",
																"items": {
																	"type": "object",
																	"additionalProperties": false,
																	"properties": {
																		"importNames": {
																			"type": "array",
																			"items": {
																				"type": "string"
																			},
																			"minItems": 1,
																			"uniqueItems": true
																		},
																		"allowImportNames": {
																			"type": "array",
																			"items": {
																				"type": "string"
																			},
																			"minItems": 1,
																			"uniqueItems": true
																		},
																		"group": {
																			"type": "array",
																			"items": {
																				"type": "string"
																			},
																			"minItems": 1,
																			"uniqueItems": true
																		},
																		"importNamePattern": {
																			"type": "string"
																		},
																		"allowImportNamePattern": {
																			"type": "string"
																		},
																		"message": {
																			"type": "string",
																			"minLength": 1
																		},
																		"caseSensitive": {
																			"type": "boolean"
																		},
																		"allowTypeImports": {
																			"type": "boolean",
																			"description": "Disallow value imports, but allow type-only imports."
																		}
																	},
																	"required": [
																		"group"
																	]
																},
																"uniqueItems": true
															}
														]
													}
												},
												"additionalProperties": false
											}
										],
										"additionalItems": false
									}
								]
							}
						}
					},
					"no-shadow": {
						"defaultOptions": [
							{
								"allow": [],
								"builtinGlobals": false,
								"hoist": "functions",
								"ignoreOnInitialization": false,
								"ignoreTypeValueShadow": true,
								"ignoreFunctionTypeParameterNameValueShadow": true
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow variable declarations from shadowing variables declared in the outer scope",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/no-shadow"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"builtinGlobals": {
											"type": "boolean"
										},
										"hoist": {
											"type": "string",
											"enum": [
												"all",
												"functions",
												"never"
											]
										},
										"allow": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"ignoreOnInitialization": {
											"type": "boolean"
										},
										"ignoreTypeValueShadow": {
											"type": "boolean"
										},
										"ignoreFunctionTypeParameterNameValueShadow": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"noShadow": "'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.",
								"noShadowGlobal": "'{{name}}' is already a global variable."
							}
						}
					},
					"no-this-alias": {
						"defaultOptions": [
							{
								"allowDestructuring": true,
								"allowedNames": []
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow aliasing `this`",
								"recommended": "recommended",
								"url": "https://typescript-eslint.io/rules/no-this-alias"
							},
							"schema": [
								{
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"allowDestructuring": {
											"description": "Whether to ignore destructurings, such as `const { props, state } = this`.",
											"type": "boolean"
										},
										"allowedNames": {
											"description": "Names to ignore, such as [\"self\"] for `const self = this;`.",
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									}
								}
							],
							"messages": {
								"thisAssignment": "Unexpected aliasing of 'this' to local variable.",
								"thisDestructure": "Unexpected aliasing of members of 'this' to local variables."
							}
						}
					},
					"no-throw-literal": {
						"defaultOptions": [
							{
								"allowThrowingAny": true,
								"allowThrowingUnknown": true
							}
						],
						"meta": {
							"type": "problem",
							"deprecated": true,
							"replacedBy": [
								"@typescript-eslint/only-throw-error"
							],
							"docs": {
								"description": "Disallow throwing literals as exceptions",
								"extendsBaseRule": true,
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-throw-literal"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowThrowingAny": {
											"type": "boolean"
										},
										"allowThrowingUnknown": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"object": "Expected an error object to be thrown.",
								"undef": "Do not throw undefined."
							}
						}
					},
					"no-type-alias": {
						"defaultOptions": [
							{
								"allowAliases": "never",
								"allowCallbacks": "never",
								"allowConditionalTypes": "never",
								"allowConstructors": "never",
								"allowLiterals": "never",
								"allowMappedTypes": "never",
								"allowTupleTypes": "never",
								"allowGenerics": "never"
							}
						],
						"meta": {
							"deprecated": true,
							"type": "suggestion",
							"docs": {
								"description": "Disallow type aliases",
								"url": "https://typescript-eslint.io/rules/no-type-alias"
							},
							"messages": {
								"noTypeAlias": "Type {{alias}} are not allowed.",
								"noCompositionAlias": "{{typeName}} in {{compositionType}} types are not allowed."
							},
							"schema": [
								{
									"$defs": {
										"expandedOptions": {
											"type": "string",
											"enum": [
												"always",
												"never",
												"in-unions",
												"in-intersections",
												"in-unions-and-intersections"
											]
										},
										"simpleOptions": {
											"type": "string",
											"enum": [
												"always",
												"never"
											]
										}
									},
									"type": "object",
									"properties": {
										"allowAliases": {
											"description": "Whether to allow direct one-to-one type aliases.",
											"$ref": "#/items/0/$defs/expandedOptions"
										},
										"allowCallbacks": {
											"description": "Whether to allow type aliases for callbacks.",
											"$ref": "#/items/0/$defs/simpleOptions"
										},
										"allowConditionalTypes": {
											"description": "Whether to allow type aliases for conditional types.",
											"$ref": "#/items/0/$defs/simpleOptions"
										},
										"allowConstructors": {
											"description": "Whether to allow type aliases with constructors.",
											"$ref": "#/items/0/$defs/simpleOptions"
										},
										"allowLiterals": {
											"description": "Whether to allow type aliases with object literal types.",
											"$ref": "#/items/0/$defs/expandedOptions"
										},
										"allowMappedTypes": {
											"description": "Whether to allow type aliases with mapped types.",
											"$ref": "#/items/0/$defs/expandedOptions"
										},
										"allowTupleTypes": {
											"description": "Whether to allow type aliases with tuple types.",
											"$ref": "#/items/0/$defs/expandedOptions"
										},
										"allowGenerics": {
											"description": "Whether to allow type aliases with generic types.",
											"$ref": "#/items/0/$defs/simpleOptions"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"no-unnecessary-boolean-literal-compare": {
						"defaultOptions": [
							{
								"allowComparingNullableBooleansToTrue": true,
								"allowComparingNullableBooleansToFalse": true
							}
						],
						"meta": {
							"docs": {
								"description": "Disallow unnecessary equality comparisons against boolean literals",
								"recommended": "strict",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare"
							},
							"fixable": "code",
							"messages": {
								"direct": "This expression unnecessarily compares a boolean value to a boolean instead of using it directly.",
								"negated": "This expression unnecessarily compares a boolean value to a boolean instead of negating it.",
								"comparingNullableToTrueDirect": "This expression unnecessarily compares a nullable boolean value to true instead of using it directly.",
								"comparingNullableToTrueNegated": "This expression unnecessarily compares a nullable boolean value to true instead of negating it.",
								"comparingNullableToFalse": "This expression unnecessarily compares a nullable boolean value to false instead of using the ?? operator to provide a default."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowComparingNullableBooleansToTrue": {
											"description": "Whether to allow comparisons between nullable boolean variables and `true`.",
											"type": "boolean"
										},
										"allowComparingNullableBooleansToFalse": {
											"description": "Whether to allow comparisons between nullable boolean variables and `false`.",
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							],
							"type": "suggestion"
						}
					},
					"no-unnecessary-condition": {
						"defaultOptions": [
							{
								"allowConstantLoopConditions": false,
								"allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow conditionals where the type is always truthy or always falsy",
								"recommended": "strict",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-unnecessary-condition"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowConstantLoopConditions": {
											"description": "Whether to ignore constant loop conditions, such as `while (true)`.",
											"type": "boolean"
										},
										"allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
											"description": "Whether to not error when running with a tsconfig that has strictNullChecks turned.",
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							],
							"fixable": "code",
							"messages": {
								"alwaysTruthy": "Unnecessary conditional, value is always truthy.",
								"alwaysFalsy": "Unnecessary conditional, value is always falsy.",
								"alwaysTruthyFunc": "This callback should return a conditional, but return is always truthy.",
								"alwaysFalsyFunc": "This callback should return a conditional, but return is always falsy.",
								"neverNullish": "Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.",
								"alwaysNullish": "Unnecessary conditional, left-hand side of `??` operator is always `null` or `undefined`.",
								"literalBooleanExpression": "Unnecessary conditional, both sides of the expression are literal values.",
								"noOverlapBooleanExpression": "Unnecessary conditional, the types have no overlap.",
								"never": "Unnecessary conditional, value is `never`.",
								"neverOptionalChain": "Unnecessary optional chain on a non-nullish value.",
								"noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly."
							}
						}
					},
					"no-unnecessary-qualifier": {
						"defaultOptions": [],
						"meta": {
							"docs": {
								"description": "Disallow unnecessary namespace qualifiers",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-unnecessary-qualifier"
							},
							"fixable": "code",
							"messages": {
								"unnecessaryQualifier": "Qualifier is unnecessary since '{{ name }}' is in scope."
							},
							"schema": [],
							"type": "suggestion"
						}
					},
					"no-unnecessary-template-expression": {
						"defaultOptions": [],
						"meta": {
							"fixable": "code",
							"type": "suggestion",
							"docs": {
								"description": "Disallow unnecessary template expressions",
								"recommended": "strict",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-unnecessary-template-expression"
							},
							"messages": {
								"noUnnecessaryTemplateExpression": "Template literal expression is unnecessary and can be simplified."
							},
							"schema": []
						}
					},
					"no-unnecessary-type-arguments": {
						"defaultOptions": [],
						"meta": {
							"docs": {
								"description": "Disallow type arguments that are equal to the default",
								"recommended": "strict",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-unnecessary-type-arguments"
							},
							"fixable": "code",
							"messages": {
								"unnecessaryTypeParameter": "This is the default value for this type parameter, so it can be omitted."
							},
							"schema": [],
							"type": "suggestion"
						}
					},
					"no-unnecessary-type-assertion": {
						"defaultOptions": [
							{}
						],
						"meta": {
							"docs": {
								"description": "Disallow type assertions that do not change the type of an expression",
								"recommended": "recommended",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-unnecessary-type-assertion"
							},
							"fixable": "code",
							"messages": {
								"unnecessaryAssertion": "This assertion is unnecessary since it does not change the type of the expression.",
								"contextuallyUnnecessary": "This assertion is unnecessary since the receiver accepts the original type of the expression."
							},
							"schema": [
								{
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"typesToIgnore": {
											"description": "A list of type names to ignore.",
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									}
								}
							],
							"type": "suggestion"
						}
					},
					"no-unnecessary-type-constraint": {
						"defaultOptions": [],
						"meta": {
							"docs": {
								"description": "Disallow unnecessary constraints on generic types",
								"recommended": "recommended",
								"url": "https://typescript-eslint.io/rules/no-unnecessary-type-constraint"
							},
							"hasSuggestions": true,
							"messages": {
								"unnecessaryConstraint": "Constraining the generic type `{{name}}` to `{{constraint}}` does nothing and is unnecessary.",
								"removeUnnecessaryConstraint": "Remove the unnecessary `{{constraint}}` constraint."
							},
							"schema": [],
							"type": "suggestion"
						}
					},
					"no-unsafe-argument": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow calling a function with a value with type `any`",
								"recommended": "recommended",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-unsafe-argument"
							},
							"messages": {
								"unsafeArgument": "Unsafe argument of type `{{sender}}` assigned to a parameter of type `{{receiver}}`.",
								"unsafeTupleSpread": "Unsafe spread of a tuple type. The argument is of type `{{sender}}` and is assigned to a parameter of type `{{receiver}}`.",
								"unsafeArraySpread": "Unsafe spread of an `any` array type.",
								"unsafeSpread": "Unsafe spread of an `any` type."
							},
							"schema": []
						}
					},
					"no-unsafe-assignment": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow assigning a value with type `any` to variables and properties",
								"recommended": "recommended",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-unsafe-assignment"
							},
							"messages": {
								"anyAssignment": "Unsafe assignment of an `any` value.",
								"anyAssignmentThis": "Unsafe assignment of an `any` value. `this` is typed as `any`.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
								"unsafeArrayPattern": "Unsafe array destructuring of an `any` array value.",
								"unsafeArrayPatternFromTuple": "Unsafe array destructuring of a tuple element with an `any` value.",
								"unsafeAssignment": "Unsafe assignment of type {{sender}} to a variable of type {{receiver}}.",
								"unsafeArraySpread": "Unsafe spread of an `any` value in an array."
							},
							"schema": []
						}
					},
					"no-unsafe-call": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow calling a value with type `any`",
								"recommended": "recommended",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-unsafe-call"
							},
							"messages": {
								"unsafeCall": "Unsafe call of an `any` typed value.",
								"unsafeCallThis": "Unsafe call of an `any` typed value. `this` is typed as `any`.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
								"unsafeNew": "Unsafe construction of an any type value.",
								"unsafeTemplateTag": "Unsafe any typed template tag."
							},
							"schema": []
						}
					},
					"no-unsafe-declaration-merging": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow unsafe declaration merging",
								"recommended": "recommended",
								"requiresTypeChecking": false,
								"url": "https://typescript-eslint.io/rules/no-unsafe-declaration-merging"
							},
							"messages": {
								"unsafeMerging": "Unsafe declaration merging between classes and interfaces."
							},
							"schema": []
						}
					},
					"no-unsafe-enum-comparison": {
						"defaultOptions": [],
						"meta": {
							"hasSuggestions": true,
							"type": "suggestion",
							"docs": {
								"description": "Disallow comparing an enum value with a non-enum value",
								"recommended": "recommended",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-unsafe-enum-comparison"
							},
							"messages": {
								"mismatchedCase": "The case statement does not have a shared enum type with the switch predicate.",
								"mismatchedCondition": "The two values in this comparison do not have a shared enum type.",
								"replaceValueWithEnum": "Replace with an enum value comparison."
							},
							"schema": []
						}
					},
					"no-unsafe-member-access": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow member access on a value with type `any`",
								"recommended": "recommended",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-unsafe-member-access"
							},
							"messages": {
								"unsafeMemberExpression": "Unsafe member access {{property}} on an `any` value.",
								"unsafeThisMemberExpression": "Unsafe member access {{property}} on an `any` value. `this` is typed as `any`.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
								"unsafeComputedMemberAccess": "Computed name {{property}} resolves to an any value."
							},
							"schema": []
						}
					},
					"no-unsafe-return": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow returning a value with type `any` from a function",
								"recommended": "recommended",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-unsafe-return"
							},
							"messages": {
								"unsafeReturn": "Unsafe return of an `{{type}}` typed value.",
								"unsafeReturnThis": "Unsafe return of an `{{type}}` typed value. `this` is typed as `any`.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
								"unsafeReturnAssignment": "Unsafe return of type `{{sender}}` from function with return type `{{receiver}}`."
							},
							"schema": []
						}
					},
					"no-unsafe-unary-minus": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Require unary negation to take a number",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-unsafe-unary-minus"
							},
							"messages": {
								"unaryMinus": "Argument of unary negation should be assignable to number | bigint but is {{type}} instead."
							},
							"schema": []
						}
					},
					"no-unused-expressions": {
						"defaultOptions": [
							{
								"allowShortCircuit": false,
								"allowTernary": false,
								"allowTaggedTemplates": false
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow unused expressions",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/no-unused-expressions"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowShortCircuit": {
											"type": "boolean",
											"default": false
										},
										"allowTernary": {
											"type": "boolean",
											"default": false
										},
										"allowTaggedTemplates": {
											"type": "boolean",
											"default": false
										},
										"enforceForJSX": {
											"type": "boolean",
											"default": false
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"unusedExpression": "Expected an assignment or function call and instead saw an expression."
							}
						}
					},
					"no-unused-vars": {
						"defaultOptions": [
							{}
						],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow unused variables",
								"recommended": "recommended",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/no-unused-vars"
							},
							"schema": [
								{
									"oneOf": [
										{
											"type": "string",
											"enum": [
												"all",
												"local"
											]
										},
										{
											"type": "object",
											"properties": {
												"vars": {
													"type": "string",
													"enum": [
														"all",
														"local"
													]
												},
												"varsIgnorePattern": {
													"type": "string"
												},
												"args": {
													"type": "string",
													"enum": [
														"all",
														"after-used",
														"none"
													]
												},
												"ignoreRestSiblings": {
													"type": "boolean"
												},
												"argsIgnorePattern": {
													"type": "string"
												},
												"caughtErrors": {
													"type": "string",
													"enum": [
														"all",
														"none"
													]
												},
												"caughtErrorsIgnorePattern": {
													"type": "string"
												},
												"destructuredArrayIgnorePattern": {
													"type": "string"
												}
											},
											"additionalProperties": false
										}
									]
								}
							],
							"messages": {
								"unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}."
							}
						}
					},
					"no-use-before-define": {
						"defaultOptions": [
							{
								"functions": true,
								"classes": true,
								"enums": true,
								"variables": true,
								"typedefs": true,
								"ignoreTypeReferences": true,
								"allowNamedExports": false
							}
						],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow the use of variables before they are defined",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/no-use-before-define"
							},
							"messages": {
								"noUseBeforeDefine": "'{{name}}' was used before it was defined."
							},
							"schema": [
								{
									"oneOf": [
										{
											"type": "string",
											"enum": [
												"nofunc"
											]
										},
										{
											"type": "object",
											"properties": {
												"functions": {
													"type": "boolean"
												},
												"classes": {
													"type": "boolean"
												},
												"enums": {
													"type": "boolean"
												},
												"variables": {
													"type": "boolean"
												},
												"typedefs": {
													"type": "boolean"
												},
												"ignoreTypeReferences": {
													"type": "boolean"
												},
												"allowNamedExports": {
													"type": "boolean"
												}
											},
											"additionalProperties": false
										}
									]
								}
							]
						}
					},
					"no-useless-constructor": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow unnecessary constructors",
								"recommended": "strict",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/no-useless-constructor"
							},
							"schema": [],
							"messages": {
								"noUselessConstructor": "Useless constructor."
							}
						}
					},
					"no-useless-empty-export": {
						"defaultOptions": [],
						"meta": {
							"docs": {
								"description": "Disallow empty exports that don't change anything in a module file",
								"url": "https://typescript-eslint.io/rules/no-useless-empty-export"
							},
							"fixable": "code",
							"hasSuggestions": false,
							"messages": {
								"uselessExport": "Empty export does nothing and can be removed."
							},
							"schema": [],
							"type": "suggestion"
						}
					},
					"no-useless-template-literals": {
						"defaultOptions": [],
						"meta": {
							"fixable": "code",
							"type": "suggestion",
							"docs": {
								"description": "Disallow unnecessary template expressions",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/no-useless-template-literals"
							},
							"messages": {
								"noUnnecessaryTemplateExpression": "Template literal expression is unnecessary and can be simplified."
							},
							"schema": [],
							"deprecated": true,
							"replacedBy": [
								"@typescript-eslint/no-unnecessary-template-expression"
							]
						}
					},
					"no-var-requires": {
						"defaultOptions": [
							{
								"allow": []
							}
						],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow `require` statements except in import statements",
								"recommended": "recommended",
								"url": "https://typescript-eslint.io/rules/no-var-requires"
							},
							"messages": {
								"noVarReqs": "Require statement not part of import statement."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allow": {
											"type": "array",
											"items": {
												"type": "string"
											},
											"description": "Patterns of import paths to allow requiring from."
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"non-nullable-type-assertion-style": {
						"defaultOptions": [],
						"meta": {
							"docs": {
								"description": "Enforce non-null assertions over explicit type casts",
								"recommended": "stylistic",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/non-nullable-type-assertion-style"
							},
							"fixable": "code",
							"messages": {
								"preferNonNullAssertion": "Use a ! assertion to more succinctly remove null and undefined from the type."
							},
							"schema": [],
							"type": "suggestion"
						}
					},
					"object-curly-spacing": {
						"defaultOptions": [
							"never"
						],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/object-curly-spacing"
							],
							"type": "layout",
							"docs": {
								"description": "Enforce consistent spacing inside braces",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/object-curly-spacing"
							},
							"fixable": "whitespace",
							"schema": [
								{
									"enum": [
										"always",
										"never"
									]
								},
								{
									"type": "object",
									"properties": {
										"arraysInObjects": {
											"type": "boolean"
										},
										"objectsInObjects": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"requireSpaceBefore": "A space is required before '{{token}}'.",
								"requireSpaceAfter": "A space is required after '{{token}}'.",
								"unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
								"unexpectedSpaceAfter": "There should be no space after '{{token}}'."
							}
						}
					},
					"only-throw-error": {
						"defaultOptions": [
							{
								"allowThrowingAny": true,
								"allowThrowingUnknown": true
							}
						],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Disallow throwing non-`Error` values as exceptions",
								"recommended": "strict",
								"extendsBaseRule": "no-throw-literal",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/only-throw-error"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowThrowingAny": {
											"type": "boolean"
										},
										"allowThrowingUnknown": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"object": "Expected an error object to be thrown.",
								"undef": "Do not throw undefined."
							}
						}
					},
					"padding-line-between-statements": {
						"defaultOptions": [],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/padding-line-between-statements"
							],
							"type": "layout",
							"docs": {
								"description": "Require or disallow padding lines between statements",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/padding-line-between-statements"
							},
							"fixable": "whitespace",
							"hasSuggestions": false,
							"schema": {
								"$defs": {
									"paddingType": {
										"type": "string",
										"enum": [
											"any",
											"never",
											"always"
										]
									},
									"statementType": {
										"anyOf": [
											{
												"type": "string",
												"enum": [
													"*",
													"block-like",
													"exports",
													"require",
													"directive",
													"expression",
													"iife",
													"multiline-block-like",
													"multiline-expression",
													"multiline-const",
													"multiline-let",
													"multiline-var",
													"singleline-const",
													"singleline-let",
													"singleline-var",
													"block",
													"empty",
													"function",
													"break",
													"case",
													"class",
													"const",
													"continue",
													"debugger",
													"default",
													"do",
													"export",
													"for",
													"if",
													"import",
													"let",
													"return",
													"switch",
													"throw",
													"try",
													"var",
													"while",
													"with",
													"interface",
													"type"
												]
											},
											{
												"type": "array",
												"items": {
													"type": "string",
													"enum": [
														"*",
														"block-like",
														"exports",
														"require",
														"directive",
														"expression",
														"iife",
														"multiline-block-like",
														"multiline-expression",
														"multiline-const",
														"multiline-let",
														"multiline-var",
														"singleline-const",
														"singleline-let",
														"singleline-var",
														"block",
														"empty",
														"function",
														"break",
														"case",
														"class",
														"const",
														"continue",
														"debugger",
														"default",
														"do",
														"export",
														"for",
														"if",
														"import",
														"let",
														"return",
														"switch",
														"throw",
														"try",
														"var",
														"while",
														"with",
														"interface",
														"type"
													]
												},
												"minItems": 1,
												"uniqueItems": true,
												"additionalItems": false
											}
										]
									}
								},
								"type": "array",
								"additionalItems": false,
								"items": {
									"type": "object",
									"properties": {
										"blankLine": {
											"$ref": "#/$defs/paddingType"
										},
										"prev": {
											"$ref": "#/$defs/statementType"
										},
										"next": {
											"$ref": "#/$defs/statementType"
										}
									},
									"additionalProperties": false,
									"required": [
										"blankLine",
										"prev",
										"next"
									]
								}
							},
							"messages": {
								"unexpectedBlankLine": "Unexpected blank line before this statement.",
								"expectedBlankLine": "Expected blank line before this statement."
							}
						}
					},
					"parameter-properties": {
						"defaultOptions": [
							{
								"allow": [],
								"prefer": "class-property"
							}
						],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Require or disallow parameter properties in class constructors",
								"url": "https://typescript-eslint.io/rules/parameter-properties"
							},
							"messages": {
								"preferClassProperty": "Property {{parameter}} should be declared as a class property.",
								"preferParameterProperty": "Property {{parameter}} should be declared as a parameter property."
							},
							"schema": [
								{
									"$defs": {
										"modifier": {
											"type": "string",
											"enum": [
												"readonly",
												"private",
												"protected",
												"public",
												"private readonly",
												"protected readonly",
												"public readonly"
											]
										}
									},
									"type": "object",
									"properties": {
										"allow": {
											"type": "array",
											"items": {
												"$ref": "#/items/0/$defs/modifier"
											}
										},
										"prefer": {
											"type": "string",
											"enum": [
												"class-property",
												"parameter-property"
											]
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"prefer-as-const": {
						"defaultOptions": [],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Enforce the use of `as const` over literal type",
								"recommended": "recommended",
								"url": "https://typescript-eslint.io/rules/prefer-as-const"
							},
							"fixable": "code",
							"hasSuggestions": true,
							"messages": {
								"preferConstAssertion": "Expected a `const` instead of a literal type assertion.",
								"variableConstAssertion": "Expected a `const` assertion instead of a literal type annotation.",
								"variableSuggest": "You should use `as const` instead of type annotation."
							},
							"schema": []
						}
					},
					"prefer-destructuring": {
						"defaultOptions": [
							{
								"VariableDeclarator": {
									"array": true,
									"object": true
								},
								"AssignmentExpression": {
									"array": true,
									"object": true
								}
							},
							{}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Require destructuring from arrays and/or objects",
								"extendsBaseRule": true,
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/prefer-destructuring"
							},
							"schema": [
								{
									"oneOf": [
										{
											"type": "object",
											"properties": {
												"VariableDeclarator": {
													"type": "object",
													"properties": {
														"array": {
															"type": "boolean"
														},
														"object": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												},
												"AssignmentExpression": {
													"type": "object",
													"properties": {
														"array": {
															"type": "boolean"
														},
														"object": {
															"type": "boolean"
														}
													},
													"additionalProperties": false
												}
											},
											"additionalProperties": false
										},
										{
											"type": "object",
											"properties": {
												"array": {
													"type": "boolean"
												},
												"object": {
													"type": "boolean"
												}
											},
											"additionalProperties": false
										}
									]
								},
								{
									"type": "object",
									"properties": {
										"enforceForRenamedProperties": {
											"type": "boolean"
										},
										"enforceForDeclarationWithTypeAnnotation": {
											"type": "boolean"
										}
									}
								}
							],
							"fixable": "code",
							"messages": {
								"preferDestructuring": "Use {{type}} destructuring."
							}
						}
					},
					"prefer-enum-initializers": {
						"defaultOptions": [],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Require each enum member value to be explicitly initialized",
								"url": "https://typescript-eslint.io/rules/prefer-enum-initializers"
							},
							"hasSuggestions": true,
							"messages": {
								"defineInitializer": "The value of the member '{{ name }}' should be explicitly defined.",
								"defineInitializerSuggestion": "Can be fixed to {{ name }} = {{ suggested }}"
							},
							"schema": []
						}
					},
					"prefer-find": {
						"defaultOptions": [],
						"meta": {
							"docs": {
								"description": "Enforce the use of Array.prototype.find() over Array.prototype.filter() followed by [0] when looking for a single result",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/prefer-find"
							},
							"messages": {
								"preferFind": "Prefer .find(...) instead of .filter(...)[0].",
								"preferFindSuggestion": "Use .find(...) instead of .filter(...)[0]."
							},
							"schema": [],
							"type": "suggestion",
							"hasSuggestions": true
						}
					},
					"prefer-for-of": {
						"defaultOptions": [],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Enforce the use of `for-of` loop over the standard `for` loop where possible",
								"recommended": "stylistic",
								"url": "https://typescript-eslint.io/rules/prefer-for-of"
							},
							"messages": {
								"preferForOf": "Expected a `for-of` loop instead of a `for` loop with this simple iteration."
							},
							"schema": []
						}
					},
					"prefer-function-type": {
						"defaultOptions": [],
						"meta": {
							"docs": {
								"description": "Enforce using function types instead of interfaces with call signatures",
								"recommended": "stylistic",
								"url": "https://typescript-eslint.io/rules/prefer-function-type"
							},
							"fixable": "code",
							"messages": {
								"functionTypeOverCallableType": "{{ literalOrInterface }} only has a call signature, you should use a function type instead.",
								"unexpectedThisOnFunctionOnlyInterface": "`this` refers to the function type '{{ interfaceName }}', did you intend to use a generic `this` parameter like `<Self>(this: Self, ...) => Self` instead?"
							},
							"schema": [],
							"type": "suggestion"
						}
					},
					"prefer-includes": {
						"defaultOptions": [],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Enforce `includes` method over `indexOf` method",
								"recommended": "strict",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/prefer-includes"
							},
							"fixable": "code",
							"messages": {
								"preferIncludes": "Use 'includes()' method instead.",
								"preferStringIncludes": "Use `String#includes()` method with a string instead."
							},
							"schema": []
						}
					},
					"prefer-literal-enum-member": {
						"defaultOptions": [
							{
								"allowBitwiseExpressions": false
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Require all enum members to be literal values",
								"recommended": "strict",
								"requiresTypeChecking": false,
								"url": "https://typescript-eslint.io/rules/prefer-literal-enum-member"
							},
							"messages": {
								"notLiteral": "Explicit enum value must only be a literal value (string, number, boolean, etc)."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowBitwiseExpressions": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"prefer-namespace-keyword": {
						"defaultOptions": [],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Require using `namespace` keyword over `module` keyword to declare custom TypeScript modules",
								"recommended": "stylistic",
								"url": "https://typescript-eslint.io/rules/prefer-namespace-keyword"
							},
							"fixable": "code",
							"messages": {
								"useNamespace": "Use 'namespace' instead of 'module' to declare custom TypeScript modules."
							},
							"schema": []
						}
					},
					"prefer-nullish-coalescing": {
						"defaultOptions": [
							{
								"allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
								"ignoreConditionalTests": false,
								"ignoreTernaryTests": false,
								"ignoreMixedLogicalExpressions": false,
								"ignorePrimitives": {
									"bigint": false,
									"boolean": false,
									"number": false,
									"string": false
								}
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Enforce using the nullish coalescing operator instead of logical assignments or chaining",
								"recommended": "stylistic",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/prefer-nullish-coalescing"
							},
							"hasSuggestions": true,
							"messages": {
								"preferNullishOverOr": "Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.",
								"preferNullishOverTernary": "Prefer using nullish coalescing operator (`??`) instead of a ternary expression, as it is simpler to read.",
								"suggestNullish": "Fix to nullish coalescing operator (`??`).",
								"noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
											"type": "boolean"
										},
										"ignoreConditionalTests": {
											"type": "boolean"
										},
										"ignoreMixedLogicalExpressions": {
											"type": "boolean"
										},
										"ignorePrimitives": {
											"oneOf": [
												{
													"type": "object",
													"properties": {
														"bigint": {
															"type": "boolean"
														},
														"boolean": {
															"type": "boolean"
														},
														"number": {
															"type": "boolean"
														},
														"string": {
															"type": "boolean"
														}
													}
												},
												{
													"type": "boolean",
													"enum": [
														true
													]
												}
											]
										},
										"ignoreTernaryTests": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"prefer-optional-chain": {
						"defaultOptions": [
							{
								"checkAny": true,
								"checkUnknown": true,
								"checkString": true,
								"checkNumber": true,
								"checkBoolean": true,
								"checkBigInt": true,
								"requireNullish": false,
								"allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": false
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects",
								"recommended": "stylistic",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/prefer-optional-chain"
							},
							"fixable": "code",
							"hasSuggestions": true,
							"messages": {
								"preferOptionalChain": "Prefer using an optional chain expression instead, as it's more concise and easier to read.",
								"optionalChainSuggest": "Change to an optional chain."
							},
							"schema": [
								{
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"checkAny": {
											"type": "boolean",
											"description": "Check operands that are typed as `any` when inspecting \"loose boolean\" operands."
										},
										"checkUnknown": {
											"type": "boolean",
											"description": "Check operands that are typed as `unknown` when inspecting \"loose boolean\" operands."
										},
										"checkString": {
											"type": "boolean",
											"description": "Check operands that are typed as `string` when inspecting \"loose boolean\" operands."
										},
										"checkNumber": {
											"type": "boolean",
											"description": "Check operands that are typed as `number` when inspecting \"loose boolean\" operands."
										},
										"checkBoolean": {
											"type": "boolean",
											"description": "Check operands that are typed as `boolean` when inspecting \"loose boolean\" operands."
										},
										"checkBigInt": {
											"type": "boolean",
											"description": "Check operands that are typed as `bigint` when inspecting \"loose boolean\" operands."
										},
										"requireNullish": {
											"type": "boolean",
											"description": "Skip operands that are not typed with `null` and/or `undefined` when inspecting \"loose boolean\" operands."
										},
										"allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": {
											"type": "boolean",
											"description": "Allow autofixers that will change the return type of the expression. This option is considered unsafe as it may break the build."
										}
									}
								}
							]
						}
					},
					"prefer-promise-reject-errors": {
						"defaultOptions": [
							{
								"allowEmptyReject": false
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Require using Error objects as Promise rejection reasons",
								"recommended": "strict",
								"extendsBaseRule": true,
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/prefer-promise-reject-errors"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowEmptyReject": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"rejectAnError": "Expected the Promise rejection reason to be an Error."
							}
						}
					},
					"prefer-readonly": {
						"defaultOptions": [
							{
								"onlyInlineLambdas": false
							}
						],
						"meta": {
							"docs": {
								"description": "Require private members to be marked as `readonly` if they're never modified outside of the constructor",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/prefer-readonly"
							},
							"fixable": "code",
							"messages": {
								"preferReadonly": "Member '{{name}}' is never reassigned; mark it as `readonly`."
							},
							"schema": [
								{
									"additionalProperties": false,
									"properties": {
										"onlyInlineLambdas": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							],
							"type": "suggestion"
						}
					},
					"prefer-readonly-parameter-types": {
						"defaultOptions": [
							{
								"allow": [],
								"checkParameterProperties": true,
								"ignoreInferredTypes": false,
								"treatMethodsAsReadonly": false
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Require function parameters to be typed as `readonly` to prevent accidental mutation of inputs",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/prefer-readonly-parameter-types"
							},
							"schema": [
								{
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"allow": {
											"type": "array",
											"items": {
												"oneOf": [
													{
														"type": "string"
													},
													{
														"type": "object",
														"additionalProperties": false,
														"properties": {
															"from": {
																"type": "string",
																"enum": [
																	"file"
																]
															},
															"name": {
																"oneOf": [
																	{
																		"type": "string"
																	},
																	{
																		"type": "array",
																		"minItems": 1,
																		"uniqueItems": true,
																		"items": {
																			"type": "string"
																		}
																	}
																]
															},
															"path": {
																"type": "string"
															}
														},
														"required": [
															"from",
															"name"
														]
													},
													{
														"type": "object",
														"additionalProperties": false,
														"properties": {
															"from": {
																"type": "string",
																"enum": [
																	"lib"
																]
															},
															"name": {
																"oneOf": [
																	{
																		"type": "string"
																	},
																	{
																		"type": "array",
																		"minItems": 1,
																		"uniqueItems": true,
																		"items": {
																			"type": "string"
																		}
																	}
																]
															}
														},
														"required": [
															"from",
															"name"
														]
													},
													{
														"type": "object",
														"additionalProperties": false,
														"properties": {
															"from": {
																"type": "string",
																"enum": [
																	"package"
																]
															},
															"name": {
																"oneOf": [
																	{
																		"type": "string"
																	},
																	{
																		"type": "array",
																		"minItems": 1,
																		"uniqueItems": true,
																		"items": {
																			"type": "string"
																		}
																	}
																]
															},
															"package": {
																"type": "string"
															}
														},
														"required": [
															"from",
															"name",
															"package"
														]
													}
												]
											}
										},
										"checkParameterProperties": {
											"type": "boolean"
										},
										"ignoreInferredTypes": {
											"type": "boolean"
										},
										"treatMethodsAsReadonly": {
											"type": "boolean"
										}
									}
								}
							],
							"messages": {
								"shouldBeReadonly": "Parameter should be a read only type."
							}
						}
					},
					"prefer-reduce-type-parameter": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Enforce using type parameter when calling `Array#reduce` instead of casting",
								"recommended": "strict",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/prefer-reduce-type-parameter"
							},
							"messages": {
								"preferTypeParameter": "Unnecessary cast: Array#reduce accepts a type parameter for the default value."
							},
							"fixable": "code",
							"schema": []
						}
					},
					"prefer-regexp-exec": {
						"defaultOptions": [],
						"meta": {
							"type": "suggestion",
							"fixable": "code",
							"docs": {
								"description": "Enforce `RegExp#exec` over `String#match` if no global flag is provided",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/prefer-regexp-exec"
							},
							"messages": {
								"regExpExecOverStringMatch": "Use the `RegExp#exec()` method instead."
							},
							"schema": []
						}
					},
					"prefer-return-this-type": {
						"defaultOptions": [],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Enforce that `this` is used when only `this` type is returned",
								"recommended": "strict",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/prefer-return-this-type"
							},
							"messages": {
								"useThisType": "Use `this` type instead."
							},
							"schema": [],
							"fixable": "code"
						}
					},
					"prefer-string-starts-ends-with": {
						"defaultOptions": [
							{
								"allowSingleElementEquality": "never"
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Enforce using `String#startsWith` and `String#endsWith` over other equivalent methods of checking substrings",
								"recommended": "stylistic",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/prefer-string-starts-ends-with"
							},
							"messages": {
								"preferStartsWith": "Use 'String#startsWith' method instead.",
								"preferEndsWith": "Use the 'String#endsWith' method instead."
							},
							"schema": [
								{
									"additionalProperties": false,
									"properties": {
										"allowSingleElementEquality": {
											"description": "Whether to allow equality checks against the first or last element of a string.",
											"enum": [
												"always",
												"never"
											],
											"type": "string"
										}
									},
									"type": "object"
								}
							],
							"fixable": "code"
						}
					},
					"prefer-ts-expect-error": {
						"defaultOptions": [],
						"meta": {
							"type": "problem",
							"deprecated": true,
							"replacedBy": [
								"@typescript-eslint/ban-ts-comment"
							],
							"docs": {
								"description": "Enforce using `@ts-expect-error` over `@ts-ignore`",
								"url": "https://typescript-eslint.io/rules/prefer-ts-expect-error"
							},
							"fixable": "code",
							"messages": {
								"preferExpectErrorComment": "Use \"@ts-expect-error\" to ensure an error is actually being suppressed."
							},
							"schema": []
						}
					},
					"promise-function-async": {
						"defaultOptions": [
							{
								"allowAny": true,
								"allowedPromiseNames": [],
								"checkArrowFunctions": true,
								"checkFunctionDeclarations": true,
								"checkFunctionExpressions": true,
								"checkMethodDeclarations": true
							}
						],
						"meta": {
							"type": "suggestion",
							"fixable": "code",
							"docs": {
								"description": "Require any function or method that returns a Promise to be marked async",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/promise-function-async"
							},
							"messages": {
								"missingAsync": "Functions that return promises must be async."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowAny": {
											"description": "Whether to consider `any` and `unknown` to be Promises.",
											"type": "boolean"
										},
										"allowedPromiseNames": {
											"description": "Any extra names of classes or interfaces to be considered Promises.",
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"checkArrowFunctions": {
											"type": "boolean"
										},
										"checkFunctionDeclarations": {
											"type": "boolean"
										},
										"checkFunctionExpressions": {
											"type": "boolean"
										},
										"checkMethodDeclarations": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"quotes": {
						"defaultOptions": [
							"double",
							{
								"allowTemplateLiterals": false,
								"avoidEscape": false
							}
						],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/quotes"
							],
							"type": "layout",
							"docs": {
								"description": "Enforce the consistent use of either backticks, double, or single quotes",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/quotes"
							},
							"fixable": "code",
							"messages": {
								"wrongQuotes": "Strings must use {{description}}."
							},
							"schema": [
								{
									"enum": [
										"single",
										"double",
										"backtick"
									]
								},
								{
									"anyOf": [
										{
											"enum": [
												"avoid-escape"
											]
										},
										{
											"type": "object",
											"properties": {
												"avoidEscape": {
													"type": "boolean"
												},
												"allowTemplateLiterals": {
													"type": "boolean"
												}
											},
											"additionalProperties": false
										}
									]
								}
							]
						}
					},
					"require-array-sort-compare": {
						"defaultOptions": [
							{
								"ignoreStringArrays": true
							}
						],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Require `Array#sort` and `Array#toSorted` calls to always provide a `compareFunction`",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/require-array-sort-compare"
							},
							"messages": {
								"requireCompare": "Require 'compare' argument."
							},
							"schema": [
								{
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"ignoreStringArrays": {
											"description": "Whether to ignore arrays in which all elements are strings.",
											"type": "boolean"
										}
									}
								}
							]
						}
					},
					"require-await": {
						"defaultOptions": [],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow async functions which do not return promises and have no `await` expression",
								"recommended": "recommended",
								"requiresTypeChecking": true,
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/require-await"
							},
							"schema": [],
							"messages": {
								"missingAwait": "{{name}} has no 'await' expression."
							}
						}
					},
					"restrict-plus-operands": {
						"defaultOptions": [
							{
								"allowAny": true,
								"allowBoolean": true,
								"allowNullish": true,
								"allowNumberAndString": true,
								"allowRegExp": true,
								"skipCompoundAssignments": false
							}
						],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Require both operands of addition to be the same type and be `bigint`, `number`, or `string`",
								"recommended": {
									"recommended": true,
									"strict": [
										{
											"allowAny": false,
											"allowBoolean": false,
											"allowNullish": false,
											"allowNumberAndString": false,
											"allowRegExp": false
										}
									]
								},
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/restrict-plus-operands"
							},
							"messages": {
								"bigintAndNumber": "Numeric '+' operations must either be both bigints or both numbers. Got `{{left}}` + `{{right}}`.",
								"invalid": "Invalid operand for a '+' operation. Operands must each be a number or {{stringLike}}. Got `{{type}}`.",
								"mismatched": "Operands of '+' operations must be a number or {{stringLike}}. Got `{{left}}` + `{{right}}`."
							},
							"schema": [
								{
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"allowAny": {
											"description": "Whether to allow `any` typed values.",
											"type": "boolean"
										},
										"allowBoolean": {
											"description": "Whether to allow `boolean` typed values.",
											"type": "boolean"
										},
										"allowNullish": {
											"description": "Whether to allow potentially `null` or `undefined` typed values.",
											"type": "boolean"
										},
										"allowNumberAndString": {
											"description": "Whether to allow `bigint`/`number` typed values and `string` typed values to be added together.",
											"type": "boolean"
										},
										"allowRegExp": {
											"description": "Whether to allow `regexp` typed values.",
											"type": "boolean"
										},
										"skipCompoundAssignments": {
											"description": "Whether to skip compound assignments such as `+=`.",
											"type": "boolean"
										}
									}
								}
							]
						}
					},
					"restrict-template-expressions": {
						"defaultOptions": [
							{
								"allowAny": true,
								"allowBoolean": true,
								"allowNullish": true,
								"allowNumber": true,
								"allowRegExp": true
							}
						],
						"meta": {
							"type": "problem",
							"docs": {
								"description": "Enforce template literal expressions to be of `string` type",
								"recommended": {
									"recommended": true,
									"strict": [
										{
											"allowAny": false,
											"allowBoolean": false,
											"allowNullish": false,
											"allowNumber": false,
											"allowRegExp": false,
											"allowNever": false
										}
									]
								},
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/restrict-template-expressions"
							},
							"messages": {
								"invalidType": "Invalid type \"{{type}}\" of template literal expression."
							},
							"schema": [
								{
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"allowAny": {
											"description": "Whether to allow `any` typed values in template expressions.",
											"type": "boolean"
										},
										"allowArray": {
											"description": "Whether to allow `array` typed values in template expressions.",
											"type": "boolean"
										},
										"allowBoolean": {
											"description": "Whether to allow `boolean` typed values in template expressions.",
											"type": "boolean"
										},
										"allowNullish": {
											"description": "Whether to allow `nullish` typed values in template expressions.",
											"type": "boolean"
										},
										"allowNumber": {
											"description": "Whether to allow `number` typed values in template expressions.",
											"type": "boolean"
										},
										"allowRegExp": {
											"description": "Whether to allow `regexp` typed values in template expressions.",
											"type": "boolean"
										},
										"allowNever": {
											"description": "Whether to allow `never` typed values in template expressions.",
											"type": "boolean"
										}
									}
								}
							]
						}
					},
					"return-await": {
						"defaultOptions": [
							"in-try-catch"
						],
						"meta": {
							"docs": {
								"description": "Enforce consistent returning of awaited values",
								"requiresTypeChecking": true,
								"extendsBaseRule": "no-return-await",
								"url": "https://typescript-eslint.io/rules/return-await"
							},
							"fixable": "code",
							"hasSuggestions": true,
							"type": "problem",
							"messages": {
								"nonPromiseAwait": "Returning an awaited value that is not a promise is not allowed.",
								"disallowedPromiseAwait": "Returning an awaited promise is not allowed in this context.",
								"requiredPromiseAwait": "Returning an awaited promise is required in this context.",
								"requiredPromiseAwaitSuggestion": "Add `await` before the expression. Use caution as this may impact control flow.",
								"disallowedPromiseAwaitSuggestion": "Remove `await` before the expression. Use caution as this may impact control flow."
							},
							"schema": [
								{
									"type": "string",
									"enum": [
										"in-try-catch",
										"always",
										"never"
									]
								}
							]
						}
					},
					"semi": {
						"defaultOptions": [
							"always",
							{
								"omitLastInOneLineBlock": false,
								"beforeStatementContinuationChars": "any"
							}
						],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/semi"
							],
							"type": "layout",
							"docs": {
								"description": "Require or disallow semicolons instead of ASI",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/semi"
							},
							"fixable": "code",
							"schema": {
								"anyOf": [
									{
										"type": "array",
										"items": [
											{
												"enum": [
													"never"
												]
											},
											{
												"type": "object",
												"properties": {
													"beforeStatementContinuationChars": {
														"enum": [
															"always",
															"any",
															"never"
														]
													}
												},
												"additionalProperties": false
											}
										],
										"minItems": 0,
										"maxItems": 2
									},
									{
										"type": "array",
										"items": [
											{
												"enum": [
													"always"
												]
											},
											{
												"type": "object",
												"properties": {
													"omitLastInOneLineBlock": {
														"type": "boolean"
													},
													"omitLastInOneLineClassBody": {
														"type": "boolean"
													}
												},
												"additionalProperties": false
											}
										],
										"minItems": 0,
										"maxItems": 2
									}
								]
							},
							"messages": {
								"missingSemi": "Missing semicolon.",
								"extraSemi": "Extra semicolon."
							}
						}
					},
					"sort-type-constituents": {
						"defaultOptions": [
							{
								"checkIntersections": true,
								"checkUnions": true,
								"caseSensitive": false,
								"groupOrder": [
									"named",
									"keyword",
									"operator",
									"literal",
									"function",
									"import",
									"conditional",
									"object",
									"tuple",
									"intersection",
									"union",
									"nullish"
								]
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Enforce constituents of a type union/intersection to be sorted alphabetically",
								"url": "https://typescript-eslint.io/rules/sort-type-constituents"
							},
							"fixable": "code",
							"hasSuggestions": true,
							"messages": {
								"notSorted": "{{type}} type constituents must be sorted.",
								"notSortedNamed": "{{type}} type {{name}} constituents must be sorted.",
								"suggestFix": "Sort constituents of type (removes all comments)."
							},
							"schema": [
								{
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"checkIntersections": {
											"description": "Whether to check intersection types.",
											"type": "boolean"
										},
										"checkUnions": {
											"description": "Whether to check union types.",
											"type": "boolean"
										},
										"caseSensitive": {
											"description": "Whether to sort using case sensitive sorting.",
											"type": "boolean"
										},
										"groupOrder": {
											"description": "Ordering of the groups.",
											"type": "array",
											"items": {
												"type": "string",
												"enum": [
													"conditional",
													"function",
													"import",
													"intersection",
													"keyword",
													"nullish",
													"literal",
													"named",
													"object",
													"operator",
													"tuple",
													"union"
												]
											}
										}
									}
								}
							]
						}
					},
					"space-before-blocks": {
						"defaultOptions": [
							"always"
						],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/space-before-blocks"
							],
							"type": "layout",
							"docs": {
								"description": "Enforce consistent spacing before blocks",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/space-before-blocks"
							},
							"fixable": "whitespace",
							"schema": [
								{
									"oneOf": [
										{
											"enum": [
												"always",
												"never"
											]
										},
										{
											"type": "object",
											"properties": {
												"keywords": {
													"enum": [
														"always",
														"never",
														"off"
													]
												},
												"functions": {
													"enum": [
														"always",
														"never",
														"off"
													]
												},
												"classes": {
													"enum": [
														"always",
														"never",
														"off"
													]
												}
											},
											"additionalProperties": false
										}
									]
								}
							],
							"messages": {
								"unexpectedSpace": "Unexpected space before opening brace.",
								"missingSpace": "Missing space before opening brace."
							}
						}
					},
					"space-before-function-paren": {
						"defaultOptions": [
							"always"
						],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/space-before-function-paren"
							],
							"type": "layout",
							"docs": {
								"description": "Enforce consistent spacing before function parenthesis",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/space-before-function-paren"
							},
							"fixable": "whitespace",
							"schema": [
								{
									"oneOf": [
										{
											"type": "string",
											"enum": [
												"always",
												"never"
											]
										},
										{
											"type": "object",
											"properties": {
												"anonymous": {
													"type": "string",
													"enum": [
														"always",
														"never",
														"ignore"
													]
												},
												"named": {
													"type": "string",
													"enum": [
														"always",
														"never",
														"ignore"
													]
												},
												"asyncArrow": {
													"type": "string",
													"enum": [
														"always",
														"never",
														"ignore"
													]
												}
											},
											"additionalProperties": false
										}
									]
								}
							],
							"messages": {
								"unexpected": "Unexpected space before function parentheses.",
								"missing": "Missing space before function parentheses."
							}
						}
					},
					"space-infix-ops": {
						"defaultOptions": [
							{
								"int32Hint": false
							}
						],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/space-infix-ops"
							],
							"type": "layout",
							"docs": {
								"description": "Require spacing around infix operators",
								"extendsBaseRule": true,
								"url": "https://typescript-eslint.io/rules/space-infix-ops"
							},
							"fixable": "whitespace",
							"schema": [
								{
									"type": "object",
									"properties": {
										"int32Hint": {
											"type": "boolean",
											"default": false
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"missingSpace": "Operator '{{operator}}' must be spaced."
							}
						}
					},
					"strict-boolean-expressions": {
						"defaultOptions": [
							{
								"allowString": true,
								"allowNumber": true,
								"allowNullableObject": true,
								"allowNullableBoolean": false,
								"allowNullableString": false,
								"allowNullableNumber": false,
								"allowNullableEnum": false,
								"allowAny": false,
								"allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false
							}
						],
						"meta": {
							"type": "suggestion",
							"fixable": "code",
							"hasSuggestions": true,
							"docs": {
								"description": "Disallow certain types in boolean expressions",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/strict-boolean-expressions"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowString": {
											"type": "boolean"
										},
										"allowNumber": {
											"type": "boolean"
										},
										"allowNullableObject": {
											"type": "boolean"
										},
										"allowNullableBoolean": {
											"type": "boolean"
										},
										"allowNullableString": {
											"type": "boolean"
										},
										"allowNullableNumber": {
											"type": "boolean"
										},
										"allowNullableEnum": {
											"type": "boolean"
										},
										"allowAny": {
											"type": "boolean"
										},
										"allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"conditionErrorOther": "Unexpected value in conditional. A boolean expression is required.",
								"conditionErrorAny": "Unexpected any value in conditional. An explicit comparison or type cast is required.",
								"conditionErrorNullish": "Unexpected nullish value in conditional. The condition is always false.",
								"conditionErrorNullableBoolean": "Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.",
								"conditionErrorString": "Unexpected string value in conditional. An explicit empty string check is required.",
								"conditionErrorNullableString": "Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.",
								"conditionErrorNumber": "Unexpected number value in conditional. An explicit zero/NaN check is required.",
								"conditionErrorNullableNumber": "Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.",
								"conditionErrorObject": "Unexpected object value in conditional. The condition is always true.",
								"conditionErrorNullableObject": "Unexpected nullable object value in conditional. An explicit null check is required.",
								"conditionErrorNullableEnum": "Unexpected nullable enum value in conditional. Please handle the nullish/zero/NaN cases explicitly.",
								"noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.",
								"conditionFixDefaultFalse": "Explicitly treat nullish value the same as false (`value ?? false`)",
								"conditionFixDefaultEmptyString": "Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)",
								"conditionFixDefaultZero": "Explicitly treat nullish value the same as 0 (`value ?? 0`)",
								"conditionFixCompareNullish": "Change condition to check for null/undefined (`value != null`)",
								"conditionFixCastBoolean": "Explicitly cast value to a boolean (`Boolean(value)`)",
								"conditionFixCompareTrue": "Change condition to check if true (`value === true`)",
								"conditionFixCompareFalse": "Change condition to check if false (`value === false`)",
								"conditionFixCompareStringLength": "Change condition to check string's length (`value.length !== 0`)",
								"conditionFixCompareEmptyString": "Change condition to check for empty string (`value !== \"\"`)",
								"conditionFixCompareZero": "Change condition to check for 0 (`value !== 0`)",
								"conditionFixCompareNaN": "Change condition to check for NaN (`!Number.isNaN(value)`)"
							}
						}
					},
					"switch-exhaustiveness-check": {
						"defaultOptions": [
							{
								"allowDefaultCaseForExhaustiveSwitch": true,
								"requireDefaultForNonUnion": false
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Require switch-case statements to be exhaustive",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/switch-exhaustiveness-check"
							},
							"hasSuggestions": true,
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowDefaultCaseForExhaustiveSwitch": {
											"description": "If 'true', allow 'default' cases on switch statements with exhaustive cases.",
											"type": "boolean"
										},
										"requireDefaultForNonUnion": {
											"description": "If 'true', require a 'default' clause for switches on non-union types.",
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							],
							"messages": {
								"switchIsNotExhaustive": "Switch is not exhaustive. Cases not matched: {{missingBranches}}",
								"dangerousDefaultCase": "The switch statement is exhaustive, so the default case is unnecessary.",
								"addMissingCases": "Add branches for missing cases."
							}
						}
					},
					"triple-slash-reference": {
						"defaultOptions": [
							{
								"lib": "always",
								"path": "never",
								"types": "prefer-import"
							}
						],
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "Disallow certain triple slash directives in favor of ES6-style import declarations",
								"recommended": "recommended",
								"url": "https://typescript-eslint.io/rules/triple-slash-reference"
							},
							"messages": {
								"tripleSlashReference": "Do not use a triple slash reference for {{module}}, use `import` style instead."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"lib": {
											"type": "string",
											"enum": [
												"always",
												"never"
											]
										},
										"path": {
											"type": "string",
											"enum": [
												"always",
												"never"
											]
										},
										"types": {
											"type": "string",
											"enum": [
												"always",
												"never",
												"prefer-import"
											]
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"type-annotation-spacing": {
						"defaultOptions": [
							{}
						],
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"@stylistic/ts/type-annotation-spacing"
							],
							"type": "layout",
							"docs": {
								"description": "Require consistent spacing around type annotations",
								"url": "https://typescript-eslint.io/rules/type-annotation-spacing"
							},
							"fixable": "whitespace",
							"messages": {
								"expectedSpaceAfter": "Expected a space after the '{{type}}'.",
								"expectedSpaceBefore": "Expected a space before the '{{type}}'.",
								"unexpectedSpaceAfter": "Unexpected space after the '{{type}}'.",
								"unexpectedSpaceBefore": "Unexpected space before the '{{type}}'.",
								"unexpectedSpaceBetween": "Unexpected space between the '{{previousToken}}' and the '{{type}}'."
							},
							"schema": [
								{
									"$defs": {
										"spacingConfig": {
											"type": "object",
											"properties": {
												"before": {
													"type": "boolean"
												},
												"after": {
													"type": "boolean"
												}
											},
											"additionalProperties": false
										}
									},
									"type": "object",
									"properties": {
										"before": {
											"type": "boolean"
										},
										"after": {
											"type": "boolean"
										},
										"overrides": {
											"type": "object",
											"properties": {
												"colon": {
													"$ref": "#/items/0/$defs/spacingConfig"
												},
												"arrow": {
													"$ref": "#/items/0/$defs/spacingConfig"
												},
												"variable": {
													"$ref": "#/items/0/$defs/spacingConfig"
												},
												"parameter": {
													"$ref": "#/items/0/$defs/spacingConfig"
												},
												"property": {
													"$ref": "#/items/0/$defs/spacingConfig"
												},
												"returnType": {
													"$ref": "#/items/0/$defs/spacingConfig"
												}
											},
											"additionalProperties": false
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"typedef": {
						"defaultOptions": [
							{
								"arrayDestructuring": false,
								"arrowParameter": false,
								"memberVariableDeclaration": false,
								"objectDestructuring": false,
								"parameter": false,
								"propertyDeclaration": false,
								"variableDeclaration": false,
								"variableDeclarationIgnoreFunction": false
							}
						],
						"meta": {
							"docs": {
								"description": "Require type annotations in certain places",
								"url": "https://typescript-eslint.io/rules/typedef"
							},
							"messages": {
								"expectedTypedef": "Expected a type annotation.",
								"expectedTypedefNamed": "Expected {{name}} to have a type annotation."
							},
							"schema": [
								{
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"arrayDestructuring": {
											"type": "boolean"
										},
										"arrowParameter": {
											"type": "boolean"
										},
										"memberVariableDeclaration": {
											"type": "boolean"
										},
										"objectDestructuring": {
											"type": "boolean"
										},
										"parameter": {
											"type": "boolean"
										},
										"propertyDeclaration": {
											"type": "boolean"
										},
										"variableDeclaration": {
											"type": "boolean"
										},
										"variableDeclarationIgnoreFunction": {
											"type": "boolean"
										}
									}
								}
							],
							"type": "suggestion"
						}
					},
					"unbound-method": {
						"defaultOptions": [
							{
								"ignoreStatic": false
							}
						],
						"meta": {
							"docs": {
								"description": "Enforce unbound methods are called with their expected scope",
								"recommended": "recommended",
								"requiresTypeChecking": true,
								"url": "https://typescript-eslint.io/rules/unbound-method"
							},
							"messages": {
								"unbound": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.",
								"unboundWithoutThisAnnotation": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"ignoreStatic": {
											"description": "Whether to skip checking whether `static` methods are correctly bound.",
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							],
							"type": "problem"
						}
					},
					"unified-signatures": {
						"defaultOptions": [
							{
								"ignoreDifferentlyNamedParameters": false
							}
						],
						"meta": {
							"docs": {
								"description": "Disallow two overloads that could be unified into one with a union or an optional/rest parameter",
								"recommended": "strict",
								"url": "https://typescript-eslint.io/rules/unified-signatures"
							},
							"type": "suggestion",
							"messages": {
								"omittingRestParameter": "{{failureStringStart}} with a rest parameter.",
								"omittingSingleParameter": "{{failureStringStart}} with an optional parameter.",
								"singleParameterDifference": "{{failureStringStart}} taking `{{type1}} | {{type2}}`."
							},
							"schema": [
								{
									"additionalProperties": false,
									"properties": {
										"ignoreDifferentlyNamedParameters": {
											"description": "Whether two parameters with different names at the same index should be considered different even if their types are the same.",
											"type": "boolean"
										}
									},
									"type": "object"
								}
							]
						}
					},
					"use-unknown-in-catch-callback-variable": {
						"defaultOptions": [],
						"meta": {
							"docs": {
								"description": "Enforce typing arguments in `.catch()` callbacks as `unknown`",
								"requiresTypeChecking": true,
								"recommended": "strict",
								"url": "https://typescript-eslint.io/rules/use-unknown-in-catch-callback-variable"
							},
							"type": "suggestion",
							"messages": {
								"useUnknown": "Prefer the safe `: unknown` for a catch callback variable.",
								"useUnknownArrayDestructuringPattern": "Prefer the safe `: unknown` for a catch callback variable. The thrown error may not be iterable.",
								"useUnknownObjectDestructuringPattern": "Prefer the safe `: unknown` for a catch callback variable. The thrown error may be nullable, or may not have the expected shape.",
								"useUnknownSpreadArgs": "Prefer the safe `: unknown` for a catch callback variable. The argument list may contain a handler that does not use `unknown` for the catch callback variable.",
								"addUnknownTypeAnnotationSuggestion": "Add an explicit `: unknown` type annotation to the catch variable.",
								"addUnknownRestTypeAnnotationSuggestion": "Add an explicit `: [unknown]` type annotation to the catch rest variable.",
								"wrongTypeAnnotationSuggestion": "Change existing type annotation to `: unknown`.",
								"wrongRestTypeAnnotationSuggestion": "Change existing type annotation to `: [unknown]`."
							},
							"fixable": "code",
							"schema": [],
							"hasSuggestions": true
						}
					}
				}
			}
		},
		"rules": {
			"@typescript-eslint/ban-ts-comment": "error",
			"@typescript-eslint/ban-types": "error",
			"no-array-constructor": "off",
			"@typescript-eslint/no-array-constructor": "error",
			"@typescript-eslint/no-duplicate-enum-values": "error",
			"@typescript-eslint/no-explicit-any": "error",
			"@typescript-eslint/no-extra-non-null-assertion": "error",
			"no-loss-of-precision": "off",
			"@typescript-eslint/no-loss-of-precision": "error",
			"@typescript-eslint/no-misused-new": "error",
			"@typescript-eslint/no-namespace": "error",
			"@typescript-eslint/no-non-null-asserted-optional-chain": "error",
			"@typescript-eslint/no-this-alias": "error",
			"@typescript-eslint/no-unnecessary-type-constraint": "error",
			"@typescript-eslint/no-unsafe-declaration-merging": "error",
			"no-unused-vars": "off",
			"@typescript-eslint/no-unused-vars": "error",
			"@typescript-eslint/no-var-requires": "error",
			"@typescript-eslint/prefer-as-const": "error",
			"@typescript-eslint/triple-slash-reference": "error"
		}
	},
	{
		"ignores": [
			".webpack/",
			".vscode/",
			"bin/",
			"dist/",
			"mongodb-realm/",
			"**/*/_global.d.ts"
		],
		"files": [
			"src/**/*.ts",
			"src/**/*.tsx",
			"src/**/*.mjs"
		],
		"plugins": {
			"react": {
				"deprecatedRules": {
					"jsx-sort-default-props": {
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"sort-default-props"
							],
							"docs": {
								"description": "Enforce defaultProps declarations alphabetical sorting",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-default-props.md"
							},
							"messages": {
								"propsNotSorted": "Default prop types declarations should be sorted alphabetically"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"ignoreCase": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"jsx-space-before-closing": {
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"jsx-tag-spacing"
							],
							"docs": {
								"description": "Enforce spacing before closing bracket in JSX",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-space-before-closing.md"
							},
							"fixable": "code",
							"messages": {
								"noSpaceBeforeClose": "A space is forbidden before closing bracket",
								"needSpaceBeforeClose": "A space is required before closing bracket"
							},
							"schema": [
								{
									"enum": [
										"always",
										"never"
									]
								}
							]
						}
					}
				},
				"rules": {
					"boolean-prop-naming": {
						"meta": {
							"docs": {
								"category": "Stylistic Issues",
								"description": "Enforces consistent naming for boolean props",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/boolean-prop-naming.md"
							},
							"messages": {
								"patternMismatch": "Prop name `{{propName}}` doesn’t match rule `{{pattern}}`"
							},
							"schema": [
								{
									"additionalProperties": false,
									"properties": {
										"propTypeNames": {
											"items": {
												"type": "string"
											},
											"minItems": 1,
											"type": "array",
											"uniqueItems": true
										},
										"rule": {
											"default": "^(is|has)[A-Z]([A-Za-z0-9]?)+",
											"minLength": 1,
											"type": "string"
										},
										"message": {
											"minLength": 1,
											"type": "string"
										},
										"validateNested": {
											"default": false,
											"type": "boolean"
										}
									},
									"type": "object"
								}
							]
						}
					},
					"button-has-type": {
						"meta": {
							"docs": {
								"description": "Disallow usage of `button` elements without an explicit `type` attribute",
								"category": "Possible Errors",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/button-has-type.md"
							},
							"messages": {
								"missingType": "Missing an explicit type attribute for button",
								"complexType": "The button type attribute must be specified by a static string or a trivial ternary expression",
								"invalidValue": "\"{{value}}\" is an invalid value for button type attribute",
								"forbiddenValue": "\"{{value}}\" is an invalid value for button type attribute"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"button": {
											"default": true,
											"type": "boolean"
										},
										"submit": {
											"default": true,
											"type": "boolean"
										},
										"reset": {
											"default": true,
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"checked-requires-onchange-or-readonly": {
						"meta": {
							"docs": {
								"description": "Enforce using `onChange` or `readonly` attribute when `checked` is used",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/checked-requires-onchange-or-readonly.md"
							},
							"messages": {
								"missingProperty": "`checked` should be used with either `onChange` or `readOnly`.",
								"exclusiveCheckedAttribute": "Use either `checked` or `defaultChecked`, but not both."
							},
							"schema": [
								{
									"additionalProperties": false,
									"properties": {
										"ignoreMissingProperties": {
											"type": "boolean"
										},
										"ignoreExclusiveCheckedAttribute": {
											"type": "boolean"
										}
									}
								}
							]
						}
					},
					"default-props-match-prop-types": {
						"meta": {
							"docs": {
								"description": "Enforce all defaultProps have a corresponding non-required PropType",
								"category": "Best Practices",
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/default-props-match-prop-types.md"
							},
							"messages": {
								"requiredHasDefault": "defaultProp \"{{name}}\" defined for isRequired propType.",
								"defaultHasNoType": "defaultProp \"{{name}}\" has no corresponding propTypes declaration."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowRequiredDefaults": {
											"default": false,
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"destructuring-assignment": {
						"meta": {
							"docs": {
								"description": "Enforce consistent usage of destructuring assignment of props, state, and context",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/destructuring-assignment.md"
							},
							"fixable": "code",
							"messages": {
								"noDestructPropsInSFCArg": "Must never use destructuring props assignment in SFC argument",
								"noDestructContextInSFCArg": "Must never use destructuring context assignment in SFC argument",
								"noDestructAssignment": "Must never use destructuring {{type}} assignment",
								"useDestructAssignment": "Must use destructuring {{type}} assignment",
								"destructureInSignature": "Must destructure props in the function signature."
							},
							"schema": [
								{
									"type": "string",
									"enum": [
										"always",
										"never"
									]
								},
								{
									"type": "object",
									"properties": {
										"ignoreClassFields": {
											"type": "boolean"
										},
										"destructureInSignature": {
											"type": "string",
											"enum": [
												"always",
												"ignore"
											]
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"display-name": {
						"meta": {
							"docs": {
								"description": "Disallow missing displayName in a React component definition",
								"category": "Best Practices",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/display-name.md"
							},
							"messages": {
								"noDisplayName": "Component definition is missing display name",
								"noContextDisplayName": "Context definition is missing display name"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"ignoreTranspilerName": {
											"type": "boolean"
										},
										"checkContextObjects": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"forbid-component-props": {
						"meta": {
							"docs": {
								"description": "Disallow certain props on components",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-component-props.md"
							},
							"messages": {
								"propIsForbidden": "Prop \"{{prop}}\" is forbidden on Components"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"forbid": {
											"type": "array",
											"items": {
												"anyOf": [
													{
														"type": "string"
													},
													{
														"type": "object",
														"properties": {
															"propName": {
																"type": "string"
															},
															"allowedFor": {
																"type": "array",
																"uniqueItems": true,
																"items": {
																	"type": "string"
																}
															},
															"message": {
																"type": "string"
															}
														},
														"additionalProperties": false
													},
													{
														"type": "object",
														"properties": {
															"propName": {
																"type": "string"
															},
															"disallowedFor": {
																"type": "array",
																"uniqueItems": true,
																"minItems": 1,
																"items": {
																	"type": "string"
																}
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"disallowedFor"
														],
														"additionalProperties": false
													}
												]
											}
										}
									}
								}
							]
						}
					},
					"forbid-dom-props": {
						"meta": {
							"docs": {
								"description": "Disallow certain props on DOM Nodes",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-dom-props.md"
							},
							"messages": {
								"propIsForbidden": "Prop \"{{prop}}\" is forbidden on DOM Nodes"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"forbid": {
											"type": "array",
											"items": {
												"anyOf": [
													{
														"type": "string"
													},
													{
														"type": "object",
														"properties": {
															"propName": {
																"type": "string"
															},
															"disallowedFor": {
																"type": "array",
																"uniqueItems": true,
																"items": {
																	"type": "string"
																}
															},
															"message": {
																"type": "string"
															}
														}
													}
												],
												"minLength": 1
											},
											"uniqueItems": true
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"forbid-elements": {
						"meta": {
							"docs": {
								"description": "Disallow certain elements",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-elements.md"
							},
							"messages": {
								"forbiddenElement": "<{{element}}> is forbidden",
								"forbiddenElement_message": "<{{element}}> is forbidden, {{message}}"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"forbid": {
											"type": "array",
											"items": {
												"anyOf": [
													{
														"type": "string"
													},
													{
														"type": "object",
														"properties": {
															"element": {
																"type": "string"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"element"
														],
														"additionalProperties": false
													}
												]
											}
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"forbid-foreign-prop-types": {
						"meta": {
							"docs": {
								"description": "Disallow using another component's propTypes",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-foreign-prop-types.md"
							},
							"messages": {
								"forbiddenPropType": "Using propTypes from another component is not safe because they may be removed in production builds"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowInPropTypes": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"forbid-prop-types": {
						"meta": {
							"docs": {
								"description": "Disallow certain propTypes",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-prop-types.md"
							},
							"messages": {
								"forbiddenPropType": "Prop type \"{{target}}\" is forbidden"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"forbid": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"checkContextTypes": {
											"type": "boolean"
										},
										"checkChildContextTypes": {
											"type": "boolean"
										}
									},
									"additionalProperties": true
								}
							]
						}
					},
					"function-component-definition": {
						"meta": {
							"docs": {
								"description": "Enforce a specific function type for function components",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/function-component-definition.md"
							},
							"fixable": "code",
							"messages": {
								"function-declaration": "Function component is not a function declaration",
								"function-expression": "Function component is not a function expression",
								"arrow-function": "Function component is not an arrow function"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"namedComponents": {
											"anyOf": [
												{
													"enum": [
														"function-declaration",
														"arrow-function",
														"function-expression"
													]
												},
												{
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"function-declaration",
															"arrow-function",
															"function-expression"
														]
													}
												}
											]
										},
										"unnamedComponents": {
											"anyOf": [
												{
													"enum": [
														"arrow-function",
														"function-expression"
													]
												},
												{
													"type": "array",
													"items": {
														"type": "string",
														"enum": [
															"arrow-function",
															"function-expression"
														]
													}
												}
											]
										}
									}
								}
							]
						}
					},
					"hook-use-state": {
						"meta": {
							"docs": {
								"description": "Ensure destructuring and symmetric naming of useState hook value and setter variables",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/hook-use-state.md"
							},
							"messages": {
								"useStateErrorMessage": "useState call is not destructured into value + setter pair",
								"useStateErrorMessageOrAddOption": "useState call is not destructured into value + setter pair (you can allow destructuring by enabling \"allowDestructuredState\" option)",
								"suggestPair": "Destructure useState call into value + setter pair",
								"suggestMemo": "Replace useState call with useMemo"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowDestructuredState": {
											"default": false,
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							],
							"type": "suggestion",
							"hasSuggestions": true
						}
					},
					"iframe-missing-sandbox": {
						"meta": {
							"docs": {
								"description": "Enforce sandbox attribute on iframe elements",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/iframe-missing-sandbox.md"
							},
							"schema": [],
							"messages": {
								"attributeMissing": "An iframe element is missing a sandbox attribute",
								"invalidValue": "An iframe element defines a sandbox attribute with invalid value \"{{ value }}\"",
								"invalidCombination": "An iframe element defines a sandbox attribute with both allow-scripts and allow-same-origin which is invalid"
							}
						}
					},
					"jsx-boolean-value": {
						"meta": {
							"docs": {
								"description": "Enforce boolean attributes notation in JSX",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-boolean-value.md"
							},
							"fixable": "code",
							"messages": {
								"omitBoolean": "Value must be omitted for boolean attribute `{{propName}}`",
								"setBoolean": "Value must be set for boolean attribute `{{propName}}`",
								"omitPropAndBoolean": "Value must be omitted for `false` attribute: `{{propName}}`"
							},
							"schema": {
								"anyOf": [
									{
										"type": "array",
										"items": [
											{
												"enum": [
													"always",
													"never"
												]
											}
										],
										"additionalItems": false
									},
									{
										"type": "array",
										"items": [
											{
												"enum": [
													"always"
												]
											},
											{
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"never": {
														"type": "array",
														"items": {
															"type": "string",
															"minLength": 1
														},
														"uniqueItems": true
													},
													"assumeUndefinedIsFalse": {
														"type": "boolean"
													}
												}
											}
										],
										"additionalItems": false
									},
									{
										"type": "array",
										"items": [
											{
												"enum": [
													"never"
												]
											},
											{
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"always": {
														"type": "array",
														"items": {
															"type": "string",
															"minLength": 1
														},
														"uniqueItems": true
													},
													"assumeUndefinedIsFalse": {
														"type": "boolean"
													}
												}
											}
										],
										"additionalItems": false
									}
								]
							}
						}
					},
					"jsx-child-element-spacing": {
						"meta": {
							"docs": {
								"description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-child-element-spacing.md"
							},
							"fixable": null,
							"messages": {
								"spacingAfterPrev": "Ambiguous spacing after previous element {{element}}",
								"spacingBeforeNext": "Ambiguous spacing before next element {{element}}"
							},
							"schema": []
						}
					},
					"jsx-closing-bracket-location": {
						"meta": {
							"docs": {
								"description": "Enforce closing bracket location in JSX",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-bracket-location.md"
							},
							"fixable": "code",
							"messages": {
								"bracketLocation": "The closing bracket must be {{location}}{{details}}"
							},
							"schema": [
								{
									"anyOf": [
										{
											"enum": [
												"after-props",
												"props-aligned",
												"tag-aligned",
												"line-aligned"
											]
										},
										{
											"type": "object",
											"properties": {
												"location": {
													"enum": [
														"after-props",
														"props-aligned",
														"tag-aligned",
														"line-aligned"
													]
												}
											},
											"additionalProperties": false
										},
										{
											"type": "object",
											"properties": {
												"nonEmpty": {
													"enum": [
														"after-props",
														"props-aligned",
														"tag-aligned",
														"line-aligned",
														false
													]
												},
												"selfClosing": {
													"enum": [
														"after-props",
														"props-aligned",
														"tag-aligned",
														"line-aligned",
														false
													]
												}
											},
											"additionalProperties": false
										}
									]
								}
							]
						}
					},
					"jsx-closing-tag-location": {
						"meta": {
							"docs": {
								"description": "Enforce closing tag location for multiline JSX",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-tag-location.md"
							},
							"fixable": "whitespace",
							"messages": {
								"onOwnLine": "Closing tag of a multiline JSX expression must be on its own line.",
								"matchIndent": "Expected closing tag to match indentation of opening."
							}
						}
					},
					"jsx-curly-spacing": {
						"meta": {
							"docs": {
								"description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-spacing.md"
							},
							"fixable": "code",
							"messages": {
								"noNewlineAfter": "There should be no newline after '{{token}}'",
								"noNewlineBefore": "There should be no newline before '{{token}}'",
								"noSpaceAfter": "There should be no space after '{{token}}'",
								"noSpaceBefore": "There should be no space before '{{token}}'",
								"spaceNeededAfter": "A space is required after '{{token}}'",
								"spaceNeededBefore": "A space is required before '{{token}}'"
							},
							"schema": {
								"definitions": {
									"basicConfig": {
										"type": "object",
										"properties": {
											"when": {
												"enum": [
													"always",
													"never"
												]
											},
											"allowMultiline": {
												"type": "boolean"
											},
											"spacing": {
												"type": "object",
												"properties": {
													"objectLiterals": {
														"enum": [
															"always",
															"never"
														]
													}
												}
											}
										}
									},
									"basicConfigOrBoolean": {
										"anyOf": [
											{
												"$ref": "#/definitions/basicConfig"
											},
											{
												"type": "boolean"
											}
										]
									}
								},
								"type": "array",
								"items": [
									{
										"anyOf": [
											{
												"allOf": [
													{
														"$ref": "#/definitions/basicConfig"
													},
													{
														"type": "object",
														"properties": {
															"attributes": {
																"$ref": "#/definitions/basicConfigOrBoolean"
															},
															"children": {
																"$ref": "#/definitions/basicConfigOrBoolean"
															}
														}
													}
												]
											},
											{
												"enum": [
													"always",
													"never"
												]
											}
										]
									},
									{
										"type": "object",
										"properties": {
											"allowMultiline": {
												"type": "boolean"
											},
											"spacing": {
												"type": "object",
												"properties": {
													"objectLiterals": {
														"enum": [
															"always",
															"never"
														]
													}
												}
											}
										},
										"additionalProperties": false
									}
								]
							}
						}
					},
					"jsx-curly-newline": {
						"meta": {
							"type": "layout",
							"docs": {
								"description": "Enforce consistent linebreaks in curly braces in JSX attributes and expressions",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-newline.md"
							},
							"fixable": "whitespace",
							"schema": [
								{
									"anyOf": [
										{
											"enum": [
												"consistent",
												"never"
											]
										},
										{
											"type": "object",
											"properties": {
												"singleline": {
													"enum": [
														"consistent",
														"require",
														"forbid"
													]
												},
												"multiline": {
													"enum": [
														"consistent",
														"require",
														"forbid"
													]
												}
											},
											"additionalProperties": false
										}
									]
								}
							],
							"messages": {
								"expectedBefore": "Expected newline before '}'.",
								"expectedAfter": "Expected newline after '{'.",
								"unexpectedBefore": "Unexpected newline before '}'.",
								"unexpectedAfter": "Unexpected newline after '{'."
							}
						}
					},
					"jsx-equals-spacing": {
						"meta": {
							"docs": {
								"description": "Enforce or disallow spaces around equal signs in JSX attributes",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-equals-spacing.md"
							},
							"fixable": "code",
							"messages": {
								"noSpaceBefore": "There should be no space before '='",
								"noSpaceAfter": "There should be no space after '='",
								"needSpaceBefore": "A space is required before '='",
								"needSpaceAfter": "A space is required after '='"
							},
							"schema": [
								{
									"enum": [
										"always",
										"never"
									]
								}
							]
						}
					},
					"jsx-filename-extension": {
						"meta": {
							"docs": {
								"description": "Disallow file extensions that may contain JSX",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-filename-extension.md"
							},
							"messages": {
								"noJSXWithExtension": "JSX not allowed in files with extension '{{ext}}'",
								"extensionOnlyForJSX": "Only files containing JSX may use the extension '{{ext}}'"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allow": {
											"enum": [
												"always",
												"as-needed"
											]
										},
										"extensions": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"ignoreFilesWithoutCode": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"jsx-first-prop-new-line": {
						"meta": {
							"docs": {
								"description": "Enforce proper position of the first property in JSX",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-first-prop-new-line.md"
							},
							"fixable": "code",
							"messages": {
								"propOnNewLine": "Property should be placed on a new line",
								"propOnSameLine": "Property should be placed on the same line as the component declaration"
							},
							"schema": [
								{
									"enum": [
										"always",
										"never",
										"multiline",
										"multiline-multiprop",
										"multiprop"
									]
								}
							]
						}
					},
					"jsx-handler-names": {
						"meta": {
							"docs": {
								"description": "Enforce event handler naming conventions in JSX",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-handler-names.md"
							},
							"messages": {
								"badHandlerName": "Handler function for {{propKey}} prop key must be a camelCase name beginning with '{{handlerPrefix}}' only",
								"badPropKey": "Prop key for {{propValue}} must begin with '{{handlerPropPrefix}}'"
							},
							"schema": [
								{
									"anyOf": [
										{
											"type": "object",
											"properties": {
												"eventHandlerPrefix": {
													"type": "string"
												},
												"eventHandlerPropPrefix": {
													"type": "string"
												},
												"checkLocalVariables": {
													"type": "boolean"
												},
												"checkInlineFunction": {
													"type": "boolean"
												}
											},
											"additionalProperties": false
										},
										{
											"type": "object",
											"properties": {
												"eventHandlerPrefix": {
													"type": "string"
												},
												"eventHandlerPropPrefix": {
													"type": "boolean",
													"enum": [
														false
													]
												},
												"checkLocalVariables": {
													"type": "boolean"
												},
												"checkInlineFunction": {
													"type": "boolean"
												}
											},
											"additionalProperties": false
										},
										{
											"type": "object",
											"properties": {
												"eventHandlerPrefix": {
													"type": "boolean",
													"enum": [
														false
													]
												},
												"eventHandlerPropPrefix": {
													"type": "string"
												},
												"checkLocalVariables": {
													"type": "boolean"
												},
												"checkInlineFunction": {
													"type": "boolean"
												}
											},
											"additionalProperties": false
										},
										{
											"type": "object",
											"properties": {
												"checkLocalVariables": {
													"type": "boolean"
												}
											},
											"additionalProperties": false
										},
										{
											"type": "object",
											"properties": {
												"checkInlineFunction": {
													"type": "boolean"
												}
											},
											"additionalProperties": false
										}
									]
								}
							]
						}
					},
					"jsx-indent": {
						"meta": {
							"docs": {
								"description": "Enforce JSX indentation",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent.md"
							},
							"fixable": "whitespace",
							"messages": {
								"wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}."
							},
							"schema": [
								{
									"anyOf": [
										{
											"enum": [
												"tab"
											]
										},
										{
											"type": "integer"
										}
									]
								},
								{
									"type": "object",
									"properties": {
										"checkAttributes": {
											"type": "boolean"
										},
										"indentLogicalExpressions": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"jsx-indent-props": {
						"meta": {
							"docs": {
								"description": "Enforce props indentation in JSX",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent-props.md"
							},
							"fixable": "code",
							"messages": {
								"wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}."
							},
							"schema": [
								{
									"anyOf": [
										{
											"enum": [
												"tab",
												"first"
											]
										},
										{
											"type": "integer"
										},
										{
											"type": "object",
											"properties": {
												"indentMode": {
													"anyOf": [
														{
															"enum": [
																"tab",
																"first"
															]
														},
														{
															"type": "integer"
														}
													]
												},
												"ignoreTernaryOperator": {
													"type": "boolean"
												}
											}
										}
									]
								}
							]
						}
					},
					"jsx-key": {
						"meta": {
							"docs": {
								"description": "Disallow missing `key` props in iterators/collection literals",
								"category": "Possible Errors",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-key.md"
							},
							"messages": {
								"missingIterKey": "Missing \"key\" prop for element in iterator",
								"missingIterKeyUsePrag": "Missing \"key\" prop for element in iterator. Shorthand fragment syntax does not support providing keys. Use {{reactPrag}}.{{fragPrag}} instead",
								"missingArrayKey": "Missing \"key\" prop for element in array",
								"missingArrayKeyUsePrag": "Missing \"key\" prop for element in array. Shorthand fragment syntax does not support providing keys. Use {{reactPrag}}.{{fragPrag}} instead",
								"keyBeforeSpread": "`key` prop must be placed before any `{...spread}, to avoid conflicting with React’s new JSX transform: https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html`",
								"nonUniqueKeys": "`key` prop must be unique"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"checkFragmentShorthand": {
											"type": "boolean",
											"default": false
										},
										"checkKeyMustBeforeSpread": {
											"type": "boolean",
											"default": false
										},
										"warnOnDuplicates": {
											"type": "boolean",
											"default": false
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"jsx-max-depth": {
						"meta": {
							"docs": {
								"description": "Enforce JSX maximum depth",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-depth.md"
							},
							"messages": {
								"wrongDepth": "Expected the depth of nested jsx elements to be <= {{needed}}, but found {{found}}."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"max": {
											"type": "integer",
											"minimum": 0
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"jsx-max-props-per-line": {
						"meta": {
							"docs": {
								"description": "Enforce maximum of props on a single line in JSX",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-props-per-line.md"
							},
							"fixable": "code",
							"messages": {
								"newLine": "Prop `{{prop}}` must be placed on a new line"
							},
							"schema": [
								{
									"anyOf": [
										{
											"type": "object",
											"properties": {
												"maximum": {
													"type": "object",
													"properties": {
														"single": {
															"type": "integer",
															"minimum": 1
														},
														"multi": {
															"type": "integer",
															"minimum": 1
														}
													}
												}
											},
											"additionalProperties": false
										},
										{
											"type": "object",
											"properties": {
												"maximum": {
													"type": "number",
													"minimum": 1
												},
												"when": {
													"type": "string",
													"enum": [
														"always",
														"multiline"
													]
												}
											},
											"additionalProperties": false
										}
									]
								}
							]
						}
					},
					"jsx-newline": {
						"meta": {
							"docs": {
								"description": "Require or prevent a new line after jsx elements and expressions.",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-newline.md"
							},
							"fixable": "code",
							"messages": {
								"require": "JSX element should start in a new line",
								"prevent": "JSX element should not start in a new line",
								"allowMultilines": "Multiline JSX elements should start in a new line"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"prevent": {
											"default": false,
											"type": "boolean"
										},
										"allowMultilines": {
											"default": false,
											"type": "boolean"
										}
									},
									"additionalProperties": false,
									"if": {
										"properties": {
											"allowMultilines": {
												"const": true
											}
										}
									},
									"then": {
										"properties": {
											"prevent": {
												"const": true
											}
										},
										"required": [
											"prevent"
										]
									}
								}
							]
						}
					},
					"jsx-no-bind": {
						"meta": {
							"docs": {
								"description": "Disallow `.bind()` or arrow functions in JSX props",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-bind.md"
							},
							"messages": {
								"bindCall": "JSX props should not use .bind()",
								"arrowFunc": "JSX props should not use arrow functions",
								"bindExpression": "JSX props should not use ::",
								"func": "JSX props should not use functions"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowArrowFunctions": {
											"default": false,
											"type": "boolean"
										},
										"allowBind": {
											"default": false,
											"type": "boolean"
										},
										"allowFunctions": {
											"default": false,
											"type": "boolean"
										},
										"ignoreRefs": {
											"default": false,
											"type": "boolean"
										},
										"ignoreDOMComponents": {
											"default": false,
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"jsx-no-comment-textnodes": {
						"meta": {
							"docs": {
								"description": "Disallow comments from being inserted as text nodes",
								"category": "Possible Errors",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-comment-textnodes.md"
							},
							"messages": {
								"putCommentInBraces": "Comments inside children section of tag should be placed inside braces"
							},
							"schema": []
						}
					},
					"jsx-no-constructed-context-values": {
						"meta": {
							"docs": {
								"description": "Disallows JSX context provider values from taking values that will cause needless rerenders",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-constructed-context-values.md"
							},
							"messages": {
								"withIdentifierMsg": "The '{{variableName}}' {{type}} (at line {{nodeLine}}) passed as the value prop to the Context provider (at line {{usageLine}}) changes every render. To fix this consider wrapping it in a useMemo hook.",
								"withIdentifierMsgFunc": "The '{{variableName}}' {{type}} (at line {{nodeLine}}) passed as the value prop to the Context provider (at line {{usageLine}}) changes every render. To fix this consider wrapping it in a useCallback hook.",
								"defaultMsg": "The {{type}} passed as the value prop to the Context provider (at line {{nodeLine}}) changes every render. To fix this consider wrapping it in a useMemo hook.",
								"defaultMsgFunc": "The {{type}} passed as the value prop to the Context provider (at line {{nodeLine}}) changes every render. To fix this consider wrapping it in a useCallback hook."
							},
							"schema": false
						}
					},
					"jsx-no-duplicate-props": {
						"meta": {
							"docs": {
								"description": "Disallow duplicate properties in JSX",
								"category": "Possible Errors",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-duplicate-props.md"
							},
							"messages": {
								"noDuplicateProps": "No duplicate props allowed"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"ignoreCase": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"jsx-no-leaked-render": {
						"meta": {
							"docs": {
								"description": "Disallow problematic leaked values from being rendered",
								"category": "Possible Errors",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-leaked-render.md"
							},
							"messages": {
								"noPotentialLeakedRender": "Potential leaked value that might cause unintentionally rendered values or rendering crashes"
							},
							"fixable": "code",
							"schema": [
								{
									"type": "object",
									"properties": {
										"validStrategies": {
											"type": "array",
											"items": {
												"enum": [
													"ternary",
													"coerce"
												]
											},
											"uniqueItems": true,
											"default": [
												"ternary",
												"coerce"
											]
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"jsx-no-literals": {
						"meta": {
							"docs": {
								"description": "Disallow usage of string literals in JSX",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-literals.md"
							},
							"messages": {
								"invalidPropValue": "Invalid prop value: \"{{text}}\"",
								"noStringsInAttributes": "Strings not allowed in attributes: \"{{text}}\"",
								"noStringsInJSX": "Strings not allowed in JSX files: \"{{text}}\"",
								"literalNotInJSXExpression": "Missing JSX expression container around literal string: \"{{text}}\""
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"noStrings": {
											"type": "boolean"
										},
										"allowedStrings": {
											"type": "array",
											"uniqueItems": true,
											"items": {
												"type": "string"
											}
										},
										"ignoreProps": {
											"type": "boolean"
										},
										"noAttributeStrings": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"jsx-no-script-url": {
						"meta": {
							"docs": {
								"description": "Disallow usage of `javascript:` URLs",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-script-url.md"
							},
							"messages": {
								"noScriptURL": "A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML, try using dangerouslySetInnerHTML instead."
							},
							"schema": {
								"anyOf": [
									{
										"type": "array",
										"items": [
											{
												"type": "array",
												"uniqueItems": true,
												"items": {
													"type": "object",
													"properties": {
														"name": {
															"type": "string"
														},
														"props": {
															"type": "array",
															"items": {
																"type": "string",
																"uniqueItems": true
															}
														}
													},
													"required": [
														"name",
														"props"
													],
													"additionalProperties": false
												}
											},
											{
												"type": "object",
												"properties": {
													"includeFromSettings": {
														"type": "boolean"
													}
												},
												"additionalItems": false
											}
										],
										"additionalItems": false
									},
									{
										"type": "array",
										"items": [
											{
												"type": "object",
												"properties": {
													"includeFromSettings": {
														"type": "boolean"
													}
												},
												"additionalItems": false
											}
										],
										"additionalItems": false
									}
								]
							}
						}
					},
					"jsx-no-target-blank": {
						"meta": {
							"fixable": "code",
							"docs": {
								"description": "Disallow `target=\"_blank\"` attribute without `rel=\"noreferrer\"`",
								"category": "Best Practices",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-target-blank.md"
							},
							"messages": {
								"noTargetBlankWithoutNoreferrer": "Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations",
								"noTargetBlankWithoutNoopener": "Using target=\"_blank\" without rel=\"noreferrer\" or rel=\"noopener\" (the former implies the latter and is preferred due to wider support) is a security risk: see https://mathiasbynens.github.io/rel-noopener/#recommendations"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowReferrer": {
											"type": "boolean"
										},
										"enforceDynamicLinks": {
											"enum": [
												"always",
												"never"
											]
										},
										"warnOnSpreadAttributes": {
											"type": "boolean"
										},
										"links": {
											"type": "boolean",
											"default": true
										},
										"forms": {
											"type": "boolean",
											"default": false
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"jsx-no-useless-fragment": {
						"meta": {
							"type": "suggestion",
							"fixable": "code",
							"docs": {
								"description": "Disallow unnecessary fragments",
								"category": "Possible Errors",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-useless-fragment.md"
							},
							"messages": {
								"NeedsMoreChildren": "Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.",
								"ChildOfHtmlElement": "Passing a fragment to an HTML element is useless."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowExpressions": {
											"type": "boolean"
										}
									}
								}
							]
						}
					},
					"jsx-one-expression-per-line": {
						"meta": {
							"docs": {
								"description": "Require one JSX element per line",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-one-expression-per-line.md"
							},
							"fixable": "whitespace",
							"messages": {
								"moveToNewLine": "`{{descriptor}}` must be placed on a new line"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allow": {
											"enum": [
												"none",
												"literal",
												"single-child",
												"non-jsx"
											]
										}
									},
									"default": {
										"allow": "none"
									},
									"additionalProperties": false
								}
							]
						}
					},
					"jsx-no-undef": {
						"meta": {
							"docs": {
								"description": "Disallow undeclared variables in JSX",
								"category": "Possible Errors",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-undef.md"
							},
							"messages": {
								"undefined": "'{{identifier}}' is not defined."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowGlobals": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"jsx-curly-brace-presence": {
						"meta": {
							"docs": {
								"description": "Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-brace-presence.md"
							},
							"fixable": "code",
							"messages": {
								"unnecessaryCurly": "Curly braces are unnecessary here.",
								"missingCurly": "Need to wrap this literal in a JSX expression."
							},
							"schema": [
								{
									"anyOf": [
										{
											"type": "object",
											"properties": {
												"props": {
													"enum": [
														"always",
														"never",
														"ignore"
													]
												},
												"children": {
													"enum": [
														"always",
														"never",
														"ignore"
													]
												},
												"propElementValues": {
													"enum": [
														"always",
														"never",
														"ignore"
													]
												}
											},
											"additionalProperties": false
										},
										{
											"enum": [
												"always",
												"never",
												"ignore"
											]
										}
									]
								}
							]
						}
					},
					"jsx-pascal-case": {
						"meta": {
							"docs": {
								"description": "Enforce PascalCase for user-defined JSX components",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-pascal-case.md"
							},
							"messages": {
								"usePascalCase": "Imported JSX component {{name}} must be in PascalCase",
								"usePascalOrSnakeCase": "Imported JSX component {{name}} must be in PascalCase or SCREAMING_SNAKE_CASE"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowAllCaps": {
											"type": "boolean"
										},
										"allowLeadingUnderscore": {
											"type": "boolean"
										},
										"allowNamespace": {
											"type": "boolean"
										},
										"ignore": {
											"items": [
												{
													"type": "string"
												}
											],
											"minItems": 0,
											"type": "array",
											"uniqueItems": true
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"jsx-fragments": {
						"meta": {
							"docs": {
								"description": "Enforce shorthand or standard form for React fragments",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-fragments.md"
							},
							"fixable": "code",
							"messages": {
								"fragmentsNotSupported": "Fragments are only supported starting from React v16.2. Please disable the `react/jsx-fragments` rule in `eslint` settings or upgrade your version of React.",
								"preferPragma": "Prefer {{react}}.{{fragment}} over fragment shorthand",
								"preferFragment": "Prefer fragment shorthand over {{react}}.{{fragment}}"
							},
							"schema": [
								{
									"enum": [
										"syntax",
										"element"
									]
								}
							]
						}
					},
					"jsx-props-no-multi-spaces": {
						"meta": {
							"docs": {
								"description": "Disallow multiple spaces between inline JSX props",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-multi-spaces.md"
							},
							"fixable": "code",
							"messages": {
								"noLineGap": "Expected no line gap between “{{prop1}}” and “{{prop2}}”",
								"onlyOneSpace": "Expected only one space between “{{prop1}}” and “{{prop2}}”"
							},
							"schema": []
						}
					},
					"jsx-props-no-spreading": {
						"meta": {
							"docs": {
								"description": "Disallow JSX prop spreading",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-spreading.md"
							},
							"messages": {
								"noSpreading": "Prop spreading is forbidden"
							},
							"schema": [
								{
									"allOf": [
										{
											"type": "object",
											"properties": {
												"html": {
													"enum": [
														"enforce",
														"ignore"
													]
												},
												"custom": {
													"enum": [
														"enforce",
														"ignore"
													]
												},
												"exceptions": {
													"type": "array",
													"items": {
														"type": "string",
														"uniqueItems": true
													}
												}
											}
										},
										{
											"not": {
												"type": "object",
												"required": [
													"html",
													"custom"
												],
												"properties": {
													"html": {
														"enum": [
															"ignore"
														]
													},
													"custom": {
														"enum": [
															"ignore"
														]
													},
													"exceptions": {
														"type": "array",
														"minItems": 0,
														"maxItems": 0
													}
												}
											}
										}
									]
								}
							]
						}
					},
					"jsx-sort-default-props": {
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"sort-default-props"
							],
							"docs": {
								"description": "Enforce defaultProps declarations alphabetical sorting",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-default-props.md"
							},
							"messages": {
								"propsNotSorted": "Default prop types declarations should be sorted alphabetically"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"ignoreCase": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"jsx-sort-props": {
						"meta": {
							"docs": {
								"description": "Enforce props alphabetical sorting",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-props.md"
							},
							"fixable": "code",
							"messages": {
								"noUnreservedProps": "A customized reserved first list must only contain a subset of React reserved props. Remove: {{unreservedWords}}",
								"listIsEmpty": "A customized reserved first list must not be empty",
								"listReservedPropsFirst": "Reserved props must be listed before all other props",
								"listCallbacksLast": "Callbacks must be listed after all other props",
								"listShorthandFirst": "Shorthand props must be listed before all other props",
								"listShorthandLast": "Shorthand props must be listed after all other props",
								"listMultilineFirst": "Multiline props must be listed before all other props",
								"listMultilineLast": "Multiline props must be listed after all other props",
								"sortPropsByAlpha": "Props should be sorted alphabetically"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"callbacksLast": {
											"type": "boolean"
										},
										"shorthandFirst": {
											"type": "boolean"
										},
										"shorthandLast": {
											"type": "boolean"
										},
										"multiline": {
											"enum": [
												"ignore",
												"first",
												"last"
											],
											"default": "ignore"
										},
										"ignoreCase": {
											"type": "boolean"
										},
										"noSortAlphabetically": {
											"type": "boolean"
										},
										"reservedFirst": {
											"type": [
												"array",
												"boolean"
											]
										},
										"locale": {
											"type": "string",
											"default": "auto"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"jsx-space-before-closing": {
						"meta": {
							"deprecated": true,
							"replacedBy": [
								"jsx-tag-spacing"
							],
							"docs": {
								"description": "Enforce spacing before closing bracket in JSX",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-space-before-closing.md"
							},
							"fixable": "code",
							"messages": {
								"noSpaceBeforeClose": "A space is forbidden before closing bracket",
								"needSpaceBeforeClose": "A space is required before closing bracket"
							},
							"schema": [
								{
									"enum": [
										"always",
										"never"
									]
								}
							]
						}
					},
					"jsx-tag-spacing": {
						"meta": {
							"docs": {
								"description": "Enforce whitespace in and around the JSX opening and closing brackets",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-tag-spacing.md"
							},
							"fixable": "whitespace",
							"messages": {
								"selfCloseSlashNoSpace": "Whitespace is forbidden between `/` and `>`; write `/>`",
								"selfCloseSlashNeedSpace": "Whitespace is required between `/` and `>`; write `/ >`",
								"closeSlashNoSpace": "Whitespace is forbidden between `<` and `/`; write `</`",
								"closeSlashNeedSpace": "Whitespace is required between `<` and `/`; write `< /`",
								"beforeSelfCloseNoSpace": "A space is forbidden before closing bracket",
								"beforeSelfCloseNeedSpace": "A space is required before closing bracket",
								"beforeSelfCloseNeedNewline": "A newline is required before closing bracket",
								"afterOpenNoSpace": "A space is forbidden after opening bracket",
								"afterOpenNeedSpace": "A space is required after opening bracket",
								"beforeCloseNoSpace": "A space is forbidden before closing bracket",
								"beforeCloseNeedSpace": "Whitespace is required before closing bracket",
								"beforeCloseNeedNewline": "A newline is required before closing bracket"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"closingSlash": {
											"enum": [
												"always",
												"never",
												"allow"
											]
										},
										"beforeSelfClosing": {
											"enum": [
												"always",
												"proportional-always",
												"never",
												"allow"
											]
										},
										"afterOpening": {
											"enum": [
												"always",
												"allow-multiline",
												"never",
												"allow"
											]
										},
										"beforeClosing": {
											"enum": [
												"always",
												"proportional-always",
												"never",
												"allow"
											]
										}
									},
									"default": {
										"closingSlash": "never",
										"beforeSelfClosing": "always",
										"afterOpening": "never",
										"beforeClosing": "allow"
									},
									"additionalProperties": false
								}
							]
						}
					},
					"jsx-uses-react": {
						"meta": {
							"docs": {
								"description": "Disallow React to be incorrectly marked as unused",
								"category": "Best Practices",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-react.md"
							},
							"schema": []
						}
					},
					"jsx-uses-vars": {
						"meta": {
							"docs": {
								"description": "Disallow variables used in JSX to be incorrectly marked as unused",
								"category": "Best Practices",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-vars.md"
							},
							"schema": []
						}
					},
					"jsx-wrap-multilines": {
						"meta": {
							"docs": {
								"description": "Disallow missing parentheses around multiline JSX",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-wrap-multilines.md"
							},
							"fixable": "code",
							"messages": {
								"missingParens": "Missing parentheses around multilines JSX",
								"extraParens": "Expected no parentheses around multilines JSX",
								"parensOnNewLines": "Parentheses around JSX should be on separate lines"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"declaration": {
											"enum": [
												true,
												false,
												"ignore",
												"parens",
												"parens-new-line",
												"never"
											]
										},
										"assignment": {
											"enum": [
												true,
												false,
												"ignore",
												"parens",
												"parens-new-line",
												"never"
											]
										},
										"return": {
											"enum": [
												true,
												false,
												"ignore",
												"parens",
												"parens-new-line",
												"never"
											]
										},
										"arrow": {
											"enum": [
												true,
												false,
												"ignore",
												"parens",
												"parens-new-line",
												"never"
											]
										},
										"condition": {
											"enum": [
												true,
												false,
												"ignore",
												"parens",
												"parens-new-line",
												"never"
											]
										},
										"logical": {
											"enum": [
												true,
												false,
												"ignore",
												"parens",
												"parens-new-line",
												"never"
											]
										},
										"prop": {
											"enum": [
												true,
												false,
												"ignore",
												"parens",
												"parens-new-line",
												"never"
											]
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"no-invalid-html-attribute": {
						"meta": {
							"docs": {
								"description": "Disallow usage of invalid attributes",
								"category": "Possible Errors",
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-invalid-html-attribute.md"
							},
							"messages": {
								"emptyIsMeaningless": "An empty “{{attributeName}}” attribute is meaningless.",
								"neverValid": "“{{reportingValue}}” is never a valid “{{attributeName}}” attribute value.",
								"noEmpty": "An empty “{{attributeName}}” attribute is meaningless.",
								"noMethod": "The ”{{attributeName}}“ attribute cannot be a method.",
								"notAlone": "“{{reportingValue}}” must be directly followed by “{{missingValue}}”.",
								"notPaired": "“{{reportingValue}}” can not be directly followed by “{{secondValue}}” without “{{missingValue}}”.",
								"notValidFor": "“{{reportingValue}}” is not a valid “{{attributeName}}” attribute value for <{{elementName}}>.",
								"onlyMeaningfulFor": "The ”{{attributeName}}“ attribute only has meaning on the tags: {{tagNames}}",
								"onlyStrings": "“{{attributeName}}” attribute only supports strings.",
								"spaceDelimited": "”{{attributeName}}“ attribute values should be space delimited.",
								"suggestRemoveDefault": "\"remove {{attributeName}}\"",
								"suggestRemoveEmpty": "\"remove empty attribute {{attributeName}}\"",
								"suggestRemoveInvalid": "“remove invalid attribute {{reportingValue}}”",
								"suggestRemoveWhitespaces": "remove whitespaces in “{{attributeName}}”",
								"suggestRemoveNonString": "remove non-string value in “{{attributeName}}”"
							},
							"schema": [
								{
									"type": "array",
									"uniqueItems": true,
									"items": {
										"enum": [
											"rel"
										]
									}
								}
							],
							"type": "suggestion",
							"hasSuggestions": true
						}
					},
					"no-access-state-in-setstate": {
						"meta": {
							"docs": {
								"description": "Disallow when this.state is accessed within setState",
								"category": "Possible Errors",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-access-state-in-setstate.md"
							},
							"messages": {
								"useCallback": "Use callback in setState when referencing the previous state."
							}
						}
					},
					"no-adjacent-inline-elements": {
						"meta": {
							"docs": {
								"description": "Disallow adjacent inline elements not separated by whitespace.",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-adjacent-inline-elements.md"
							},
							"schema": [],
							"messages": {
								"inlineElement": "Child elements which render as inline HTML elements should be separated by a space or wrapped in block level elements."
							}
						}
					},
					"no-array-index-key": {
						"meta": {
							"docs": {
								"description": "Disallow usage of Array index in keys",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-array-index-key.md"
							},
							"messages": {
								"noArrayIndex": "Do not use Array index in keys"
							},
							"schema": []
						}
					},
					"no-arrow-function-lifecycle": {
						"meta": {
							"docs": {
								"description": "Lifecycle methods should be methods on the prototype, not class fields",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-arrow-function-lifecycle.md"
							},
							"messages": {
								"lifecycle": "{{propertyName}} is a React lifecycle method, and should not be an arrow function or in a class field. Use an instance method instead."
							},
							"schema": [],
							"fixable": "code"
						}
					},
					"no-children-prop": {
						"meta": {
							"docs": {
								"description": "Disallow passing of children as props",
								"category": "Best Practices",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-children-prop.md"
							},
							"messages": {
								"nestChildren": "Do not pass children as props. Instead, nest children between the opening and closing tags.",
								"passChildrenAsArgs": "Do not pass children as props. Instead, pass them as additional arguments to React.createElement.",
								"nestFunction": "Do not nest a function between the opening and closing tags. Instead, pass it as a prop.",
								"passFunctionAsArgs": "Do not pass a function as an additional argument to React.createElement. Instead, pass it as a prop."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowFunctions": {
											"type": "boolean",
											"default": false
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"no-danger": {
						"meta": {
							"docs": {
								"description": "Disallow usage of dangerous JSX properties",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger.md"
							},
							"messages": {
								"dangerousProp": "Dangerous property '{{name}}' found"
							},
							"schema": []
						}
					},
					"no-danger-with-children": {
						"meta": {
							"docs": {
								"description": "Disallow when a DOM element is using both children and dangerouslySetInnerHTML",
								"category": "Possible Errors",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger-with-children.md"
							},
							"messages": {
								"dangerWithChildren": "Only set one of `children` or `props.dangerouslySetInnerHTML`"
							},
							"schema": []
						}
					},
					"no-deprecated": {
						"meta": {
							"docs": {
								"description": "Disallow usage of deprecated methods",
								"category": "Best Practices",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-deprecated.md"
							},
							"messages": {
								"deprecated": "{{oldMethod}} is deprecated since React {{version}}{{newMethod}}{{refs}}"
							},
							"schema": []
						}
					},
					"no-did-mount-set-state": {
						"meta": {
							"docs": {
								"description": "Disallow usage of setState in componentDidMount",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-mount-set-state.md"
							},
							"messages": {
								"noSetState": "Do not use setState in {{name}}"
							},
							"schema": [
								{
									"enum": [
										"disallow-in-func"
									]
								}
							]
						}
					},
					"no-did-update-set-state": {
						"meta": {
							"docs": {
								"description": "Disallow usage of setState in componentDidUpdate",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-update-set-state.md"
							},
							"messages": {
								"noSetState": "Do not use setState in {{name}}"
							},
							"schema": [
								{
									"enum": [
										"disallow-in-func"
									]
								}
							]
						}
					},
					"no-direct-mutation-state": {
						"meta": {
							"docs": {
								"description": "Disallow direct mutation of this.state",
								"category": "Possible Errors",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-direct-mutation-state.md"
							},
							"messages": {
								"noDirectMutation": "Do not mutate state directly. Use setState()."
							}
						}
					},
					"no-find-dom-node": {
						"meta": {
							"docs": {
								"description": "Disallow usage of findDOMNode",
								"category": "Best Practices",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-find-dom-node.md"
							},
							"messages": {
								"noFindDOMNode": "Do not use findDOMNode. It doesn’t work with function components and is deprecated in StrictMode. See https://reactjs.org/docs/react-dom.html#finddomnode"
							},
							"schema": []
						}
					},
					"no-is-mounted": {
						"meta": {
							"docs": {
								"description": "Disallow usage of isMounted",
								"category": "Best Practices",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-is-mounted.md"
							},
							"messages": {
								"noIsMounted": "Do not use isMounted"
							},
							"schema": []
						}
					},
					"no-multi-comp": {
						"meta": {
							"docs": {
								"description": "Disallow multiple component definition per file",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-multi-comp.md"
							},
							"messages": {
								"onlyOneComponent": "Declare only one React component per file"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"ignoreStateless": {
											"default": false,
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"no-namespace": {
						"meta": {
							"docs": {
								"description": "Enforce that namespaces are not used in React elements",
								"category": "Possible Errors",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-namespace.md"
							},
							"messages": {
								"noNamespace": "React component {{name}} must not be in a namespace, as React does not support them"
							},
							"schema": []
						}
					},
					"no-set-state": {
						"meta": {
							"docs": {
								"description": "Disallow usage of setState",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-set-state.md"
							},
							"messages": {
								"noSetState": "Do not use setState"
							},
							"schema": []
						}
					},
					"no-string-refs": {
						"meta": {
							"docs": {
								"description": "Disallow using string references",
								"category": "Best Practices",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-string-refs.md"
							},
							"messages": {
								"thisRefsDeprecated": "Using this.refs is deprecated.",
								"stringInRefDeprecated": "Using string literals in ref attributes is deprecated."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"noTemplateLiterals": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"no-redundant-should-component-update": {
						"meta": {
							"docs": {
								"description": "Disallow usage of shouldComponentUpdate when extending React.PureComponent",
								"category": "Possible Errors",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-redundant-should-component-update.md"
							},
							"messages": {
								"noShouldCompUpdate": "{{component}} does not need shouldComponentUpdate when extending React.PureComponent."
							},
							"schema": []
						}
					},
					"no-render-return-value": {
						"meta": {
							"docs": {
								"description": "Disallow usage of the return value of ReactDOM.render",
								"category": "Best Practices",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-render-return-value.md"
							},
							"messages": {
								"noReturnValue": "Do not depend on the return value from {{node}}.render"
							},
							"schema": []
						}
					},
					"no-this-in-sfc": {
						"meta": {
							"docs": {
								"description": "Disallow `this` from being used in stateless functional components",
								"category": "Possible Errors",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-this-in-sfc.md"
							},
							"messages": {
								"noThisInSFC": "Stateless functional components should not use `this`"
							},
							"schema": []
						}
					},
					"no-typos": {
						"meta": {
							"docs": {
								"description": "Disallow common typos",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-typos.md"
							},
							"messages": {
								"typoPropTypeChain": "Typo in prop type chain qualifier: {{name}}",
								"typoPropType": "Typo in declared prop type: {{name}}",
								"typoStaticClassProp": "Typo in static class property declaration",
								"typoPropDeclaration": "Typo in property declaration",
								"typoLifecycleMethod": "Typo in component lifecycle method declaration: {{actual}} should be {{expected}}",
								"staticLifecycleMethod": "Lifecycle method should be static: {{method}}",
								"noPropTypesBinding": "`'prop-types'` imported without a local `PropTypes` binding.",
								"noReactBinding": "`'react'` imported without a local `React` binding."
							},
							"schema": []
						}
					},
					"no-unescaped-entities": {
						"meta": {
							"docs": {
								"description": "Disallow unescaped HTML entities from appearing in markup",
								"category": "Possible Errors",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unescaped-entities.md"
							},
							"messages": {
								"unescapedEntity": "HTML entity, `{{entity}}` , must be escaped.",
								"unescapedEntityAlts": "`{{entity}}` can be escaped with {{alts}}."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"forbid": {
											"type": "array",
											"items": {
												"anyOf": [
													{
														"type": "string"
													},
													{
														"type": "object",
														"properties": {
															"char": {
																"type": "string"
															},
															"alternatives": {
																"type": "array",
																"uniqueItems": true,
																"items": {
																	"type": "string"
																}
															}
														}
													}
												]
											}
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"no-unknown-property": {
						"meta": {
							"docs": {
								"description": "Disallow usage of unknown DOM property",
								"category": "Possible Errors",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unknown-property.md"
							},
							"fixable": "code",
							"messages": {
								"invalidPropOnTag": "Invalid property '{{name}}' found on tag '{{tagName}}', but it is only allowed on: {{allowedTags}}",
								"unknownPropWithStandardName": "Unknown property '{{name}}' found, use '{{standardName}}' instead",
								"unknownProp": "Unknown property '{{name}}' found",
								"dataLowercaseRequired": "React does not recognize data-* props with uppercase characters on a DOM element. Found '{{name}}', use '{{lowerCaseName}}' instead"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"ignore": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"requireDataLowercase": {
											"type": "boolean",
											"default": false
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"no-unsafe": {
						"meta": {
							"docs": {
								"description": "Disallow usage of unsafe lifecycle methods",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unsafe.md"
							},
							"messages": {
								"unsafeMethod": "{{method}} is unsafe for use in async rendering. Update the component to use {{newMethod}} instead. {{details}}"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"checkAliases": {
											"default": false,
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"no-unstable-nested-components": {
						"meta": {
							"docs": {
								"description": "Disallow creating unstable components inside components",
								"category": "Possible Errors",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unstable-nested-components.md"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"customValidators": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"allowAsProps": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"no-unused-class-component-methods": {
						"meta": {
							"docs": {
								"description": "Disallow declaring unused methods of component class",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-class-component-methods.md"
							},
							"messages": {
								"unused": "Unused method or property \"{{name}}\"",
								"unusedWithClass": "Unused method or property \"{{name}}\" of class \"{{className}}\""
							},
							"schema": []
						}
					},
					"no-unused-prop-types": {
						"meta": {
							"docs": {
								"description": "Disallow definitions of unused propTypes",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-prop-types.md"
							},
							"messages": {
								"unusedPropType": "'{{name}}' PropType is defined but prop is never used"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"ignore": {
											"type": "array",
											"items": {
												"type": "string"
											},
											"uniqueItems": true
										},
										"customValidators": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"skipShapeProps": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"no-unused-state": {
						"meta": {
							"docs": {
								"description": "Disallow definitions of unused state",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-state.md"
							},
							"messages": {
								"unusedStateField": "Unused state field: '{{name}}'"
							},
							"schema": []
						}
					},
					"no-object-type-as-default-prop": {
						"meta": {
							"docs": {
								"description": "Disallow usage of referential-type variables as default param in functional component",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-object-type-as-default-prop.md"
							},
							"messages": {
								"forbiddenTypeDefaultParam": "{{propName}} has a/an {{forbiddenType}} as default prop. This could lead to potential infinite render loop in React. Use a variable reference instead of {{forbiddenType}}."
							}
						}
					},
					"no-will-update-set-state": {
						"meta": {
							"docs": {
								"description": "Disallow usage of setState in componentWillUpdate",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-will-update-set-state.md"
							},
							"messages": {
								"noSetState": "Do not use setState in {{name}}"
							},
							"schema": [
								{
									"enum": [
										"disallow-in-func"
									]
								}
							]
						}
					},
					"prefer-es6-class": {
						"meta": {
							"docs": {
								"description": "Enforce ES5 or ES6 class for React Components",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-es6-class.md"
							},
							"messages": {
								"shouldUseES6Class": "Component should use es6 class instead of createClass",
								"shouldUseCreateClass": "Component should use createClass instead of es6 class"
							},
							"schema": [
								{
									"enum": [
										"always",
										"never"
									]
								}
							]
						}
					},
					"prefer-exact-props": {
						"meta": {
							"docs": {
								"description": "Prefer exact proptype definitions",
								"category": "Possible Errors",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-exact-props.md"
							},
							"messages": {
								"propTypes": "Component propTypes should be exact by using {{exactPropWrappers}}.",
								"flow": "Component flow props should be set with exact objects."
							},
							"schema": []
						}
					},
					"prefer-read-only-props": {
						"meta": {
							"docs": {
								"description": "Enforce that props are read-only",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-read-only-props.md"
							},
							"fixable": "code",
							"messages": {
								"readOnlyProp": "Prop '{{name}}' should be read-only."
							},
							"schema": []
						}
					},
					"prefer-stateless-function": {
						"meta": {
							"docs": {
								"description": "Enforce stateless components to be written as a pure function",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-stateless-function.md"
							},
							"messages": {
								"componentShouldBePure": "Component should be written as a pure function"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"ignorePureComponents": {
											"default": false,
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"prop-types": {
						"meta": {
							"docs": {
								"description": "Disallow missing props validation in a React component definition",
								"category": "Best Practices",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prop-types.md"
							},
							"messages": {
								"missingPropType": "'{{name}}' is missing in props validation"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"ignore": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"customValidators": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"skipUndeclared": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"react-in-jsx-scope": {
						"meta": {
							"docs": {
								"description": "Disallow missing React when using JSX",
								"category": "Possible Errors",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/react-in-jsx-scope.md"
							},
							"messages": {
								"notInScope": "'{{name}}' must be in scope when using JSX"
							},
							"schema": []
						}
					},
					"require-default-props": {
						"meta": {
							"docs": {
								"description": "Enforce a defaultProps definition for every prop that is not a required prop",
								"category": "Best Practices",
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-default-props.md"
							},
							"messages": {
								"noDefaultWithRequired": "propType \"{{name}}\" is required and should not have a defaultProps declaration.",
								"shouldHaveDefault": "propType \"{{name}}\" is not required, but has no corresponding defaultProps declaration.",
								"noDefaultPropsWithFunction": "Don’t use defaultProps with function components.",
								"shouldAssignObjectDefault": "propType \"{{name}}\" is not required, but has no corresponding default argument value.",
								"destructureInSignature": "Must destructure props in the function signature to initialize an optional prop."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"forbidDefaultForRequired": {
											"type": "boolean"
										},
										"classes": {
											"enum": [
												"defaultProps",
												"ignore"
											]
										},
										"functions": {
											"enum": [
												"defaultArguments",
												"defaultProps",
												"ignore"
											]
										},
										"ignoreFunctionalComponents": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"require-optimization": {
						"meta": {
							"docs": {
								"description": "Enforce React components to have a shouldComponentUpdate method",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-optimization.md"
							},
							"messages": {
								"noShouldComponentUpdate": "Component is not optimized. Please add a shouldComponentUpdate method."
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allowDecorators": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"require-render-return": {
						"meta": {
							"docs": {
								"description": "Enforce ES5 or ES6 class for returning value in render function",
								"category": "Possible Errors",
								"recommended": true,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-render-return.md"
							},
							"messages": {
								"noRenderReturn": "Your render method should have a return statement"
							},
							"schema": []
						}
					},
					"self-closing-comp": {
						"meta": {
							"docs": {
								"description": "Disallow extra closing tags for components without children",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/self-closing-comp.md"
							},
							"fixable": "code",
							"messages": {
								"notSelfClosing": "Empty components are self-closing"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"component": {
											"default": true,
											"type": "boolean"
										},
										"html": {
											"default": true,
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"sort-comp": {
						"meta": {
							"docs": {
								"description": "Enforce component methods order",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-comp.md"
							},
							"messages": {
								"unsortedProps": "{{propA}} should be placed {{position}} {{propB}}"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"order": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"groups": {
											"type": "object",
											"patternProperties": {
												"^.*$": {
													"type": "array",
													"items": {
														"type": "string"
													}
												}
											}
										}
									},
									"additionalProperties": false
								}
							]
						},
						"defaultConfig": {
							"order": [
								"static-methods",
								"lifecycle",
								"everything-else",
								"render"
							],
							"groups": {
								"lifecycle": [
									"displayName",
									"propTypes",
									"contextTypes",
									"childContextTypes",
									"mixins",
									"statics",
									"defaultProps",
									"constructor",
									"getDefaultProps",
									"state",
									"getInitialState",
									"getChildContext",
									"getDerivedStateFromProps",
									"componentWillMount",
									"UNSAFE_componentWillMount",
									"componentDidMount",
									"componentWillReceiveProps",
									"UNSAFE_componentWillReceiveProps",
									"shouldComponentUpdate",
									"componentWillUpdate",
									"UNSAFE_componentWillUpdate",
									"getSnapshotBeforeUpdate",
									"componentDidUpdate",
									"componentDidCatch",
									"componentWillUnmount"
								]
							}
						}
					},
					"sort-default-props": {
						"meta": {
							"docs": {
								"description": "Enforce defaultProps declarations alphabetical sorting",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-default-props.md"
							},
							"messages": {
								"propsNotSorted": "Default prop types declarations should be sorted alphabetically"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"ignoreCase": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"sort-prop-types": {
						"meta": {
							"docs": {
								"description": "Enforce propTypes declarations alphabetical sorting",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-prop-types.md"
							},
							"fixable": "code",
							"messages": {
								"requiredPropsFirst": "Required prop types must be listed before all other prop types",
								"callbackPropsLast": "Callback prop types must be listed after all other prop types",
								"propsNotSorted": "Prop types declarations should be sorted alphabetically"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"requiredFirst": {
											"type": "boolean"
										},
										"callbacksLast": {
											"type": "boolean"
										},
										"ignoreCase": {
											"type": "boolean"
										},
										"noSortAlphabetically": {
											"type": "boolean"
										},
										"sortShapeProp": {
											"type": "boolean"
										},
										"checkTypes": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"state-in-constructor": {
						"meta": {
							"docs": {
								"description": "Enforce class component state initialization style",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/state-in-constructor.md"
							},
							"messages": {
								"stateInitConstructor": "State initialization should be in a constructor",
								"stateInitClassProp": "State initialization should be in a class property"
							},
							"schema": [
								{
									"enum": [
										"always",
										"never"
									]
								}
							]
						}
					},
					"static-property-placement": {
						"meta": {
							"docs": {
								"description": "Enforces where React component static properties should be positioned.",
								"category": "Stylistic Issues",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/static-property-placement.md"
							},
							"fixable": null,
							"messages": {
								"notStaticClassProp": "'{{name}}' should be declared as a static class property.",
								"notGetterClassFunc": "'{{name}}' should be declared as a static getter class function.",
								"declareOutsideClass": "'{{name}}' should be declared outside the class body."
							},
							"schema": [
								{
									"enum": [
										"static public field",
										"static getter",
										"property assignment"
									]
								},
								{
									"type": "object",
									"properties": {
										"propTypes": {
											"enum": [
												"static public field",
												"static getter",
												"property assignment"
											]
										},
										"defaultProps": {
											"enum": [
												"static public field",
												"static getter",
												"property assignment"
											]
										},
										"childContextTypes": {
											"enum": [
												"static public field",
												"static getter",
												"property assignment"
											]
										},
										"contextTypes": {
											"enum": [
												"static public field",
												"static getter",
												"property assignment"
											]
										},
										"contextType": {
											"enum": [
												"static public field",
												"static getter",
												"property assignment"
											]
										},
										"displayName": {
											"enum": [
												"static public field",
												"static getter",
												"property assignment"
											]
										}
									},
									"additionalProperties": false
								}
							]
						}
					},
					"style-prop-object": {
						"meta": {
							"docs": {
								"description": "Enforce style prop value is an object",
								"category": "Possible Errors",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/style-prop-object.md"
							},
							"messages": {
								"stylePropNotObject": "Style prop value must be an object"
							},
							"schema": [
								{
									"type": "object",
									"properties": {
										"allow": {
											"type": "array",
											"items": {
												"type": "string"
											},
											"additionalItems": false,
											"uniqueItems": true
										}
									}
								}
							]
						}
					},
					"void-dom-elements-no-children": {
						"meta": {
							"docs": {
								"description": "Disallow void DOM elements (e.g. `<img />`, `<br />`) from receiving children",
								"category": "Best Practices",
								"recommended": false,
								"url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/void-dom-elements-no-children.md"
							},
							"messages": {
								"noChildrenInVoidEl": "Void DOM element <{{element}} /> cannot receive children."
							},
							"schema": []
						}
					}
				}
			}
		},
		"rules": {
			"react/react-in-jsx-scope": 0,
			"react/jsx-uses-react": 0
		}
	},
	{
		"plugins": {
			"react-hooks": {
				"configs": {
					"recommended": {
						"plugins": [
							"react-hooks"
						],
						"rules": {
							"react-hooks/rules-of-hooks": "error",
							"react-hooks/exhaustive-deps": "warn"
						}
					}
				},
				"rules": {
					"rules-of-hooks": {
						"meta": {
							"type": "problem",
							"docs": {
								"description": "enforces the Rules of Hooks",
								"recommended": true,
								"url": "https://reactjs.org/docs/hooks-rules.html"
							}
						}
					},
					"exhaustive-deps": {
						"meta": {
							"type": "suggestion",
							"docs": {
								"description": "verifies the list of dependencies for Hooks like useEffect and similar",
								"recommended": true,
								"url": "https://github.com/facebook/react/issues/14920"
							},
							"fixable": "code",
							"hasSuggestions": true,
							"schema": [
								{
									"type": "object",
									"additionalProperties": false,
									"enableDangerousAutofixThisMayCauseInfiniteLoops": false,
									"properties": {
										"additionalHooks": {
											"type": "string"
										},
										"enableDangerousAutofixThisMayCauseInfiniteLoops": {
											"type": "boolean"
										}
									}
								}
							]
						}
					}
				}
			}
		},
		"rules": {
			"@typescript-eslint/no-explicit-any": 0,
			"no-undef": 0,
			"react-hooks/rules-of-hooks": "error",
			"react-hooks/exhaustive-deps": "warn"
		}
	}
]