import { app, BrowserWindow, ipcMain, session } from 'electron';
import { enable, initialize } from '@electron/remote/main';
import * as path from 'path';
import * as fs from 'graceful-fs';
import 'dotenv/config';
import * as cp from 'child_process';
import { promisify } from 'util';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const REACT_DEV_TOOLS_ID = 'fmkadmapgofadopljbjfkapdkoienihi';
export function getDevToolsPath(id: string) {
    const folder =
        process.platform === 'linux' ? '/home/bobby/.config/google-chrome/Default/Extensions'
        : process.platform === 'win32' ? 'C:\\Users\\bobby\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions'
        : '';
    const devPath = [folder, id].join(path.sep);
    const version = fs.readdirSync(devPath)[0];
    return [devPath, version].join(path.sep);
}

app.commandLine.appendSwitch('enable-features', 'WebSpeechAPI');
app.commandLine.appendSwitch('enable-speech-dispatcher');
initialize();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
let browserWindow: BrowserWindow | undefined;

if (require('electron-squirrel-startup')) {
    app.quit();
}

const createWindow = (): BrowserWindow => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            nodeIntegration: true,
            nodeIntegrationInSubFrames: true,
            nodeIntegrationInWorker: true,
            webSecurity: false,
            contextIsolation: false,
            zoomFactor: 0.8
        }
    });

    enable(mainWindow.webContents);
    mainWindow.maximize();
    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools.
    mainWindow.webContents.openDevTools();
    browserWindow = mainWindow;
    return mainWindow;
};

app.whenReady()
    .then(async () => {
        await session.defaultSession.loadExtension(getDevToolsPath(REACT_DEV_TOOLS_ID), { allowFileAccess: true });
        // console.log(result);
    })
    .then(async () => {
        const window = createWindow();
        window.webContents.openDevTools();
    }).then(async () => {
        ipcMain.handle('import-rn', (event: Electron.IpcMainInvokeEvent, rnNumber: string) => {
            // eslint-disable-next-line no-console
            promisify(cp.spawn)('powershell.exe', ['C:\\Users\\bobby\\OneDrive\\Desktop\\Code\\daily-promote\\bin\\importRn.ps1', rnNumber], {}).then((value) => console.log(value));
        });
    })

// // This method will be called when Electron has finished
// // initialization and is ready to create browser windows.
// // Some APIs can only be used after this event occurs.
// app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

process.on('uncaughtException', (error, origin) => {
    // console.error(error.name);
    // console.error(error.message);
    // console.error(error.stack);
    // console.error(origin.toString());

    process.stdout.write(error.name + '\n');
    process.stdout.write(error.message + '\n');
    process.stdout.write(error.stack + '\n');
    process.stdout.write(origin.toString() + '\n');
});
process.setUncaughtExceptionCaptureCallback((error) => {
    fs.appendFileSync('error.json', JSON.stringify(error, null, '\t'));
    // console.error(error.name);
    // console.error(error.message);
    // console.error(error.stack);

    process.stdout.write(error.name + '\n');
    process.stdout.write(error.message + '\n');
    process.stdout.write(error.stack + '\n');
});
// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
