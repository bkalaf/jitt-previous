import { MRT_ColumnDef } from 'material-react-table';
import { IClassifier } from '../../types';
export declare const h: import("material-react-table").MRT_ColumnHelper<IClassifier>;
export declare const helper: {
    bool: <U, UKey extends keyof U>(...dependencies: IDependency<U, UKey>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", $header?: string | undefined) => MRT_ColumnDef<IClassifier, boolean | undefined>;
    clothingCare: <U_1, UKey_1 extends keyof U_1>(...dependencies: IDependency<U_1, UKey_1>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows" | "_id.toString" | "_id.id" | "_id.toJSON" | "_id._bsontype" | "_id.generationTime" | "_id.toHexString" | "_id.equals" | "_id.getTimestamp" | "_id.inspect" | "_id.id.indexOf" | "_id.id.lastIndexOf" | "_id.id.slice" | "_id.id.length" | "_id.id.includes" | "_id.id.at" | "_id.id.toLocaleString" | "_id.id.toString" | "_id.id.join" | "_id.id.reverse" | "_id.id.sort" | "_id.id.every" | "_id.id.some" | "_id.id.forEach" | "_id.id.map" | "_id.id.filter" | "_id.id.reduce" | "_id.id.reduceRight" | "_id.id.find" | "_id.id.findIndex" | "_id.id.fill" | "_id.id.copyWithin" | "_id.id.entries" | "_id.id.keys" | "_id.id.values" | "_id.id.findLast" | "_id.id.findLastIndex" | "_id.id.toReversed" | "_id.id.toSorted" | "_id.id.with" | "_id.id.set" | "_id.id.toJSON" | "_id.id.valueOf" | "_id.id.equals" | "_id.id.write" | "_id.id.compare" | "_id.id.copy" | "_id.id.subarray" | "_id.id.writeBigInt64BE" | "_id.id.writeBigInt64LE" | "_id.id.writeBigUInt64BE" | "_id.id.writeBigUint64BE" | "_id.id.writeBigUInt64LE" | "_id.id.writeBigUint64LE" | "_id.id.writeUIntLE" | "_id.id.writeUintLE" | "_id.id.writeUIntBE" | "_id.id.writeUintBE" | "_id.id.writeIntLE" | "_id.id.writeIntBE" | "_id.id.readBigUInt64BE" | "_id.id.readBigUint64BE" | "_id.id.readBigUInt64LE" | "_id.id.readBigUint64LE" | "_id.id.readBigInt64BE" | "_id.id.readBigInt64LE" | "_id.id.readUIntLE" | "_id.id.readUintLE" | "_id.id.readUIntBE" | "_id.id.readUintBE" | "_id.id.readIntLE" | "_id.id.readIntBE" | "_id.id.readUInt8" | "_id.id.readUint8" | "_id.id.readUInt16LE" | "_id.id.readUint16LE" | "_id.id.readUInt16BE" | "_id.id.readUint16BE" | "_id.id.readUInt32LE" | "_id.id.readUint32LE" | "_id.id.readUInt32BE" | "_id.id.readUint32BE" | "_id.id.readInt8" | "_id.id.readInt16LE" | "_id.id.readInt16BE" | "_id.id.readInt32LE" | "_id.id.readInt32BE" | "_id.id.readFloatLE" | "_id.id.readFloatBE" | "_id.id.readDoubleLE" | "_id.id.readDoubleBE" | "_id.id.swap16" | "_id.id.swap32" | "_id.id.swap64" | "_id.id.writeUInt8" | "_id.id.writeUint8" | "_id.id.writeUInt16LE" | "_id.id.writeUint16LE" | "_id.id.writeUInt16BE" | "_id.id.writeUint16BE" | "_id.id.writeUInt32LE" | "_id.id.writeUint32LE" | "_id.id.writeUInt32BE" | "_id.id.writeUint32BE" | "_id.id.writeInt8" | "_id.id.writeInt16LE" | "_id.id.writeInt16BE" | "_id.id.writeInt32LE" | "_id.id.writeInt32BE" | "_id.id.writeFloatLE" | "_id.id.writeFloatBE" | "_id.id.writeDoubleLE" | "_id.id.writeDoubleBE" | "_id.id.BYTES_PER_ELEMENT" | "_id.id.buffer" | "_id.id.byteLength" | "_id.id.byteOffset" | "_id.id.buffer.slice" | "_id.id.buffer.byteLength" | "hashTags.concat" | "hashTags.indexOf" | "hashTags.lastIndexOf" | "hashTags.slice" | "hashTags.length" | "hashTags.includes" | "hashTags.at" | "hashTags.toLocaleString" | "hashTags.toString" | "hashTags.pop" | "hashTags.push" | "hashTags.join" | "hashTags.shift" | "hashTags.splice" | "hashTags.unshift" | "hashTags.every" | "hashTags.some" | "hashTags.forEach" | "hashTags.map" | "hashTags.filter" | "hashTags.reduce" | "hashTags.reduceRight" | "hashTags.find" | "hashTags.findIndex" | "hashTags.entries" | "hashTags.keys" | "hashTags.values" | "hashTags.flatMap" | "hashTags.flat" | "hashTags.type" | "hashTags.isValid" | "hashTags.toJSON" | "hashTags.addListener" | "hashTags.removeListener" | "hashTags.removeAllListeners" | "hashTags.optional" | "hashTags.description" | "hashTags.min" | "hashTags.max" | "hashTags.remove" | "hashTags.move" | "hashTags.swap" | "hashTags.isEmpty" | "hashTags.sum" | "hashTags.avg" | "hashTags.filtered" | "hashTags.sorted" | "hashTags.snapshot" | `allHashTags.${number}` | `allHashTags.${number}.name` | `allHashTags.${number}._id` | `allHashTags.${number}._id.toString` | `allHashTags.${number}._id.id` | `allHashTags.${number}._id.toJSON` | `allHashTags.${number}._id._bsontype` | `allHashTags.${number}._id.generationTime` | `allHashTags.${number}._id.toHexString` | `allHashTags.${number}._id.equals` | `allHashTags.${number}._id.getTimestamp` | `allHashTags.${number}._id.inspect` | `allHashTags.${number}._id.id.indexOf` | `allHashTags.${number}._id.id.lastIndexOf` | `allHashTags.${number}._id.id.slice` | `allHashTags.${number}._id.id.length` | `allHashTags.${number}._id.id.includes` | `allHashTags.${number}._id.id.at` | `allHashTags.${number}._id.id.toLocaleString` | `allHashTags.${number}._id.id.toString` | `allHashTags.${number}._id.id.join` | `allHashTags.${number}._id.id.reverse` | `allHashTags.${number}._id.id.sort` | `allHashTags.${number}._id.id.every` | `allHashTags.${number}._id.id.some` | `allHashTags.${number}._id.id.forEach` | `allHashTags.${number}._id.id.map` | `allHashTags.${number}._id.id.filter` | `allHashTags.${number}._id.id.reduce` | `allHashTags.${number}._id.id.reduceRight` | `allHashTags.${number}._id.id.find` | `allHashTags.${number}._id.id.findIndex` | `allHashTags.${number}._id.id.fill` | `allHashTags.${number}._id.id.copyWithin` | `allHashTags.${number}._id.id.entries` | `allHashTags.${number}._id.id.keys` | `allHashTags.${number}._id.id.values` | `allHashTags.${number}._id.id.findLast` | `allHashTags.${number}._id.id.findLastIndex` | `allHashTags.${number}._id.id.toReversed` | `allHashTags.${number}._id.id.toSorted` | `allHashTags.${number}._id.id.with` | `allHashTags.${number}._id.id.set` | `allHashTags.${number}._id.id.toJSON` | `allHashTags.${number}._id.id.valueOf` | `allHashTags.${number}._id.id.equals` | `allHashTags.${number}._id.id.write` | `allHashTags.${number}._id.id.compare` | `allHashTags.${number}._id.id.copy` | `allHashTags.${number}._id.id.subarray` | `allHashTags.${number}._id.id.writeBigInt64BE` | `allHashTags.${number}._id.id.writeBigInt64LE` | `allHashTags.${number}._id.id.writeBigUInt64BE` | `allHashTags.${number}._id.id.writeBigUint64BE` | `allHashTags.${number}._id.id.writeBigUInt64LE` | `allHashTags.${number}._id.id.writeBigUint64LE` | `allHashTags.${number}._id.id.writeUIntLE` | `allHashTags.${number}._id.id.writeUintLE` | `allHashTags.${number}._id.id.writeUIntBE` | `allHashTags.${number}._id.id.writeUintBE` | `allHashTags.${number}._id.id.writeIntLE` | `allHashTags.${number}._id.id.writeIntBE` | `allHashTags.${number}._id.id.readBigUInt64BE` | `allHashTags.${number}._id.id.readBigUint64BE` | `allHashTags.${number}._id.id.readBigUInt64LE` | `allHashTags.${number}._id.id.readBigUint64LE` | `allHashTags.${number}._id.id.readBigInt64BE` | `allHashTags.${number}._id.id.readBigInt64LE` | `allHashTags.${number}._id.id.readUIntLE` | `allHashTags.${number}._id.id.readUintLE` | `allHashTags.${number}._id.id.readUIntBE` | `allHashTags.${number}._id.id.readUintBE` | `allHashTags.${number}._id.id.readIntLE` | `allHashTags.${number}._id.id.readIntBE` | `allHashTags.${number}._id.id.readUInt8` | `allHashTags.${number}._id.id.readUint8` | `allHashTags.${number}._id.id.readUInt16LE` | `allHashTags.${number}._id.id.readUint16LE` | `allHashTags.${number}._id.id.readUInt16BE` | `allHashTags.${number}._id.id.readUint16BE` | `allHashTags.${number}._id.id.readUInt32LE` | `allHashTags.${number}._id.id.readUint32LE` | `allHashTags.${number}._id.id.readUInt32BE` | `allHashTags.${number}._id.id.readUint32BE` | `allHashTags.${number}._id.id.readInt8` | `allHashTags.${number}._id.id.readInt16LE` | `allHashTags.${number}._id.id.readInt16BE` | `allHashTags.${number}._id.id.readInt32LE` | `allHashTags.${number}._id.id.readInt32BE` | `allHashTags.${number}._id.id.readFloatLE` | `allHashTags.${number}._id.id.readFloatBE` | `allHashTags.${number}._id.id.readDoubleLE` | `allHashTags.${number}._id.id.readDoubleBE` | `allHashTags.${number}._id.id.swap16` | `allHashTags.${number}._id.id.swap32` | `allHashTags.${number}._id.id.swap64` | `allHashTags.${number}._id.id.writeUInt8` | `allHashTags.${number}._id.id.writeUint8` | `allHashTags.${number}._id.id.writeUInt16LE` | `allHashTags.${number}._id.id.writeUint16LE` | `allHashTags.${number}._id.id.writeUInt16BE` | `allHashTags.${number}._id.id.writeUint16BE` | `allHashTags.${number}._id.id.writeUInt32LE` | `allHashTags.${number}._id.id.writeUint32LE` | `allHashTags.${number}._id.id.writeUInt32BE` | `allHashTags.${number}._id.id.writeUint32BE` | `allHashTags.${number}._id.id.writeInt8` | `allHashTags.${number}._id.id.writeInt16LE` | `allHashTags.${number}._id.id.writeInt16BE` | `allHashTags.${number}._id.id.writeInt32LE` | `allHashTags.${number}._id.id.writeInt32BE` | `allHashTags.${number}._id.id.writeFloatLE` | `allHashTags.${number}._id.id.writeFloatBE` | `allHashTags.${number}._id.id.writeDoubleLE` | `allHashTags.${number}._id.id.writeDoubleBE` | `allHashTags.${number}._id.id.BYTES_PER_ELEMENT` | `allHashTags.${number}._id.id.buffer` | `allHashTags.${number}._id.id.byteLength` | `allHashTags.${number}._id.id.byteOffset` | `allHashTags.${number}._id.id.buffer.slice` | `allHashTags.${number}._id.id.buffer.byteLength` | `allHashTags.${number}.usage` | `allHashTags.${number}.maxCount` | `allHashTags.${number}.mostRecent` | `allHashTags.${number}.usage.concat` | `allHashTags.${number}.usage.indexOf` | `allHashTags.${number}.usage.lastIndexOf` | `allHashTags.${number}.usage.slice` | `allHashTags.${number}.usage.length` | `allHashTags.${number}.usage.includes` | `allHashTags.${number}.usage.at` | `allHashTags.${number}.usage.toLocaleString` | `allHashTags.${number}.usage.toString` | `allHashTags.${number}.usage.pop` | `allHashTags.${number}.usage.push` | `allHashTags.${number}.usage.join` | `allHashTags.${number}.usage.shift` | `allHashTags.${number}.usage.splice` | `allHashTags.${number}.usage.unshift` | `allHashTags.${number}.usage.every` | `allHashTags.${number}.usage.some` | `allHashTags.${number}.usage.forEach` | `allHashTags.${number}.usage.map` | `allHashTags.${number}.usage.filter` | `allHashTags.${number}.usage.reduce` | `allHashTags.${number}.usage.reduceRight` | `allHashTags.${number}.usage.find` | `allHashTags.${number}.usage.findIndex` | `allHashTags.${number}.usage.entries` | `allHashTags.${number}.usage.keys` | `allHashTags.${number}.usage.values` | `allHashTags.${number}.usage.flatMap` | `allHashTags.${number}.usage.flat` | `allHashTags.${number}.usage.type` | `allHashTags.${number}.usage.isValid` | `allHashTags.${number}.usage.toJSON` | `allHashTags.${number}.usage.addListener` | `allHashTags.${number}.usage.removeListener` | `allHashTags.${number}.usage.removeAllListeners` | `allHashTags.${number}.usage.optional` | `allHashTags.${number}.usage.description` | `allHashTags.${number}.usage.min` | `allHashTags.${number}.usage.max` | `allHashTags.${number}.usage.remove` | `allHashTags.${number}.usage.move` | `allHashTags.${number}.usage.swap` | `allHashTags.${number}.usage.isEmpty` | `allHashTags.${number}.usage.sum` | `allHashTags.${number}.usage.avg` | `allHashTags.${number}.usage.filtered` | `allHashTags.${number}.usage.sorted` | `allHashTags.${number}.usage.snapshot` | "type.concat" | "type.indexOf" | "type.lastIndexOf" | "type.slice" | "type.length" | "type.includes" | "type.at" | "type.toLocaleString" | "type.toString" | "type.pop" | "type.push" | "type.join" | "type.shift" | "type.splice" | "type.unshift" | "type.every" | "type.some" | "type.forEach" | "type.map" | "type.filter" | "type.reduce" | "type.reduceRight" | "type.find" | "type.findIndex" | "type.entries" | "type.keys" | "type.values" | "type.flatMap" | "type.flat" | "type.type" | "type.isValid" | "type.toJSON" | "type.addListener" | "type.removeListener" | "type.removeAllListeners" | "type.optional" | "type.description" | "type.min" | "type.max" | "type.remove" | "type.move" | "type.swap" | "type.isEmpty" | "type.sum" | "type.avg" | "type.filtered" | "type.sorted" | "type.snapshot" | `detailTypes.${number}` | `allAttributes.${number}` | `allAttributes.${number}.path` | `allAttributes.${number}.value` | `allAttributes.${number}.unset` | "taxonomy._id" | "taxonomy.hashTags" | "taxonomy.allHashTags" | "taxonomy.customItemField" | "taxonomy._id.toString" | "taxonomy._id.id" | "taxonomy._id.toJSON" | "taxonomy._id._bsontype" | "taxonomy._id.generationTime" | "taxonomy._id.toHexString" | "taxonomy._id.equals" | "taxonomy._id.getTimestamp" | "taxonomy._id.inspect" | "taxonomy._id.id.indexOf" | "taxonomy._id.id.lastIndexOf" | "taxonomy._id.id.slice" | "taxonomy._id.id.length" | "taxonomy._id.id.includes" | "taxonomy._id.id.at" | "taxonomy._id.id.toLocaleString" | "taxonomy._id.id.toString" | "taxonomy._id.id.join" | "taxonomy._id.id.reverse" | "taxonomy._id.id.sort" | "taxonomy._id.id.every" | "taxonomy._id.id.some" | "taxonomy._id.id.forEach" | "taxonomy._id.id.map" | "taxonomy._id.id.filter" | "taxonomy._id.id.reduce" | "taxonomy._id.id.reduceRight" | "taxonomy._id.id.find" | "taxonomy._id.id.findIndex" | "taxonomy._id.id.fill" | "taxonomy._id.id.copyWithin" | "taxonomy._id.id.entries" | "taxonomy._id.id.keys" | "taxonomy._id.id.values" | "taxonomy._id.id.findLast" | "taxonomy._id.id.findLastIndex" | "taxonomy._id.id.toReversed" | "taxonomy._id.id.toSorted" | "taxonomy._id.id.with" | "taxonomy._id.id.set" | "taxonomy._id.id.toJSON" | "taxonomy._id.id.valueOf" | "taxonomy._id.id.equals" | "taxonomy._id.id.write" | "taxonomy._id.id.compare" | "taxonomy._id.id.copy" | "taxonomy._id.id.subarray" | "taxonomy._id.id.writeBigInt64BE" | "taxonomy._id.id.writeBigInt64LE" | "taxonomy._id.id.writeBigUInt64BE" | "taxonomy._id.id.writeBigUint64BE" | "taxonomy._id.id.writeBigUInt64LE" | "taxonomy._id.id.writeBigUint64LE" | "taxonomy._id.id.writeUIntLE" | "taxonomy._id.id.writeUintLE" | "taxonomy._id.id.writeUIntBE" | "taxonomy._id.id.writeUintBE" | "taxonomy._id.id.writeIntLE" | "taxonomy._id.id.writeIntBE" | "taxonomy._id.id.readBigUInt64BE" | "taxonomy._id.id.readBigUint64BE" | "taxonomy._id.id.readBigUInt64LE" | "taxonomy._id.id.readBigUint64LE" | "taxonomy._id.id.readBigInt64BE" | "taxonomy._id.id.readBigInt64LE" | "taxonomy._id.id.readUIntLE" | "taxonomy._id.id.readUintLE" | "taxonomy._id.id.readUIntBE" | "taxonomy._id.id.readUintBE" | "taxonomy._id.id.readIntLE" | "taxonomy._id.id.readIntBE" | "taxonomy._id.id.readUInt8" | "taxonomy._id.id.readUint8" | "taxonomy._id.id.readUInt16LE" | "taxonomy._id.id.readUint16LE" | "taxonomy._id.id.readUInt16BE" | "taxonomy._id.id.readUint16BE" | "taxonomy._id.id.readUInt32LE" | "taxonomy._id.id.readUint32LE" | "taxonomy._id.id.readUInt32BE" | "taxonomy._id.id.readUint32BE" | "taxonomy._id.id.readInt8" | "taxonomy._id.id.readInt16LE" | "taxonomy._id.id.readInt16BE" | "taxonomy._id.id.readInt32LE" | "taxonomy._id.id.readInt32BE" | "taxonomy._id.id.readFloatLE" | "taxonomy._id.id.readFloatBE" | "taxonomy._id.id.readDoubleLE" | "taxonomy._id.id.readDoubleBE" | "taxonomy._id.id.swap16" | "taxonomy._id.id.swap32" | "taxonomy._id.id.swap64" | "taxonomy._id.id.writeUInt8" | "taxonomy._id.id.writeUint8" | "taxonomy._id.id.writeUInt16LE" | "taxonomy._id.id.writeUint16LE" | "taxonomy._id.id.writeUInt16BE" | "taxonomy._id.id.writeUint16BE" | "taxonomy._id.id.writeUInt32LE" | "taxonomy._id.id.writeUint32LE" | "taxonomy._id.id.writeUInt32BE" | "taxonomy._id.id.writeUint32BE" | "taxonomy._id.id.writeInt8" | "taxonomy._id.id.writeInt16LE" | "taxonomy._id.id.writeInt16BE" | "taxonomy._id.id.writeInt32LE" | "taxonomy._id.id.writeInt32BE" | "taxonomy._id.id.writeFloatLE" | "taxonomy._id.id.writeFloatBE" | "taxonomy._id.id.writeDoubleLE" | "taxonomy._id.id.writeDoubleBE" | "taxonomy._id.id.BYTES_PER_ELEMENT" | "taxonomy._id.id.buffer" | "taxonomy._id.id.byteLength" | "taxonomy._id.id.byteOffset" | "taxonomy._id.id.buffer.slice" | "taxonomy._id.id.buffer.byteLength" | "taxonomy.hashTags.concat" | "taxonomy.hashTags.indexOf" | "taxonomy.hashTags.lastIndexOf" | "taxonomy.hashTags.slice" | "taxonomy.hashTags.length" | "taxonomy.hashTags.includes" | "taxonomy.hashTags.at" | "taxonomy.hashTags.toLocaleString" | "taxonomy.hashTags.toString" | "taxonomy.hashTags.pop" | "taxonomy.hashTags.push" | "taxonomy.hashTags.join" | "taxonomy.hashTags.shift" | "taxonomy.hashTags.splice" | "taxonomy.hashTags.unshift" | "taxonomy.hashTags.every" | "taxonomy.hashTags.some" | "taxonomy.hashTags.forEach" | "taxonomy.hashTags.map" | "taxonomy.hashTags.filter" | "taxonomy.hashTags.reduce" | "taxonomy.hashTags.reduceRight" | "taxonomy.hashTags.find" | "taxonomy.hashTags.findIndex" | "taxonomy.hashTags.entries" | "taxonomy.hashTags.keys" | "taxonomy.hashTags.values" | "taxonomy.hashTags.flatMap" | "taxonomy.hashTags.flat" | "taxonomy.hashTags.type" | "taxonomy.hashTags.isValid" | "taxonomy.hashTags.toJSON" | "taxonomy.hashTags.addListener" | "taxonomy.hashTags.removeListener" | "taxonomy.hashTags.removeAllListeners" | "taxonomy.hashTags.optional" | "taxonomy.hashTags.description" | "taxonomy.hashTags.min" | "taxonomy.hashTags.max" | "taxonomy.hashTags.remove" | "taxonomy.hashTags.move" | "taxonomy.hashTags.swap" | "taxonomy.hashTags.isEmpty" | "taxonomy.hashTags.sum" | "taxonomy.hashTags.avg" | "taxonomy.hashTags.filtered" | "taxonomy.hashTags.sorted" | "taxonomy.hashTags.snapshot" | `taxonomy.allHashTags.${number}` | `taxonomy.allHashTags.${number}.name` | `taxonomy.allHashTags.${number}._id` | `taxonomy.allHashTags.${number}._id.toString` | `taxonomy.allHashTags.${number}._id.id` | `taxonomy.allHashTags.${number}._id.toJSON` | `taxonomy.allHashTags.${number}._id._bsontype` | `taxonomy.allHashTags.${number}._id.generationTime` | `taxonomy.allHashTags.${number}._id.toHexString` | `taxonomy.allHashTags.${number}._id.equals` | `taxonomy.allHashTags.${number}._id.getTimestamp` | `taxonomy.allHashTags.${number}._id.inspect` | `taxonomy.allHashTags.${number}._id.id.indexOf` | `taxonomy.allHashTags.${number}._id.id.lastIndexOf` | `taxonomy.allHashTags.${number}._id.id.slice` | `taxonomy.allHashTags.${number}._id.id.length` | `taxonomy.allHashTags.${number}._id.id.includes` | `taxonomy.allHashTags.${number}._id.id.at` | `taxonomy.allHashTags.${number}._id.id.toLocaleString` | `taxonomy.allHashTags.${number}._id.id.toString` | `taxonomy.allHashTags.${number}._id.id.join` | `taxonomy.allHashTags.${number}._id.id.reverse` | `taxonomy.allHashTags.${number}._id.id.sort` | `taxonomy.allHashTags.${number}._id.id.every` | `taxonomy.allHashTags.${number}._id.id.some` | `taxonomy.allHashTags.${number}._id.id.forEach` | `taxonomy.allHashTags.${number}._id.id.map` | `taxonomy.allHashTags.${number}._id.id.filter` | `taxonomy.allHashTags.${number}._id.id.reduce` | `taxonomy.allHashTags.${number}._id.id.reduceRight` | `taxonomy.allHashTags.${number}._id.id.find` | `taxonomy.allHashTags.${number}._id.id.findIndex` | `taxonomy.allHashTags.${number}._id.id.fill` | `taxonomy.allHashTags.${number}._id.id.copyWithin` | `taxonomy.allHashTags.${number}._id.id.entries` | `taxonomy.allHashTags.${number}._id.id.keys` | `taxonomy.allHashTags.${number}._id.id.values` | `taxonomy.allHashTags.${number}._id.id.findLast` | `taxonomy.allHashTags.${number}._id.id.findLastIndex` | `taxonomy.allHashTags.${number}._id.id.toReversed` | `taxonomy.allHashTags.${number}._id.id.toSorted` | `taxonomy.allHashTags.${number}._id.id.with` | `taxonomy.allHashTags.${number}._id.id.set` | `taxonomy.allHashTags.${number}._id.id.toJSON` | `taxonomy.allHashTags.${number}._id.id.valueOf` | `taxonomy.allHashTags.${number}._id.id.equals` | `taxonomy.allHashTags.${number}._id.id.write` | `taxonomy.allHashTags.${number}._id.id.compare` | `taxonomy.allHashTags.${number}._id.id.copy` | `taxonomy.allHashTags.${number}._id.id.subarray` | `taxonomy.allHashTags.${number}._id.id.writeBigInt64BE` | `taxonomy.allHashTags.${number}._id.id.writeBigInt64LE` | `taxonomy.allHashTags.${number}._id.id.writeBigUInt64BE` | `taxonomy.allHashTags.${number}._id.id.writeBigUint64BE` | `taxonomy.allHashTags.${number}._id.id.writeBigUInt64LE` | `taxonomy.allHashTags.${number}._id.id.writeBigUint64LE` | `taxonomy.allHashTags.${number}._id.id.writeUIntLE` | `taxonomy.allHashTags.${number}._id.id.writeUintLE` | `taxonomy.allHashTags.${number}._id.id.writeUIntBE` | `taxonomy.allHashTags.${number}._id.id.writeUintBE` | `taxonomy.allHashTags.${number}._id.id.writeIntLE` | `taxonomy.allHashTags.${number}._id.id.writeIntBE` | `taxonomy.allHashTags.${number}._id.id.readBigUInt64BE` | `taxonomy.allHashTags.${number}._id.id.readBigUint64BE` | `taxonomy.allHashTags.${number}._id.id.readBigUInt64LE` | `taxonomy.allHashTags.${number}._id.id.readBigUint64LE` | `taxonomy.allHashTags.${number}._id.id.readBigInt64BE` | `taxonomy.allHashTags.${number}._id.id.readBigInt64LE` | `taxonomy.allHashTags.${number}._id.id.readUIntLE` | `taxonomy.allHashTags.${number}._id.id.readUintLE` | `taxonomy.allHashTags.${number}._id.id.readUIntBE` | `taxonomy.allHashTags.${number}._id.id.readUintBE` | `taxonomy.allHashTags.${number}._id.id.readIntLE` | `taxonomy.allHashTags.${number}._id.id.readIntBE` | `taxonomy.allHashTags.${number}._id.id.readUInt8` | `taxonomy.allHashTags.${number}._id.id.readUint8` | `taxonomy.allHashTags.${number}._id.id.readUInt16LE` | `taxonomy.allHashTags.${number}._id.id.readUint16LE` | `taxonomy.allHashTags.${number}._id.id.readUInt16BE` | `taxonomy.allHashTags.${number}._id.id.readUint16BE` | `taxonomy.allHashTags.${number}._id.id.readUInt32LE` | `taxonomy.allHashTags.${number}._id.id.readUint32LE` | `taxonomy.allHashTags.${number}._id.id.readUInt32BE` | `taxonomy.allHashTags.${number}._id.id.readUint32BE` | `taxonomy.allHashTags.${number}._id.id.readInt8` | `taxonomy.allHashTags.${number}._id.id.readInt16LE` | `taxonomy.allHashTags.${number}._id.id.readInt16BE` | `taxonomy.allHashTags.${number}._id.id.readInt32LE` | `taxonomy.allHashTags.${number}._id.id.readInt32BE` | `taxonomy.allHashTags.${number}._id.id.readFloatLE` | `taxonomy.allHashTags.${number}._id.id.readFloatBE` | `taxonomy.allHashTags.${number}._id.id.readDoubleLE` | `taxonomy.allHashTags.${number}._id.id.readDoubleBE` | `taxonomy.allHashTags.${number}._id.id.swap16` | `taxonomy.allHashTags.${number}._id.id.swap32` | `taxonomy.allHashTags.${number}._id.id.swap64` | `taxonomy.allHashTags.${number}._id.id.writeUInt8` | `taxonomy.allHashTags.${number}._id.id.writeUint8` | `taxonomy.allHashTags.${number}._id.id.writeUInt16LE` | `taxonomy.allHashTags.${number}._id.id.writeUint16LE` | `taxonomy.allHashTags.${number}._id.id.writeUInt16BE` | `taxonomy.allHashTags.${number}._id.id.writeUint16BE` | `taxonomy.allHashTags.${number}._id.id.writeUInt32LE` | `taxonomy.allHashTags.${number}._id.id.writeUint32LE` | `taxonomy.allHashTags.${number}._id.id.writeUInt32BE` | `taxonomy.allHashTags.${number}._id.id.writeUint32BE` | `taxonomy.allHashTags.${number}._id.id.writeInt8` | `taxonomy.allHashTags.${number}._id.id.writeInt16LE` | `taxonomy.allHashTags.${number}._id.id.writeInt16BE` | `taxonomy.allHashTags.${number}._id.id.writeInt32LE` | `taxonomy.allHashTags.${number}._id.id.writeInt32BE` | `taxonomy.allHashTags.${number}._id.id.writeFloatLE` | `taxonomy.allHashTags.${number}._id.id.writeFloatBE` | `taxonomy.allHashTags.${number}._id.id.writeDoubleLE` | `taxonomy.allHashTags.${number}._id.id.writeDoubleBE` | `taxonomy.allHashTags.${number}._id.id.BYTES_PER_ELEMENT` | `taxonomy.allHashTags.${number}._id.id.buffer` | `taxonomy.allHashTags.${number}._id.id.byteLength` | `taxonomy.allHashTags.${number}._id.id.byteOffset` | `taxonomy.allHashTags.${number}._id.id.buffer.slice` | `taxonomy.allHashTags.${number}._id.id.buffer.byteLength` | `taxonomy.allHashTags.${number}.usage` | `taxonomy.allHashTags.${number}.maxCount` | `taxonomy.allHashTags.${number}.mostRecent` | `taxonomy.allHashTags.${number}.usage.concat` | `taxonomy.allHashTags.${number}.usage.indexOf` | `taxonomy.allHashTags.${number}.usage.lastIndexOf` | `taxonomy.allHashTags.${number}.usage.slice` | `taxonomy.allHashTags.${number}.usage.length` | `taxonomy.allHashTags.${number}.usage.includes` | `taxonomy.allHashTags.${number}.usage.at` | `taxonomy.allHashTags.${number}.usage.toLocaleString` | `taxonomy.allHashTags.${number}.usage.toString` | `taxonomy.allHashTags.${number}.usage.pop` | `taxonomy.allHashTags.${number}.usage.push` | `taxonomy.allHashTags.${number}.usage.join` | `taxonomy.allHashTags.${number}.usage.shift` | `taxonomy.allHashTags.${number}.usage.splice` | `taxonomy.allHashTags.${number}.usage.unshift` | `taxonomy.allHashTags.${number}.usage.every` | `taxonomy.allHashTags.${number}.usage.some` | `taxonomy.allHashTags.${number}.usage.forEach` | `taxonomy.allHashTags.${number}.usage.map` | `taxonomy.allHashTags.${number}.usage.filter` | `taxonomy.allHashTags.${number}.usage.reduce` | `taxonomy.allHashTags.${number}.usage.reduceRight` | `taxonomy.allHashTags.${number}.usage.find` | `taxonomy.allHashTags.${number}.usage.findIndex` | `taxonomy.allHashTags.${number}.usage.entries` | `taxonomy.allHashTags.${number}.usage.keys` | `taxonomy.allHashTags.${number}.usage.values` | `taxonomy.allHashTags.${number}.usage.flatMap` | `taxonomy.allHashTags.${number}.usage.flat` | `taxonomy.allHashTags.${number}.usage.type` | `taxonomy.allHashTags.${number}.usage.isValid` | `taxonomy.allHashTags.${number}.usage.toJSON` | `taxonomy.allHashTags.${number}.usage.addListener` | `taxonomy.allHashTags.${number}.usage.removeListener` | `taxonomy.allHashTags.${number}.usage.removeAllListeners` | `taxonomy.allHashTags.${number}.usage.optional` | `taxonomy.allHashTags.${number}.usage.description` | `taxonomy.allHashTags.${number}.usage.min` | `taxonomy.allHashTags.${number}.usage.max` | `taxonomy.allHashTags.${number}.usage.remove` | `taxonomy.allHashTags.${number}.usage.move` | `taxonomy.allHashTags.${number}.usage.swap` | `taxonomy.allHashTags.${number}.usage.isEmpty` | `taxonomy.allHashTags.${number}.usage.sum` | `taxonomy.allHashTags.${number}.usage.avg` | `taxonomy.allHashTags.${number}.usage.filtered` | `taxonomy.allHashTags.${number}.usage.sorted` | `taxonomy.allHashTags.${number}.usage.snapshot` | "taxonomy.timestamp" | "taxonomy.category" | "taxonomy.subCategory" | "taxonomy.subSubCategory" | "taxonomy.fullname" | "taxonomy.sizes" | "taxonomy.category.name" | "taxonomy.category.hashTags" | "taxonomy.category.hashTags.concat" | "taxonomy.category.hashTags.indexOf" | "taxonomy.category.hashTags.lastIndexOf" | "taxonomy.category.hashTags.slice" | "taxonomy.category.hashTags.length" | "taxonomy.category.hashTags.includes" | "taxonomy.category.hashTags.at" | "taxonomy.category.hashTags.toLocaleString" | "taxonomy.category.hashTags.toString" | "taxonomy.category.hashTags.pop" | "taxonomy.category.hashTags.push" | "taxonomy.category.hashTags.join" | "taxonomy.category.hashTags.shift" | "taxonomy.category.hashTags.splice" | "taxonomy.category.hashTags.unshift" | "taxonomy.category.hashTags.every" | "taxonomy.category.hashTags.some" | "taxonomy.category.hashTags.forEach" | "taxonomy.category.hashTags.map" | "taxonomy.category.hashTags.filter" | "taxonomy.category.hashTags.reduce" | "taxonomy.category.hashTags.reduceRight" | "taxonomy.category.hashTags.find" | "taxonomy.category.hashTags.findIndex" | "taxonomy.category.hashTags.entries" | "taxonomy.category.hashTags.keys" | "taxonomy.category.hashTags.values" | "taxonomy.category.hashTags.flatMap" | "taxonomy.category.hashTags.flat" | "taxonomy.category.hashTags.type" | "taxonomy.category.hashTags.isValid" | "taxonomy.category.hashTags.toJSON" | "taxonomy.category.hashTags.addListener" | "taxonomy.category.hashTags.removeListener" | "taxonomy.category.hashTags.removeAllListeners" | "taxonomy.category.hashTags.optional" | "taxonomy.category.hashTags.description" | "taxonomy.category.hashTags.min" | "taxonomy.category.hashTags.max" | "taxonomy.category.hashTags.remove" | "taxonomy.category.hashTags.move" | "taxonomy.category.hashTags.swap" | "taxonomy.category.hashTags.isEmpty" | "taxonomy.category.hashTags.sum" | "taxonomy.category.hashTags.avg" | "taxonomy.category.hashTags.filtered" | "taxonomy.category.hashTags.sorted" | "taxonomy.category.hashTags.snapshot" | "taxonomy.category.selector" | "taxonomy.subCategory.name" | "taxonomy.subCategory.hashTags" | "taxonomy.subCategory.hashTags.concat" | "taxonomy.subCategory.hashTags.indexOf" | "taxonomy.subCategory.hashTags.lastIndexOf" | "taxonomy.subCategory.hashTags.slice" | "taxonomy.subCategory.hashTags.length" | "taxonomy.subCategory.hashTags.includes" | "taxonomy.subCategory.hashTags.at" | "taxonomy.subCategory.hashTags.toLocaleString" | "taxonomy.subCategory.hashTags.toString" | "taxonomy.subCategory.hashTags.pop" | "taxonomy.subCategory.hashTags.push" | "taxonomy.subCategory.hashTags.join" | "taxonomy.subCategory.hashTags.shift" | "taxonomy.subCategory.hashTags.splice" | "taxonomy.subCategory.hashTags.unshift" | "taxonomy.subCategory.hashTags.every" | "taxonomy.subCategory.hashTags.some" | "taxonomy.subCategory.hashTags.forEach" | "taxonomy.subCategory.hashTags.map" | "taxonomy.subCategory.hashTags.filter" | "taxonomy.subCategory.hashTags.reduce" | "taxonomy.subCategory.hashTags.reduceRight" | "taxonomy.subCategory.hashTags.find" | "taxonomy.subCategory.hashTags.findIndex" | "taxonomy.subCategory.hashTags.entries" | "taxonomy.subCategory.hashTags.keys" | "taxonomy.subCategory.hashTags.values" | "taxonomy.subCategory.hashTags.flatMap" | "taxonomy.subCategory.hashTags.flat" | "taxonomy.subCategory.hashTags.type" | "taxonomy.subCategory.hashTags.isValid" | "taxonomy.subCategory.hashTags.toJSON" | "taxonomy.subCategory.hashTags.addListener" | "taxonomy.subCategory.hashTags.removeListener" | "taxonomy.subCategory.hashTags.removeAllListeners" | "taxonomy.subCategory.hashTags.optional" | "taxonomy.subCategory.hashTags.description" | "taxonomy.subCategory.hashTags.min" | "taxonomy.subCategory.hashTags.max" | "taxonomy.subCategory.hashTags.remove" | "taxonomy.subCategory.hashTags.move" | "taxonomy.subCategory.hashTags.swap" | "taxonomy.subCategory.hashTags.isEmpty" | "taxonomy.subCategory.hashTags.sum" | "taxonomy.subCategory.hashTags.avg" | "taxonomy.subCategory.hashTags.filtered" | "taxonomy.subCategory.hashTags.sorted" | "taxonomy.subCategory.hashTags.snapshot" | "taxonomy.subCategory.selector" | "taxonomy.subSubCategory.name" | "taxonomy.subSubCategory.hashTags" | "taxonomy.subSubCategory.hashTags.concat" | "taxonomy.subSubCategory.hashTags.indexOf" | "taxonomy.subSubCategory.hashTags.lastIndexOf" | "taxonomy.subSubCategory.hashTags.slice" | "taxonomy.subSubCategory.hashTags.length" | "taxonomy.subSubCategory.hashTags.includes" | "taxonomy.subSubCategory.hashTags.at" | "taxonomy.subSubCategory.hashTags.toLocaleString" | "taxonomy.subSubCategory.hashTags.toString" | "taxonomy.subSubCategory.hashTags.pop" | "taxonomy.subSubCategory.hashTags.push" | "taxonomy.subSubCategory.hashTags.join" | "taxonomy.subSubCategory.hashTags.shift" | "taxonomy.subSubCategory.hashTags.splice" | "taxonomy.subSubCategory.hashTags.unshift" | "taxonomy.subSubCategory.hashTags.every" | "taxonomy.subSubCategory.hashTags.some" | "taxonomy.subSubCategory.hashTags.forEach" | "taxonomy.subSubCategory.hashTags.map" | "taxonomy.subSubCategory.hashTags.filter" | "taxonomy.subSubCategory.hashTags.reduce" | "taxonomy.subSubCategory.hashTags.reduceRight" | "taxonomy.subSubCategory.hashTags.find" | "taxonomy.subSubCategory.hashTags.findIndex" | "taxonomy.subSubCategory.hashTags.entries" | "taxonomy.subSubCategory.hashTags.keys" | "taxonomy.subSubCategory.hashTags.values" | "taxonomy.subSubCategory.hashTags.flatMap" | "taxonomy.subSubCategory.hashTags.flat" | "taxonomy.subSubCategory.hashTags.type" | "taxonomy.subSubCategory.hashTags.isValid" | "taxonomy.subSubCategory.hashTags.toJSON" | "taxonomy.subSubCategory.hashTags.addListener" | "taxonomy.subSubCategory.hashTags.removeListener" | "taxonomy.subSubCategory.hashTags.removeAllListeners" | "taxonomy.subSubCategory.hashTags.optional" | "taxonomy.subSubCategory.hashTags.description" | "taxonomy.subSubCategory.hashTags.min" | "taxonomy.subSubCategory.hashTags.max" | "taxonomy.subSubCategory.hashTags.remove" | "taxonomy.subSubCategory.hashTags.move" | "taxonomy.subSubCategory.hashTags.swap" | "taxonomy.subSubCategory.hashTags.isEmpty" | "taxonomy.subSubCategory.hashTags.sum" | "taxonomy.subSubCategory.hashTags.avg" | "taxonomy.subSubCategory.hashTags.filtered" | "taxonomy.subSubCategory.hashTags.sorted" | "taxonomy.subSubCategory.hashTags.snapshot" | "taxonomy.subSubCategory.selector" | "taxonomy.sizes.concat" | "taxonomy.sizes.indexOf" | "taxonomy.sizes.lastIndexOf" | "taxonomy.sizes.slice" | "taxonomy.sizes.length" | "taxonomy.sizes.includes" | "taxonomy.sizes.at" | "taxonomy.sizes.toLocaleString" | "taxonomy.sizes.toString" | "taxonomy.sizes.pop" | "taxonomy.sizes.push" | "taxonomy.sizes.join" | "taxonomy.sizes.shift" | "taxonomy.sizes.splice" | "taxonomy.sizes.unshift" | "taxonomy.sizes.every" | "taxonomy.sizes.some" | "taxonomy.sizes.forEach" | "taxonomy.sizes.map" | "taxonomy.sizes.filter" | "taxonomy.sizes.reduce" | "taxonomy.sizes.reduceRight" | "taxonomy.sizes.find" | "taxonomy.sizes.findIndex" | "taxonomy.sizes.entries" | "taxonomy.sizes.keys" | "taxonomy.sizes.values" | "taxonomy.sizes.flatMap" | "taxonomy.sizes.flat" | "taxonomy.sizes.type" | "taxonomy.sizes.isValid" | "taxonomy.sizes.toJSON" | "taxonomy.sizes.addListener" | "taxonomy.sizes.removeListener" | "taxonomy.sizes.removeAllListeners" | "taxonomy.sizes.optional" | "taxonomy.sizes.description" | "taxonomy.sizes.min" | "taxonomy.sizes.max" | "taxonomy.sizes.remove" | "taxonomy.sizes.move" | "taxonomy.sizes.swap" | "taxonomy.sizes.isEmpty" | "taxonomy.sizes.sum" | "taxonomy.sizes.avg" | "taxonomy.sizes.filtered" | "taxonomy.sizes.sorted" | "taxonomy.sizes.snapshot" | "taxonomy.customItemField.id" | "taxonomy.customItemField._id" | "taxonomy.customItemField._id.toString" | "taxonomy.customItemField._id.id" | "taxonomy.customItemField._id.toJSON" | "taxonomy.customItemField._id._bsontype" | "taxonomy.customItemField._id.generationTime" | "taxonomy.customItemField._id.toHexString" | "taxonomy.customItemField._id.equals" | "taxonomy.customItemField._id.getTimestamp" | "taxonomy.customItemField._id.inspect" | "taxonomy.customItemField._id.id.indexOf" | "taxonomy.customItemField._id.id.lastIndexOf" | "taxonomy.customItemField._id.id.slice" | "taxonomy.customItemField._id.id.length" | "taxonomy.customItemField._id.id.includes" | "taxonomy.customItemField._id.id.at" | "taxonomy.customItemField._id.id.toLocaleString" | "taxonomy.customItemField._id.id.toString" | "taxonomy.customItemField._id.id.join" | "taxonomy.customItemField._id.id.reverse" | "taxonomy.customItemField._id.id.sort" | "taxonomy.customItemField._id.id.every" | "taxonomy.customItemField._id.id.some" | "taxonomy.customItemField._id.id.forEach" | "taxonomy.customItemField._id.id.map" | "taxonomy.customItemField._id.id.filter" | "taxonomy.customItemField._id.id.reduce" | "taxonomy.customItemField._id.id.reduceRight" | "taxonomy.customItemField._id.id.find" | "taxonomy.customItemField._id.id.findIndex" | "taxonomy.customItemField._id.id.fill" | "taxonomy.customItemField._id.id.copyWithin" | "taxonomy.customItemField._id.id.entries" | "taxonomy.customItemField._id.id.keys" | "taxonomy.customItemField._id.id.values" | "taxonomy.customItemField._id.id.findLast" | "taxonomy.customItemField._id.id.findLastIndex" | "taxonomy.customItemField._id.id.toReversed" | "taxonomy.customItemField._id.id.toSorted" | "taxonomy.customItemField._id.id.with" | "taxonomy.customItemField._id.id.set" | "taxonomy.customItemField._id.id.toJSON" | "taxonomy.customItemField._id.id.valueOf" | "taxonomy.customItemField._id.id.equals" | "taxonomy.customItemField._id.id.write" | "taxonomy.customItemField._id.id.compare" | "taxonomy.customItemField._id.id.copy" | "taxonomy.customItemField._id.id.subarray" | "taxonomy.customItemField._id.id.writeBigInt64BE" | "taxonomy.customItemField._id.id.writeBigInt64LE" | "taxonomy.customItemField._id.id.writeBigUInt64BE" | "taxonomy.customItemField._id.id.writeBigUint64BE" | "taxonomy.customItemField._id.id.writeBigUInt64LE" | "taxonomy.customItemField._id.id.writeBigUint64LE" | "taxonomy.customItemField._id.id.writeUIntLE" | "taxonomy.customItemField._id.id.writeUintLE" | "taxonomy.customItemField._id.id.writeUIntBE" | "taxonomy.customItemField._id.id.writeUintBE" | "taxonomy.customItemField._id.id.writeIntLE" | "taxonomy.customItemField._id.id.writeIntBE" | "taxonomy.customItemField._id.id.readBigUInt64BE" | "taxonomy.customItemField._id.id.readBigUint64BE" | "taxonomy.customItemField._id.id.readBigUInt64LE" | "taxonomy.customItemField._id.id.readBigUint64LE" | "taxonomy.customItemField._id.id.readBigInt64BE" | "taxonomy.customItemField._id.id.readBigInt64LE" | "taxonomy.customItemField._id.id.readUIntLE" | "taxonomy.customItemField._id.id.readUintLE" | "taxonomy.customItemField._id.id.readUIntBE" | "taxonomy.customItemField._id.id.readUintBE" | "taxonomy.customItemField._id.id.readIntLE" | "taxonomy.customItemField._id.id.readIntBE" | "taxonomy.customItemField._id.id.readUInt8" | "taxonomy.customItemField._id.id.readUint8" | "taxonomy.customItemField._id.id.readUInt16LE" | "taxonomy.customItemField._id.id.readUint16LE" | "taxonomy.customItemField._id.id.readUInt16BE" | "taxonomy.customItemField._id.id.readUint16BE" | "taxonomy.customItemField._id.id.readUInt32LE" | "taxonomy.customItemField._id.id.readUint32LE" | "taxonomy.customItemField._id.id.readUInt32BE" | "taxonomy.customItemField._id.id.readUint32BE" | "taxonomy.customItemField._id.id.readInt8" | "taxonomy.customItemField._id.id.readInt16LE" | "taxonomy.customItemField._id.id.readInt16BE" | "taxonomy.customItemField._id.id.readInt32LE" | "taxonomy.customItemField._id.id.readInt32BE" | "taxonomy.customItemField._id.id.readFloatLE" | "taxonomy.customItemField._id.id.readFloatBE" | "taxonomy.customItemField._id.id.readDoubleLE" | "taxonomy.customItemField._id.id.readDoubleBE" | "taxonomy.customItemField._id.id.swap16" | "taxonomy.customItemField._id.id.swap32" | "taxonomy.customItemField._id.id.swap64" | "taxonomy.customItemField._id.id.writeUInt8" | "taxonomy.customItemField._id.id.writeUint8" | "taxonomy.customItemField._id.id.writeUInt16LE" | "taxonomy.customItemField._id.id.writeUint16LE" | "taxonomy.customItemField._id.id.writeUInt16BE" | "taxonomy.customItemField._id.id.writeUint16BE" | "taxonomy.customItemField._id.id.writeUInt32LE" | "taxonomy.customItemField._id.id.writeUint32LE" | "taxonomy.customItemField._id.id.writeUInt32BE" | "taxonomy.customItemField._id.id.writeUint32BE" | "taxonomy.customItemField._id.id.writeInt8" | "taxonomy.customItemField._id.id.writeInt16LE" | "taxonomy.customItemField._id.id.writeInt16BE" | "taxonomy.customItemField._id.id.writeInt32LE" | "taxonomy.customItemField._id.id.writeInt32BE" | "taxonomy.customItemField._id.id.writeFloatLE" | "taxonomy.customItemField._id.id.writeFloatBE" | "taxonomy.customItemField._id.id.writeDoubleLE" | "taxonomy.customItemField._id.id.writeDoubleBE" | "taxonomy.customItemField._id.id.BYTES_PER_ELEMENT" | "taxonomy.customItemField._id.id.buffer" | "taxonomy.customItemField._id.id.byteLength" | "taxonomy.customItemField._id.id.byteOffset" | "taxonomy.customItemField._id.id.buffer.slice" | "taxonomy.customItemField._id.id.buffer.byteLength" | "taxonomy.customItemField.linkedType" | "taxonomy.customItemField.brandsMap" | "taxonomy.customItemField.getTaxonomy" | `taxonomy.customItemField.brandsMap.${string}` | "taxonomy.customItemField.getTaxonomy.concat" | "taxonomy.customItemField.getTaxonomy.indexOf" | "taxonomy.customItemField.getTaxonomy.lastIndexOf" | "taxonomy.customItemField.getTaxonomy.slice" | "taxonomy.customItemField.getTaxonomy.length" | "taxonomy.customItemField.getTaxonomy.includes" | "taxonomy.customItemField.getTaxonomy.at" | "taxonomy.customItemField.getTaxonomy.toLocaleString" | "taxonomy.customItemField.getTaxonomy.toString" | "taxonomy.customItemField.getTaxonomy.join" | "taxonomy.customItemField.getTaxonomy.every" | "taxonomy.customItemField.getTaxonomy.some" | "taxonomy.customItemField.getTaxonomy.forEach" | "taxonomy.customItemField.getTaxonomy.map" | "taxonomy.customItemField.getTaxonomy.filter" | "taxonomy.customItemField.getTaxonomy.reduce" | "taxonomy.customItemField.getTaxonomy.reduceRight" | "taxonomy.customItemField.getTaxonomy.find" | "taxonomy.customItemField.getTaxonomy.findIndex" | "taxonomy.customItemField.getTaxonomy.entries" | "taxonomy.customItemField.getTaxonomy.keys" | "taxonomy.customItemField.getTaxonomy.values" | "taxonomy.customItemField.getTaxonomy.flatMap" | "taxonomy.customItemField.getTaxonomy.flat" | "taxonomy.customItemField.getTaxonomy.type" | "taxonomy.customItemField.getTaxonomy.isValid" | "taxonomy.customItemField.getTaxonomy.toJSON" | "taxonomy.customItemField.getTaxonomy.addListener" | "taxonomy.customItemField.getTaxonomy.removeListener" | "taxonomy.customItemField.getTaxonomy.removeAllListeners" | "taxonomy.customItemField.getTaxonomy.optional" | "taxonomy.customItemField.getTaxonomy.description" | "taxonomy.customItemField.getTaxonomy.min" | "taxonomy.customItemField.getTaxonomy.max" | "taxonomy.customItemField.getTaxonomy.isEmpty" | "taxonomy.customItemField.getTaxonomy.sum" | "taxonomy.customItemField.getTaxonomy.avg" | "taxonomy.customItemField.getTaxonomy.filtered" | "taxonomy.customItemField.getTaxonomy.sorted" | "taxonomy.customItemField.getTaxonomy.snapshot" | "taxonomy.customItemField.getTaxonomy.update" | "taxonomy.customItemField.getTaxonomy.subscribe" | "taxonomy.customItemField.getTaxonomy.unsubscribe" | "parent.name" | "parent._id" | "parent.shortName" | "parent.hashTags" | "parent.allHashTags" | "parent.detailTypes" | "parent.allAttributes" | "parent._id.toString" | "parent._id.id" | "parent._id.toJSON" | "parent._id._bsontype" | "parent._id.generationTime" | "parent._id.toHexString" | "parent._id.equals" | "parent._id.getTimestamp" | "parent._id.inspect" | "parent._id.id.indexOf" | "parent._id.id.lastIndexOf" | "parent._id.id.slice" | "parent._id.id.length" | "parent._id.id.includes" | "parent._id.id.at" | "parent._id.id.toLocaleString" | "parent._id.id.toString" | "parent._id.id.join" | "parent._id.id.reverse" | "parent._id.id.sort" | "parent._id.id.every" | "parent._id.id.some" | "parent._id.id.forEach" | "parent._id.id.map" | "parent._id.id.filter" | "parent._id.id.reduce" | "parent._id.id.reduceRight" | "parent._id.id.find" | "parent._id.id.findIndex" | "parent._id.id.fill" | "parent._id.id.copyWithin" | "parent._id.id.entries" | "parent._id.id.keys" | "parent._id.id.values" | "parent._id.id.findLast" | "parent._id.id.findLastIndex" | "parent._id.id.toReversed" | "parent._id.id.toSorted" | "parent._id.id.with" | "parent._id.id.set" | "parent._id.id.toJSON" | "parent._id.id.valueOf" | "parent._id.id.equals" | "parent._id.id.write" | "parent._id.id.compare" | "parent._id.id.copy" | "parent._id.id.subarray" | "parent._id.id.writeBigInt64BE" | "parent._id.id.writeBigInt64LE" | "parent._id.id.writeBigUInt64BE" | "parent._id.id.writeBigUint64BE" | "parent._id.id.writeBigUInt64LE" | "parent._id.id.writeBigUint64LE" | "parent._id.id.writeUIntLE" | "parent._id.id.writeUintLE" | "parent._id.id.writeUIntBE" | "parent._id.id.writeUintBE" | "parent._id.id.writeIntLE" | "parent._id.id.writeIntBE" | "parent._id.id.readBigUInt64BE" | "parent._id.id.readBigUint64BE" | "parent._id.id.readBigUInt64LE" | "parent._id.id.readBigUint64LE" | "parent._id.id.readBigInt64BE" | "parent._id.id.readBigInt64LE" | "parent._id.id.readUIntLE" | "parent._id.id.readUintLE" | "parent._id.id.readUIntBE" | "parent._id.id.readUintBE" | "parent._id.id.readIntLE" | "parent._id.id.readIntBE" | "parent._id.id.readUInt8" | "parent._id.id.readUint8" | "parent._id.id.readUInt16LE" | "parent._id.id.readUint16LE" | "parent._id.id.readUInt16BE" | "parent._id.id.readUint16BE" | "parent._id.id.readUInt32LE" | "parent._id.id.readUint32LE" | "parent._id.id.readUInt32BE" | "parent._id.id.readUint32BE" | "parent._id.id.readInt8" | "parent._id.id.readInt16LE" | "parent._id.id.readInt16BE" | "parent._id.id.readInt32LE" | "parent._id.id.readInt32BE" | "parent._id.id.readFloatLE" | "parent._id.id.readFloatBE" | "parent._id.id.readDoubleLE" | "parent._id.id.readDoubleBE" | "parent._id.id.swap16" | "parent._id.id.swap32" | "parent._id.id.swap64" | "parent._id.id.writeUInt8" | "parent._id.id.writeUint8" | "parent._id.id.writeUInt16LE" | "parent._id.id.writeUint16LE" | "parent._id.id.writeUInt16BE" | "parent._id.id.writeUint16BE" | "parent._id.id.writeUInt32LE" | "parent._id.id.writeUint32LE" | "parent._id.id.writeUInt32BE" | "parent._id.id.writeUint32BE" | "parent._id.id.writeInt8" | "parent._id.id.writeInt16LE" | "parent._id.id.writeInt16BE" | "parent._id.id.writeInt32LE" | "parent._id.id.writeInt32BE" | "parent._id.id.writeFloatLE" | "parent._id.id.writeFloatBE" | "parent._id.id.writeDoubleLE" | "parent._id.id.writeDoubleBE" | "parent._id.id.BYTES_PER_ELEMENT" | "parent._id.id.buffer" | "parent._id.id.byteLength" | "parent._id.id.byteOffset" | "parent._id.id.buffer.slice" | "parent._id.id.buffer.byteLength" | "parent.hashTags.concat" | "parent.hashTags.indexOf" | "parent.hashTags.lastIndexOf" | "parent.hashTags.slice" | "parent.hashTags.length" | "parent.hashTags.includes" | "parent.hashTags.at" | "parent.hashTags.toLocaleString" | "parent.hashTags.toString" | "parent.hashTags.pop" | "parent.hashTags.push" | "parent.hashTags.join" | "parent.hashTags.shift" | "parent.hashTags.splice" | "parent.hashTags.unshift" | "parent.hashTags.every" | "parent.hashTags.some" | "parent.hashTags.forEach" | "parent.hashTags.map" | "parent.hashTags.filter" | "parent.hashTags.reduce" | "parent.hashTags.reduceRight" | "parent.hashTags.find" | "parent.hashTags.findIndex" | "parent.hashTags.entries" | "parent.hashTags.keys" | "parent.hashTags.values" | "parent.hashTags.flatMap" | "parent.hashTags.flat" | "parent.hashTags.type" | "parent.hashTags.isValid" | "parent.hashTags.toJSON" | "parent.hashTags.addListener" | "parent.hashTags.removeListener" | "parent.hashTags.removeAllListeners" | "parent.hashTags.optional" | "parent.hashTags.description" | "parent.hashTags.min" | "parent.hashTags.max" | "parent.hashTags.remove" | "parent.hashTags.move" | "parent.hashTags.swap" | "parent.hashTags.isEmpty" | "parent.hashTags.sum" | "parent.hashTags.avg" | "parent.hashTags.filtered" | "parent.hashTags.sorted" | "parent.hashTags.snapshot" | `parent.allHashTags.${number}` | `parent.allHashTags.${number}.name` | `parent.allHashTags.${number}._id` | `parent.allHashTags.${number}._id.toString` | `parent.allHashTags.${number}._id.id` | `parent.allHashTags.${number}._id.toJSON` | `parent.allHashTags.${number}._id._bsontype` | `parent.allHashTags.${number}._id.generationTime` | `parent.allHashTags.${number}._id.toHexString` | `parent.allHashTags.${number}._id.equals` | `parent.allHashTags.${number}._id.getTimestamp` | `parent.allHashTags.${number}._id.inspect` | `parent.allHashTags.${number}._id.id.indexOf` | `parent.allHashTags.${number}._id.id.lastIndexOf` | `parent.allHashTags.${number}._id.id.slice` | `parent.allHashTags.${number}._id.id.length` | `parent.allHashTags.${number}._id.id.includes` | `parent.allHashTags.${number}._id.id.at` | `parent.allHashTags.${number}._id.id.toLocaleString` | `parent.allHashTags.${number}._id.id.toString` | `parent.allHashTags.${number}._id.id.join` | `parent.allHashTags.${number}._id.id.reverse` | `parent.allHashTags.${number}._id.id.sort` | `parent.allHashTags.${number}._id.id.every` | `parent.allHashTags.${number}._id.id.some` | `parent.allHashTags.${number}._id.id.forEach` | `parent.allHashTags.${number}._id.id.map` | `parent.allHashTags.${number}._id.id.filter` | `parent.allHashTags.${number}._id.id.reduce` | `parent.allHashTags.${number}._id.id.reduceRight` | `parent.allHashTags.${number}._id.id.find` | `parent.allHashTags.${number}._id.id.findIndex` | `parent.allHashTags.${number}._id.id.fill` | `parent.allHashTags.${number}._id.id.copyWithin` | `parent.allHashTags.${number}._id.id.entries` | `parent.allHashTags.${number}._id.id.keys` | `parent.allHashTags.${number}._id.id.values` | `parent.allHashTags.${number}._id.id.findLast` | `parent.allHashTags.${number}._id.id.findLastIndex` | `parent.allHashTags.${number}._id.id.toReversed` | `parent.allHashTags.${number}._id.id.toSorted` | `parent.allHashTags.${number}._id.id.with` | `parent.allHashTags.${number}._id.id.set` | `parent.allHashTags.${number}._id.id.toJSON` | `parent.allHashTags.${number}._id.id.valueOf` | `parent.allHashTags.${number}._id.id.equals` | `parent.allHashTags.${number}._id.id.write` | `parent.allHashTags.${number}._id.id.compare` | `parent.allHashTags.${number}._id.id.copy` | `parent.allHashTags.${number}._id.id.subarray` | `parent.allHashTags.${number}._id.id.writeBigInt64BE` | `parent.allHashTags.${number}._id.id.writeBigInt64LE` | `parent.allHashTags.${number}._id.id.writeBigUInt64BE` | `parent.allHashTags.${number}._id.id.writeBigUint64BE` | `parent.allHashTags.${number}._id.id.writeBigUInt64LE` | `parent.allHashTags.${number}._id.id.writeBigUint64LE` | `parent.allHashTags.${number}._id.id.writeUIntLE` | `parent.allHashTags.${number}._id.id.writeUintLE` | `parent.allHashTags.${number}._id.id.writeUIntBE` | `parent.allHashTags.${number}._id.id.writeUintBE` | `parent.allHashTags.${number}._id.id.writeIntLE` | `parent.allHashTags.${number}._id.id.writeIntBE` | `parent.allHashTags.${number}._id.id.readBigUInt64BE` | `parent.allHashTags.${number}._id.id.readBigUint64BE` | `parent.allHashTags.${number}._id.id.readBigUInt64LE` | `parent.allHashTags.${number}._id.id.readBigUint64LE` | `parent.allHashTags.${number}._id.id.readBigInt64BE` | `parent.allHashTags.${number}._id.id.readBigInt64LE` | `parent.allHashTags.${number}._id.id.readUIntLE` | `parent.allHashTags.${number}._id.id.readUintLE` | `parent.allHashTags.${number}._id.id.readUIntBE` | `parent.allHashTags.${number}._id.id.readUintBE` | `parent.allHashTags.${number}._id.id.readIntLE` | `parent.allHashTags.${number}._id.id.readIntBE` | `parent.allHashTags.${number}._id.id.readUInt8` | `parent.allHashTags.${number}._id.id.readUint8` | `parent.allHashTags.${number}._id.id.readUInt16LE` | `parent.allHashTags.${number}._id.id.readUint16LE` | `parent.allHashTags.${number}._id.id.readUInt16BE` | `parent.allHashTags.${number}._id.id.readUint16BE` | `parent.allHashTags.${number}._id.id.readUInt32LE` | `parent.allHashTags.${number}._id.id.readUint32LE` | `parent.allHashTags.${number}._id.id.readUInt32BE` | `parent.allHashTags.${number}._id.id.readUint32BE` | `parent.allHashTags.${number}._id.id.readInt8` | `parent.allHashTags.${number}._id.id.readInt16LE` | `parent.allHashTags.${number}._id.id.readInt16BE` | `parent.allHashTags.${number}._id.id.readInt32LE` | `parent.allHashTags.${number}._id.id.readInt32BE` | `parent.allHashTags.${number}._id.id.readFloatLE` | `parent.allHashTags.${number}._id.id.readFloatBE` | `parent.allHashTags.${number}._id.id.readDoubleLE` | `parent.allHashTags.${number}._id.id.readDoubleBE` | `parent.allHashTags.${number}._id.id.swap16` | `parent.allHashTags.${number}._id.id.swap32` | `parent.allHashTags.${number}._id.id.swap64` | `parent.allHashTags.${number}._id.id.writeUInt8` | `parent.allHashTags.${number}._id.id.writeUint8` | `parent.allHashTags.${number}._id.id.writeUInt16LE` | `parent.allHashTags.${number}._id.id.writeUint16LE` | `parent.allHashTags.${number}._id.id.writeUInt16BE` | `parent.allHashTags.${number}._id.id.writeUint16BE` | `parent.allHashTags.${number}._id.id.writeUInt32LE` | `parent.allHashTags.${number}._id.id.writeUint32LE` | `parent.allHashTags.${number}._id.id.writeUInt32BE` | `parent.allHashTags.${number}._id.id.writeUint32BE` | `parent.allHashTags.${number}._id.id.writeInt8` | `parent.allHashTags.${number}._id.id.writeInt16LE` | `parent.allHashTags.${number}._id.id.writeInt16BE` | `parent.allHashTags.${number}._id.id.writeInt32LE` | `parent.allHashTags.${number}._id.id.writeInt32BE` | `parent.allHashTags.${number}._id.id.writeFloatLE` | `parent.allHashTags.${number}._id.id.writeFloatBE` | `parent.allHashTags.${number}._id.id.writeDoubleLE` | `parent.allHashTags.${number}._id.id.writeDoubleBE` | `parent.allHashTags.${number}._id.id.BYTES_PER_ELEMENT` | `parent.allHashTags.${number}._id.id.buffer` | `parent.allHashTags.${number}._id.id.byteLength` | `parent.allHashTags.${number}._id.id.byteOffset` | `parent.allHashTags.${number}._id.id.buffer.slice` | `parent.allHashTags.${number}._id.id.buffer.byteLength` | `parent.allHashTags.${number}.usage` | `parent.allHashTags.${number}.maxCount` | `parent.allHashTags.${number}.mostRecent` | `parent.allHashTags.${number}.usage.concat` | `parent.allHashTags.${number}.usage.indexOf` | `parent.allHashTags.${number}.usage.lastIndexOf` | `parent.allHashTags.${number}.usage.slice` | `parent.allHashTags.${number}.usage.length` | `parent.allHashTags.${number}.usage.includes` | `parent.allHashTags.${number}.usage.at` | `parent.allHashTags.${number}.usage.toLocaleString` | `parent.allHashTags.${number}.usage.toString` | `parent.allHashTags.${number}.usage.pop` | `parent.allHashTags.${number}.usage.push` | `parent.allHashTags.${number}.usage.join` | `parent.allHashTags.${number}.usage.shift` | `parent.allHashTags.${number}.usage.splice` | `parent.allHashTags.${number}.usage.unshift` | `parent.allHashTags.${number}.usage.every` | `parent.allHashTags.${number}.usage.some` | `parent.allHashTags.${number}.usage.forEach` | `parent.allHashTags.${number}.usage.map` | `parent.allHashTags.${number}.usage.filter` | `parent.allHashTags.${number}.usage.reduce` | `parent.allHashTags.${number}.usage.reduceRight` | `parent.allHashTags.${number}.usage.find` | `parent.allHashTags.${number}.usage.findIndex` | `parent.allHashTags.${number}.usage.entries` | `parent.allHashTags.${number}.usage.keys` | `parent.allHashTags.${number}.usage.values` | `parent.allHashTags.${number}.usage.flatMap` | `parent.allHashTags.${number}.usage.flat` | `parent.allHashTags.${number}.usage.type` | `parent.allHashTags.${number}.usage.isValid` | `parent.allHashTags.${number}.usage.toJSON` | `parent.allHashTags.${number}.usage.addListener` | `parent.allHashTags.${number}.usage.removeListener` | `parent.allHashTags.${number}.usage.removeAllListeners` | `parent.allHashTags.${number}.usage.optional` | `parent.allHashTags.${number}.usage.description` | `parent.allHashTags.${number}.usage.min` | `parent.allHashTags.${number}.usage.max` | `parent.allHashTags.${number}.usage.remove` | `parent.allHashTags.${number}.usage.move` | `parent.allHashTags.${number}.usage.swap` | `parent.allHashTags.${number}.usage.isEmpty` | `parent.allHashTags.${number}.usage.sum` | `parent.allHashTags.${number}.usage.avg` | `parent.allHashTags.${number}.usage.filtered` | `parent.allHashTags.${number}.usage.sorted` | `parent.allHashTags.${number}.usage.snapshot` | `parent.detailTypes.${number}` | `parent.allAttributes.${number}` | `parent.allAttributes.${number}.path` | `parent.allAttributes.${number}.value` | `parent.allAttributes.${number}.unset` | "attributes.concat" | "attributes.indexOf" | "attributes.lastIndexOf" | "attributes.slice" | "attributes.length" | "attributes.includes" | "attributes.at" | "attributes.toLocaleString" | "attributes.toString" | "attributes.pop" | "attributes.push" | "attributes.join" | "attributes.shift" | "attributes.splice" | "attributes.unshift" | "attributes.every" | "attributes.some" | "attributes.forEach" | "attributes.map" | "attributes.filter" | "attributes.reduce" | "attributes.reduceRight" | "attributes.find" | "attributes.findIndex" | "attributes.entries" | "attributes.keys" | "attributes.values" | "attributes.flatMap" | "attributes.flat" | "attributes.type" | "attributes.isValid" | "attributes.toJSON" | "attributes.addListener" | "attributes.removeListener" | "attributes.removeAllListeners" | "attributes.optional" | "attributes.description" | "attributes.min" | "attributes.max" | "attributes.remove" | "attributes.move" | "attributes.swap" | "attributes.isEmpty" | "attributes.sum" | "attributes.avg" | "attributes.filtered" | "attributes.sorted" | "attributes.snapshot" | "subRows.concat" | "subRows.indexOf" | "subRows.lastIndexOf" | "subRows.slice" | "subRows.length" | "subRows.includes" | "subRows.at" | "subRows.toLocaleString" | "subRows.toString" | "subRows.join" | "subRows.every" | "subRows.some" | "subRows.forEach" | "subRows.map" | "subRows.filter" | "subRows.reduce" | "subRows.reduceRight" | "subRows.find" | "subRows.findIndex" | "subRows.entries" | "subRows.keys" | "subRows.values" | "subRows.flatMap" | "subRows.flat" | "subRows.type" | "subRows.isValid" | "subRows.toJSON" | "subRows.addListener" | "subRows.removeListener" | "subRows.removeAllListeners" | "subRows.optional" | "subRows.description" | "subRows.min" | "subRows.max" | "subRows.isEmpty" | "subRows.sum" | "subRows.avg" | "subRows.filtered" | "subRows.sorted" | "subRows.snapshot" | "subRows.update" | "subRows.subscribe" | "subRows.unsubscribe", header: string, section: "bleaching" | "drying" | "ironing" | "dryClean" | "tumbleDry" | "washTemperature" | "wash" | "permanentPress" | "gentleOrDelicate", readonly?: boolean) => MRT_ColumnDef<IClassifier>;
    date: <U_2, UKey_2 extends keyof U_2>(...dependencies: IDependency<U_2, UKey_2>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", $header?: string | undefined, opts?: {
        min?: Date | undefined;
        max?: Date | undefined;
        dateType?: "past" | "future" | undefined;
    } | undefined, required?: boolean, readonly?: boolean) => MRT_ColumnDef<IClassifier>;
    dictionary: <U_3, UKey_3 extends keyof U_3>(...dependencies: IDependency<U_3, UKey_3>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", header: string, objectType: string, opts?: import("../defs/dbDictCol").DBDictColOptions | undefined) => MRT_ColumnDef<IClassifier>;
    dollar: <U_4, UKey_4 extends keyof U_4>(...dependencies: IDependency<U_4, UKey_4>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", $header: string, opts: {
        min?: number | undefined;
        max?: number | undefined;
        required?: boolean | undefined;
        readonly?: boolean | undefined;
    }) => MRT_ColumnDef<IClassifier, number | undefined>;
    double: <U_5, UKey_5 extends keyof U_5>(...dependencies: IDependency<U_5, UKey_5>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", $header: string, opts: {
        min?: number | undefined;
        max?: number | undefined;
        required?: boolean | undefined;
        readonly?: boolean | undefined;
    }) => MRT_ColumnDef<IClassifier>;
    enum: <U_6, UKey_6 extends keyof U_6>(...dependencies: IDependency<U_6, UKey_6>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", $header: string, opts: {
        id?: string | undefined;
        options?: Record<string, string | {
            text: string;
            key: string;
        }> | undefined;
        required?: boolean | undefined;
        readonly?: boolean | undefined;
        enumKey?: "amperageUnits" | "rateOfEnergyCapacityUOM" | "powerConsumptionUOM" | "voltageUOM" | "wattageUOM" | "applianceTypes" | "aspectRatios" | "auctionSites" | "backlineTypes" | "barcodeTypes" | "batteryTypes" | "bookGenres" | "bookTypes" | "bootTypes" | "cellCarriers" | "closureTypes" | "clubTypes" | "collarTypes" | "connectorGenders" | "consoleTypes" | "dataConnectorTypes" | "videoConnectorTypes" | "powerConnectorTypes" | "cableTypes" | "countries" | "cuffTypes" | "detailsTypes" | "dinnerwareTypes" | "dressTypes" | "ESRBRatings" | "fabricTypes" | "face-pov" | "face-x" | "face-y" | "face-z" | "fitTypes" | "flags" | "flatwareTypes" | "flexTypes" | "garmentLengths" | "genders" | "handOrientations" | "heightMaps" | "ironTypes" | "itemConditions" | "itemDispositions" | "languages" | "legStyles" | "lifestyleTypes" | "metalTypes" | "movieGenres" | "movieRatings" | "musicFormatTypes" | "musicGenres" | "neckTypes" | "operatingSystems" | "operatingSystemNames" | "payorTypes" | "pocketTypes" | "powerTypes" | "productColors" | "productImageDisposition" | "provinces" | "riseTypes" | "materials" | "shaftTypes" | "shapeTypes" | "shippers" | "shippingSpeeds" | "shoeHeelTypes" | "shoeWidths" | "sleeveLengths" | "sleeveTypes" | "productImageType" | "strapTypes" | "suitTypes" | "swimsuitBottomStyles" | "swimsuitTopStyles" | "toeStyles" | "tvRatings" | "videoFormatTypes" | "videoTypes" | "wedgeTypes" | "driveTypes" | "memorySpeedUOM" | "memoryFormFactors" | "compatibleDevices" | "memoryTypes" | "driveInterfaces" | "connectivity" | "driveFormFactors" | "awardNames" | "hugoAwardCategories" | "emmyAwardCategories" | "grammyAwardCategories" | "tonyAwardCategories" | "pulizerPrizeCategories" | "oscarAwardCategories" | "durationUOM" | "nyTimesAwardCategories" | "capacityUOM" | "casLatency" | "attributePaths" | undefined;
    }) => MRT_ColumnDef<IClassifier, string | undefined>;
    flags: <U_7, UKey_7 extends keyof U_7>(...dependencies: IDependency<U_7, UKey_7>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", header: string, flags: string[], readonly?: boolean) => MRT_ColumnDef<IClassifier>;
    freeSolo: <U_8, UKey_8 extends keyof U_8>(...dependencies: IDependency<U_8, UKey_8>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", header: string, comparator: (x?: string | undefined, y?: string | undefined) => Compared, opts?: {
        required?: boolean | undefined;
        readonly?: boolean | undefined;
        multiple?: boolean | undefined;
    } | undefined) => MRT_ColumnDef<IClassifier, string | undefined>;
    int: <U_9, UKey_9 extends keyof U_9>(...dependencies: IDependency<U_9, UKey_9>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", $header: string, opts: {
        min?: number | undefined;
        max?: number | undefined;
        readonly?: boolean | undefined;
        required?: boolean | undefined;
    }) => MRT_ColumnDef<IClassifier>;
    intMeasure: <U_10, UKey_10 extends keyof U_10>(...dependencies: IDependency<U_10, UKey_10>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", $header: string, uom: string, opts: {
        min?: number | undefined;
        max?: number | undefined;
        required?: boolean | undefined;
        readonly?: boolean | undefined;
    }) => MRT_ColumnDef<IClassifier, number | undefined>;
    listOfEmbed: <U_11, UKey_11 extends keyof U_11>(...dependencies: IDependency<U_11, UKey_11>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", header: string, objectType: string, readonly?: boolean) => MRT_ColumnDef<IClassifier, ListBack<unknown>>;
    listOfEnum: <U_12, UKey_12 extends keyof U_12>(...dependencies: IDependency<U_12, UKey_12>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", $header: string, opts: {
        options?: Record<string, string | {
            text: string;
            key: string;
        }> | undefined;
        required?: boolean | undefined;
        readonly?: false | undefined;
        enumKey: "amperageUnits" | "rateOfEnergyCapacityUOM" | "powerConsumptionUOM" | "voltageUOM" | "wattageUOM" | "applianceTypes" | "aspectRatios" | "auctionSites" | "backlineTypes" | "barcodeTypes" | "batteryTypes" | "bookGenres" | "bookTypes" | "bootTypes" | "cellCarriers" | "closureTypes" | "clubTypes" | "collarTypes" | "connectorGenders" | "consoleTypes" | "dataConnectorTypes" | "videoConnectorTypes" | "powerConnectorTypes" | "cableTypes" | "countries" | "cuffTypes" | "detailsTypes" | "dinnerwareTypes" | "dressTypes" | "ESRBRatings" | "fabricTypes" | "face-pov" | "face-x" | "face-y" | "face-z" | "fitTypes" | "flags" | "flatwareTypes" | "flexTypes" | "garmentLengths" | "genders" | "handOrientations" | "heightMaps" | "ironTypes" | "itemConditions" | "itemDispositions" | "languages" | "legStyles" | "lifestyleTypes" | "metalTypes" | "movieGenres" | "movieRatings" | "musicFormatTypes" | "musicGenres" | "neckTypes" | "operatingSystems" | "operatingSystemNames" | "payorTypes" | "pocketTypes" | "powerTypes" | "productColors" | "productImageDisposition" | "provinces" | "riseTypes" | "materials" | "shaftTypes" | "shapeTypes" | "shippers" | "shippingSpeeds" | "shoeHeelTypes" | "shoeWidths" | "sleeveLengths" | "sleeveTypes" | "productImageType" | "strapTypes" | "suitTypes" | "swimsuitBottomStyles" | "swimsuitTopStyles" | "toeStyles" | "tvRatings" | "videoFormatTypes" | "videoTypes" | "wedgeTypes" | "driveTypes" | "memorySpeedUOM" | "memoryFormFactors" | "compatibleDevices" | "memoryTypes" | "driveInterfaces" | "connectivity" | "driveFormFactors" | "awardNames" | "hugoAwardCategories" | "emmyAwardCategories" | "grammyAwardCategories" | "tonyAwardCategories" | "pulizerPrizeCategories" | "oscarAwardCategories" | "durationUOM" | "nyTimesAwardCategories" | "capacityUOM" | "casLatency" | "attributePaths";
    }) => MRT_ColumnDef<IClassifier>;
    listOfFreeSolo: <U_13, UKey_13 extends keyof U_13>(...dependencies: IDependency<U_13, UKey_13>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", header: string, objectType: string, comparator: (x: any, y: any) => Compared, readonly?: boolean) => MRT_ColumnDef<IClassifier, any>;
    listOfObject: <U_14, UKey_14 extends keyof U_14>(...dependencies: IDependency<U_14, UKey_14>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", header: string, objectType: string, readonly?: boolean) => MRT_ColumnDef<IClassifier, ListBack<import("material-react-table").MRT_RowData & {
        _id: import("bson").ObjectId;
    }>>;
    listOfPrimitive: <U_15, UKey_15 extends keyof U_15>(...dependencies: IDependency<U_15, UKey_15>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", header: string, objectType: string, readonly?: boolean) => MRT_ColumnDef<IClassifier, ListBack<unknown>>;
    lookup: <U_16, UKey_16 extends keyof U_16>(...dependencies: IDependency<U_16, UKey_16>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", header: string, opts: {
        onChange?: ((setValue: (name: string, value: any) => void, oldValue: any, newValue: any) => void) | undefined;
        objectType: string;
    }) => MRT_ColumnDef<IClassifier, any>;
    measure: <U_17, UKey_17 extends keyof U_17>(...dependencies: IDependency<U_17, UKey_17>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", $header: string, uom: string, opts: {
        min?: number | undefined;
        max?: number | undefined;
        required?: boolean | undefined;
        readonly?: boolean | undefined;
        id?: string | undefined;
    }) => MRT_ColumnDef<IClassifier, number | undefined>;
    percent: <U_18, UKey_18 extends keyof U_18>(...dependencies: IDependency<U_18, UKey_18>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", $header: string, opts: {
        min?: number | undefined;
        max?: number | undefined;
        required?: boolean | undefined;
        readonly?: boolean | undefined;
    }) => MRT_ColumnDef<IClassifier, number | undefined>;
    PK: () => MRT_ColumnDef<IClassifier>;
    radio: <U_19, UKey_19 extends keyof U_19>(...dependencies: IDependency<U_19, UKey_19>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", $header: string, opts: {
        enumKey: string;
        required?: boolean | undefined;
        readonly?: boolean | undefined;
    }) => MRT_ColumnDef<IClassifier>;
    string: <U_20, UKey_20 extends keyof U_20>(...dependencies: IDependency<U_20, UKey_20>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", $header?: string | undefined, formatter?: ((x?: unknown) => string) | undefined, opts?: Pick<import("@tanstack/table-core").ColumnMeta<IClassifier, unknown>, "type" | "pattern" | "required" | "min" | "max" | "maxLength" | "minLength" | "step" | "validate" | "readonly"> | undefined) => MRT_ColumnDef<IClassifier, unknown>;
    text: <U_21, UKey_21 extends keyof U_21>(...dependencies: IDependency<U_21, UKey_21>[]) => (name: "name" | "type" | "_id" | "shortName" | "hashTags" | "allHashTags" | "detailTypes" | "allAttributes" | "taxonomy" | "parent" | "attributes" | "subRows", $header?: string | undefined, formatter?: ((x?: unknown) => string) | undefined, opts?: Pick<import("@tanstack/table-core").ColumnMeta<IClassifier, unknown>, "type" | "pattern" | "required" | "min" | "max" | "maxLength" | "minLength" | "step" | "validate" | "readonly"> | undefined) => MRT_ColumnDef<IClassifier, unknown>;
};
export declare const classifierColumns: MRT_ColumnDef<IClassifier>[];
