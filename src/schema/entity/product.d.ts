import Realm, { BSON } from 'realm';
import { AnyConnector, DetailTypes, IAward, IBarcode, IBrand, IClassifier, IClothingCare, ICurrentSetting, ICustomItemField, IHashTag, IIncludedItem, IMadeOfSection, IMinMax, IOperatingSystemInfo, IPiece, IProduct, ITrack, MonthYear, Opt, Year } from '../../types';
import { ProductColors, Genders, ClosureTypes, FitTypes, LegStyles, GarmentLengths, LifestyleTypes, PocketTypes, RiseTypes, BootTypes, HeightMaps, ShoeHeelTypes, ShoeWidths, StrapTypes, ToeStyles, SwimsuitBottomStyles, SwimsuitTopStyles, BacklineTypes, CollarTypes, CuffTypes, DressTypes, NeckTypes, SleeveTypes, SuitTypes, BookGenres, BookTypes, Languages, ESRBRatings, ConsoleTypes, MusicFormatTypes, MusicGenres, MovieGenres, MovieRatings, TVRatings, VideoFormatTypes, VideoTypes, ApplianceTypes, AspectRatios, BatteryTypes, CellCarriers, ClubTypes, DinnerwareTypes, FlexTypes, HandOrientations, IronTypes, MetalTypes, ShaftTypes, WedgeTypes, SleeveLengths, FlatwareTypes, CableTypes, Materials, Countries, CompatibleDevices, AwardNames, PowerTypes } from '../enums';
import { Flags } from './../enums/flags';
import { EntityBase } from './EntityBase';
import { DensityDimension } from '../dimensions/DensityMeasure';
import { WeightDimension } from '../dimensions/WeightMeasure';
import { AngleDimension } from '../dimensions/AngleMeasure';
import { CapacityDimension } from '../dimensions/CapacityMeasure';
import { DataTransferRateDimension } from '../dimensions/DataTransferRateMeasure';
import { LengthDimension } from '../dimensions/LengthMeasure';
import { MemorySpeedDimension } from '../dimensions/MemorySpeedMeasure';
import { PowerConsumptionDimension } from '../dimensions/PowerConsumptionMeasure';
import { RateOfEnergyDimension } from '../dimensions/RateOfEnergyCapacityMeasure';
import { RotationalSpeedDimension } from '../dimensions/RotationalSpeedMeasure';
import { VideoRuntimeDimension } from '../dimensions/VideoRuntime';
export declare class Product extends EntityBase<IProduct> implements IProduct {
    inseamSize?: Opt<LengthDimension>;
    lengthSize?: Opt<LengthDimension>;
    waistSize?: Opt<LengthDimension>;
    height?: Opt<LengthDimension>;
    width?: Opt<LengthDimension>;
    length?: Opt<LengthDimension>;
    weight?: Opt<LengthDimension>;
    footSize?: Opt<LengthDimension>;
    heelHeight?: Opt<LengthDimension>;
    bustSize?: Opt<LengthDimension>;
    chestSize?: Opt<LengthDimension>;
    neckSize?: Opt<LengthDimension>;
    sleeveSize?: Opt<LengthDimension>;
    awards: DBList<IAward<AwardNames>>;
    runtime?: Opt<VideoRuntimeDimension>;
    cordLength?: Opt<LengthDimension>;
    batteryCapacity?: Opt<PowerConsumptionDimension>;
    powerTypes?: DBList<PowerTypes> | undefined;
    manufactureDate?: Opt<MonthYear>;
    rateOfEnergyCapacity?: Opt<RateOfEnergyDimension>;
    capacity?: Opt<CapacityDimension<'GB'>>;
    operatingSystem?: Opt<IOperatingSystemInfo>;
    screenSize?: Opt<LengthDimension>;
    driveType?: Opt<string>;
    driveForm?: Opt<string>;
    connectivity: DBList<string>;
    driveInterface?: Opt<string>;
    writeSpeed?: Opt<DataTransferRateDimension>;
    readSpeed?: Opt<DataTransferRateDimension>;
    dataTransferRate?: Opt<DataTransferRateDimension>;
    rpm?: Opt<RotationalSpeedDimension>;
    cacheSize?: Opt<CapacityDimension<'MB'>>;
    memoryType?: Opt<string>;
    memoryForm?: Opt<string>;
    memorySpeed?: Opt<MemorySpeedDimension>;
    clubLength?: Opt<LengthDimension>;
    lie?: Opt<AngleDimension>;
    loft?: Opt<AngleDimension>;
    swingWeight?: Opt<WeightDimension>;
    compatibleDevices: DBList<CompatibleDevices>;
    partNumbers: DBList<string>;
    overrideTitle: boolean;
    material?: Opt<Materials>;
    cableType: Opt<CableTypes>;
    dinnerwareInventory: Opt<Record<DinnerwareTypes, IPiece>>;
    flatwareInventory: Opt<Record<FlatwareTypes, number>>;
    itemType: Opt<string>;
    connectors: DBList<AnyConnector>;
    compatibleWith: DBList<string>;
    sleeveLength: Opt<SleeveLengths>;
    input: Opt<ICurrentSetting>;
    output: Opt<ICurrentSetting>;
    batteryCount: Opt<number>;
    batteryType: Opt<BatteryTypes>;
    testedOn: Opt<Date>;
    aspectRatio: Opt<AspectRatios>;
    cellCarrier: Opt<CellCarriers>;
    massInAir?: Opt<WeightDimension>;
    massWaterDisplaced?: Opt<WeightDimension>;
    get density(): Opt<DensityDimension>;
    metal: Opt<MetalTypes>;
    dinnerwareType: Opt<DinnerwareTypes>;
    pattern: Opt<string>;
    applianceType: Opt<ApplianceTypes>;
    clubType: Opt<ClubTypes>;
    flexType: Opt<FlexTypes>;
    handOrientation: Opt<HandOrientations>;
    ironType: Opt<IronTypes>;
    shaftType: Opt<ShaftTypes>;
    wedgeType: Opt<WedgeTypes>;
    ages: Opt<IMinMax<number>>;
    players: Opt<IMinMax<number>>;
    pieceCount: Opt<number>;
    _id: BSON.ObjectId;
    asins: DBList<string>;
    brand: Opt<IBrand>;
    classifier: Opt<IClassifier>;
    includes: DBList<IIncludedItem>;
    customAttributes: DBList<ICustomItemField>;
    features: DBList<string>;
    flags: DBList<Flags>;
    hashTags: DBList<IHashTag>;
    modelNo: Opt<string>;
    notes: Opt<string>;
    title: Opt<string>;
    upcs: DBList<IBarcode>;
    circa: Opt<Year>;
    color: DBList<ProductColors>;
    description: Opt<string>;
    madeOf: DBList<IMadeOfSection>;
    gender: Opt<Genders>;
    cutNo: Opt<string>;
    styleNo: Opt<string>;
    text: Opt<string>;
    rnNo: Opt<number>;
    clothingCare: Opt<IClothingCare>;
    closureType: Opt<ClosureTypes>;
    fitType: Opt<FitTypes>;
    legStyle: Opt<LegStyles>;
    lengthType: Opt<GarmentLengths>;
    lifestyleType: Opt<LifestyleTypes>;
    pocketType: Opt<PocketTypes>;
    riseType: Opt<RiseTypes>;
    size: Opt<number>;
    bootType: Opt<BootTypes>;
    heightMapType: Opt<HeightMaps>;
    shoeHeelType: Opt<ShoeHeelTypes>;
    shoeWidth: Opt<ShoeWidths>;
    strapType: Opt<StrapTypes>;
    toeStyle: Opt<ToeStyles>;
    swimsuitBottomStyle: Opt<SwimsuitBottomStyles>;
    swimsuitTopStyle: Opt<SwimsuitTopStyles>;
    backlineType: Opt<BacklineTypes>;
    collarType: Opt<CollarTypes>;
    cuffType: Opt<CuffTypes>;
    dressType: Opt<DressTypes>;
    neckType: Opt<NeckTypes>;
    sleeveType: Opt<SleeveTypes>;
    suitType: Opt<SuitTypes>;
    copyright: Opt<string>;
    mediaSubtitle: Opt<string>;
    mediaTitle: Opt<string>;
    authors: DBList<string>;
    blurb: Opt<string>;
    bookGenre: Opt<BookGenres>;
    bookType: Opt<BookTypes>;
    edition: Opt<number>;
    illustrators: DBList<string>;
    language: Opt<Languages>;
    pages: Opt<number>;
    publishers: DBList<string>;
    collectionOf: DBList<string>;
    count: Opt<number>;
    directedBy: DBList<string>;
    videoFormat: Opt<VideoFormatTypes>;
    videoGenre: Opt<MovieGenres>;
    movieRating: Opt<MovieRatings>;
    starring: DBList<string>;
    tvRating: Opt<TVRatings>;
    videoType: Opt<VideoTypes>;
    ESRBRating: Opt<ESRBRatings>;
    consoleType: Opt<ConsoleTypes>;
    studio: Opt<string>;
    artist: Opt<string>;
    musicFormat: Opt<MusicFormatTypes>;
    musicGenre: Opt<MusicGenres>;
    tracks: DBList<ITrack>;
    modelName: Opt<string>;
    static schema: Realm.ObjectSchema;
    type: DBList<DetailTypes>;
    batteryStats?: Opt<ICurrentSetting>;
    acAdapter?: Opt<ICurrentSetting>;
    origin?: Opt<Countries>;
    CASLatency?: Opt<string>;
    dataTransferBandwidth?: Opt<string>;
    pinCount?: Opt<number>;
    voltage?: Opt<number>;
    season?: Opt<number>;
    get sizeText(): string | undefined;
    get sizeSelector(): string | undefined;
    get primaryColor(): ProductColors | undefined;
    get primaryColorSelector(): string | undefined;
    get allHashTags(): IHashTag[];
    get detailTypes(): DetailTypes[];
    static labelProperty: string;
    static update(item: IProduct): IProduct;
    static init(): InitValue<IProduct>;
}
